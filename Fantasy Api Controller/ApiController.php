<?php
namespace App\Http\Controllers\api\v1;

use JWTAuth;
use Tymon\JWTAuth\Contracts\JWTSubject;
use Tymon\JWTAuth\Exceptions\TokenInvalidException;
use Tymon\JWTAuth\Exceptions\TokenExpiredException;
use Tymon\JWTAuth\Exceptions\JWTException;

use App\Http\Controllers\Controller;

use App\Http\Controllers\MailController;

use App\Http\Controllers\CricketapiController;
use App\Http\Controllers\Cricketapi2Controller;

use Carbon\Carbon;
use App\AdharCard;

use App\Http\Requests;
use Image;
use App\Http\Resources\MatchPlayerResource;
use App\Http\Resources\MatchPlayerResource_new_v2;

use App\Http\Resources\LoginResource;

use App\Http\Resources\TransactionResource;

use App\Http\Requests\LoginRequest;

use App\Http\Resources\TeamResource;

use Str,Auth,Blade,Config,Cache,Cookie,DB,File,Mail,Redirect,Response,Session,BASE_URL,View;

use Illuminate\Support\Facades\Input;

use App\User;

use Google_Client;
// use Paytm\PaytmChecksum;
use App\JoinTeam;

use App\ReferralBonus;
use App\PaytmChecksum;

use App\Http\Resources\MatchListResource;

use App\Http\Resources\PriceCardResource;

use App\Http\Resources\LeagueListResource;
use App\Http\Resources\LeagueListResource_new;

use App\ScratchCard;

use App\BonusAmount;

use App\Bank;

use App\Otp;

use App\Team;

use App\AndroidVersion;

use App\Player;

use App\PanCard;

use App\RegisterUserTemp;

use App\Advertisement;

use App\Offer;

use App\UsedOffer;

use App\Withdraw;

use App\ListMatch;

use App\Leaderboard;

use App\ResultPoint;

use App\FinalResult;

use App\PlayerDetail;

use App\ResultMatch;

use App\Notification;

use App\UserBalance;

use App\Transaction;

use App\RegisterUser;

use App\JoinedLeague;

use App\MatchPlayer;

use App\MatchPriceCard;

use App\MatchChallenge;

use App\AndroidAppId;

use App\ChallengeCategory;

use App\LeaguesTransaction;

use App\Helpers\Helpers;
use App\Helpers\CommonHelper;
use Illuminate\Http\Request;

use Illuminate\Support\Facades\Hash;

use Illuminate\Support\Facades\Validator;

use Illuminate\Foundation\Auth\RegistersUsers;

use Illuminate\Foundation\Auth\ResetsPasswords;
use App\TokenForMail;

use Illuminate\Foundation\Auth\SendsPasswordResetEmails;
use mPDF;
// use Illuminate\Support\Facades\Redis;


class ApiController extends Controller

{

    use SendsPasswordResetEmails, ResetsPasswords {

        SendsPasswordResetEmails::broker insteadof ResetsPasswords;

        ResetsPasswords::credentials insteadof SendsPasswordResetEmails;

    }

    /**

     * Create a new AuthController instance.

     *

     * @return void

     */





    public function __construct()

    {

        // $this->middleware('jwt', ['except' => ['login','register','verifyOtp','verifyOtpOnRegister','socialLogin','logout','getOffersAndroid','get_cashfree_checksum','get_paytm_checksum','getscorecards','verifyEmailOtp','promoterMatches','promoterContests','promoterTotal','sendNewOtp_new','verifyOtp_new' , 'register_new' , 'verifyOtpOnRegister_new','compare','investments','download','getReferCode' , 'getSeries' , 'getSeriesLeaderboard','getMatchLeaderboards']]);

        $this->middleware('jwt', ['except' => ['login' , 'login_new','verifyOtpOnLogin','register','send_new_otp','getMatchList','verifyOtp','socialLogin','getChallengesNew','leagueDetails','myteam','myjointeam','createTeam','getplayerlist','getMatchListUpgrade','myJoinedMatches','myBalance','myPlayHistory','refreshScoresNew','joinleague','myUsableBalance','myjoinedleagues','categoryLeagues','leaderboard','matchplayerspoints','razorPay','requestWithdraw','androidAddFundApi','findJoinTeam','joinleaguealter','editProfile','getOffersAndroid','myTransaction','userFullDetails','payWithPaytm','aboutToExpire','joinByCode','withdrawList','allVerify','bankVerify','seePanDetails','verifyPanRequest','verifyMobile','get_cashfree_checksum','cashfree_notify','paytm_notify','sendNewOtp','seebankdetails','uploadBankImageAndroid','uploadPanImageAndroid','usernotifications','updateteamname','updateteamname_new','createChallenge','myTeam','leagueDetails','leagueDetailsMain','getposters','referBonusList','uploadPanImage','getteamtoshow','getscorecards','playerfullinfo','getplayerinfo','aboutToExpire','updateteamchallenge','version','Hash_password','verifyPromoCode','getChallenges','changePassword','sendNewMail','seennotifications','HashPassword','hashPasswordCron','hashPasswordCron2','findScratchCard','openScratchCard','ScratchCardsList','updateProfileImage','removeProfileImage','verifyOtpOnRegister','addCashBanners','amountDeduct','liveMatches','liveScores','liveScoreBoard','checkRazorStatusTest','checkPaytmStatusTest','get_paytm_checksum','compare','compare_new','investments','download','getReferCode' , 'getSeries' , 'getSeriesLeaderboard','getMatchLeaderboards' , 'getPromoterSeriesLeaderboard' , 'getPromoterMatchLeaderboards','get_cashfree_token','sendNewOtp_new','verifyOtp_new' , 'register_new' , 'verifyOtpOnRegister_new','editEmail','verifyEmailOtp','verifyAdharRequest','uploadBackAdharImage','uploadAdharImage','promoterMatches','promoterContests','promoterTotal','reset','forgotPassword_new','validateOTP','changePassword_new','resendOtp_new','getPromoterSeries','getChallengesByCategory','joinleague_new_v2','myJoinedMatches_live','get_subpaisa_checksum','sabpaisa_notify_api','TransferAffiliat_toBalance']]);

    }

    // xxxxxxxxxxxxxxxxxxx TDS NEW FUNCTION xxxxxxxxxxxxxxxxx
public function tds_data(Request $request){

  $this->validate($request,[
    'user_id' => 'required'
  ]);

  $user_id = $request->user_id;
  $tds_calculte_data = DB :: table('registerusers_session')
      ->where("user_id",$request->user_id)
      ->first();
$total_investment='0.00';
$total_winning='0.00';
$tds_to_be_paid='0.00';
$tds_paid = '0.00';

    if(!empty($tds_calculte_data)){
          $total_investment= $tds_calculte_data->total_opening_balance + $tds_calculte_data->total_deposit +$tds_calculte_data->total_commission;

             $total_winning = $tds_calculte_data->total_withdraw;

             $tds_paid =  $tds_calculte_data->total_tds_dedcuted;
             $net_winning =  ($tds_calculte_data->total_withdraw - $total_investment);
             if($net_winning > 0) {
              $tds_amount = $net_winning*0.3;
              $tds_to_be_paid = $tds_paid > 0 ? $tds_amount-$tds_paid : $tds_amount;
              if($tds_to_be_paid < 0) {
                $tds_to_be_paid = 0;
              }
             }
    }
        $tdsdata['tdsdata']=array(
          'financial_year'=>"Total Investment Till Date for FY 2023-2024",
          'total_investment'=> (string)$total_investment,
          'total_winning' => (string)$total_winning,
          'tds_to_be_paid' => (string)$tds_to_be_paid,
          'tds_paid'=>(string)$tds_paid
        );

  return Response::json(["status" => STATUS_SUCCESS,"result"=> $tdsdata]); die;
}

public function all_tds_list(Request $request){
    $this->validate($request,[
      'user_id' => 'required'
    ]);
     $TDsList = DB :: table('tds_new')
      ->where('user_id',$request->user_id)
      ->whereDate('created_at', '>=',$request->start_date)
      ->whereDate('created_at', '<=',$request->end_date)
      ->orderby('id','DESC')
      ->limit(100)
      ->get();
    $alltdslist['trasaction_list']=array();
     if(!empty($TDsList)){
          foreach ($TDsList as $key => $value) {
              $alltdslist['trasaction_list'][] = array(
                'text'=> "TDS_".date("F", strtotime($value->created_at)),
                'tds_date' => $value->created_at,
                'tds_amount' =>(string)$value->tds_amount
              );

          }
      }

    return Response::json(["status" => STATUS_SUCCESS,"result"=> $alltdslist]); die;
  }
  // xxxxxxxxxxxxxxxxxxx TDS NEW FUNCTION xxxxxxxxxxxxxxxxx

    public function forgotPassword_new(Request $request) {
      // print_r($request->all());exit;
    $this->validate($request,[
        'email_or_mobile' => 'required'
      ]);
      $email_or_mobile = $request->email_or_mobile;
      // dd($email_or_mobile);
        $user_email = RegisterUser::where('email',$email_or_mobile)->first();
        if(!empty($user_email)){
        $token = $this->generateToken($email_or_mobile);
        $button = "Reset Password";
        $emailsubject = "reset password link";
        $template_message = BASE_URL.'/password/reset/view/'.$token;
        $which_view_open = "ResetPassword";
        $purpose = "ResetPassword";
        MailController::saveToken_api($user_email->email,$token,$purpose);
        MailController::sendMail_api($user_email->email,$token,$button,$emailsubject,$template_message,$which_view_open);
        return Response::json(["status" => 1,"message" => "reset mail sent.", "result" => ["status"=>"1" , "email"=>"1" , "mobile"=>0,"user_id"=>$user_email->id]]);
      }

$mobile = (int)$email_or_mobile;
if($mobile != 0){
      $user_mobile = RegisterUser::where('mobile',$email_or_mobile)->first();
      // var_dump($user_mobile);exit;
      if(!empty($user_mobile)){
        $rand2 = rand(100000,999999);
        // $code = $rand2;
       $code = "123456";
        // $code = 111111;
        // $txtmsg='Dear Fanline11 user Your Verification code is: '.$code.'. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
        // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
        //$txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
        $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Never share it with anyone.';

        $dataq['code'] = $code;
        DB::table('registerusers')->where('id',$user_mobile->id)->update($dataq);
        Helpers::sendTextSmsNew($txtmsg,$email_or_mobile);
        return Response::json(["status" => 1,"message" => "Otp sent successfully.", "result" => ["status"=>"1" , "email"=>"0" , "mobile"=>1,"user_id"=>$user_mobile->id]]);
      }
}
      return Response::json(["status" => 1,"message" => "Invalid Details.", "result" => ["status"=>"0" , "email"=>"0" , "mobile"=>0,"user_id"=>"0"]]);
  }

  public function resendOtp_new(Request $request) {
    $this->validate($request,[
        'user_id' => 'required'
      ]);

        $user_data = RegisterUser::where('id',$request->user_id)->first();
        if(!empty($user_data)){
          $rand2 = rand(100000,999999);
          // $code = $rand2;
          $code = 123456;

          // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
          $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone.';

          $txtmsg_notify='Your Verification code is: '.$code;
          $titleget = 'Verification OTP!';

          // $txtmsg='<#>Dear Fanline11 user Your Verification code is: '.$code.'. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
          $dataq['code'] = $code;
          DB::table('registerusers')->where('id',$user_data->id)->update($dataq);
          Helpers::sendTextSmsNew($txtmsg,$user_data->mobile);
          return Response::json(["status" => 1,"message" => "Otp sent successfully.", "result" => ["status"=>"1" ,"user_id"=>$user_data->id]]);
      }

      return Response::json(["status" => 1,"message" => "Invalid Details.", "result" => ["status"=>"0" ,"user_id"=>0]]);
  }

  public function string_between_two_string($str, $starting_word, $ending_word){
      //  echo  $str .'/1/'.$starting_word.'/2/'.$ending_word; exit;
      $subtring_start = strpos($str, $starting_word);

        $subtring_start += strlen($starting_word);
        $size = strpos($str, $ending_word, $subtring_start) - $subtring_start;
        return substr($str, $subtring_start, $size);
  }

public function delete_all_between($beginning, $end, $string) {
$beginningPos = strpos($string, $beginning);
$endPos = strpos($string, $end);
if ($beginningPos === false || $endPos === false) {
  return $string;
}

$textToDelete = substr($string, $beginningPos, ($endPos + strlen($end)) - $beginningPos);

return $this->delete_all_between($beginning, $end, str_replace($textToDelete, '', $string)); // recursion to ensure all occurrences are replaced
}


  //xxxx Live Score Board API For All Format xxxxxxxx //
    public function liveScoreBoardNew(Request $request) {
      // $this->validateLogin($request->user_id);

     //  $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
     // $txt = json_encode($request->all())."John Doe\nhkhkhkhk";
     //
     // fwrite($myfile, $txt); exit;


      $this->validate($request,[
        'user_id' => "required",
        'matchkey' => "required"
      ]);
      $matchkeychange = $request->matchkey;
      $matchkey = str_replace('_2','',$matchkeychange);

      $innings=array();
      $teamscore = DB::table('live_teams_score')->where('matchkey',$matchkey)->select('short_name','scores_details','scores_full',
      'overs','team_id','inning','sort','extra_run','extra_bye_run','extra_legbye_run','extra_noball_run','extra_wideball_run','extra_noball_run','yet_to_bat')
      ->orderby('inning')
      ->get();

      if(!empty($teamscore) && count($teamscore)> 0){
        $ing=1;
        foreach ($teamscore as $inning_key => $value) {

          $team_score_query = DB::table('live_teams_score')->where('matchkey',$matchkey)->where('inning',$value->inning);
          $team_score = $team_score_query->select('short_name','scores_full','scores as Total','scores_details as Total_details','overs','team_id','inning','sort','extra_run',
          DB::raw("CONCAT('nb ',extra_noball_run, ', wd ',extra_wideball_run, ', b ', extra_bye_run, ', lb ', extra_legbye_run, ', pen ', extra_penalty_run) AS extra_details"),'yet_to_bat'
          )->get();

          if (!empty($team_score)) {
            $team_url = Team::where('team_key',@$team_score[0]->team_id)->select('logo')->first();
          }
          $team_url_image = ( isset($team_url->logo) ? TEAMS_DIRECTORY_URL. $team_url->logo : DEFAULT_TEAM_IMAGE);
          if (!empty($team_score)) {
            $players_score_team_query = DB::table('live_teams_score')->where('matchkey',$matchkey)->where('team_id',@$team_score[0]->team_id)->select('name','run','ball','four','six','inning','app_points','how_out');
          }
          if (!empty($team_score)) {
            $bowlers_score_team_query = DB::table('live_bowlers_score')->where('matchkey',$matchkey)->where('team_id',@$team_score[0]->team_id)->select('name','runs','overs','maidens','wickets','inning','dots');
          }
          $i=0;
          $team_innings = $team_score_query->select('inning')->get();
          foreach ($team_score as $team) {
            if(!empty($team->yet_to_bat)){
               $team->scores_full=  !empty($team->scores_full) ? $team->scores_full :'00/0';
              // $team->scores_full = str_replace(' (','',$team->scores_full);
              // $team->overs = round((float)$team->overs,2);
               $team->overs = number_format($team->overs,1);
              // $team->overs = '';

              // $team->raman= round((float)$team->overs,2);

              $team->is_YetTOBat_enable =1;
              $team->yet_to_bat = str_replace(' ', '',$team->yet_to_bat);
            }else{
              $team->is_YetTOBat_enable =0;
            }
            //echo "<pre>";print_r($team); exit;

            $innings[$inning_key] = $team;
            //  print_r($innings1['innings'][$i]); exit;
            $j=0;
            $k=0;
            $inning = $team_innings[$i]->inning;
            $players_score_team_query = DB::table('live_players_score')->where('matchkey',$matchkey)->select('bats_pos','name','run','ball','four','six','inning','app_points','how_out','strike_rate');
            $bowlers_score_team_query = DB::table('live_bowlers_score')->where('matchkey',$matchkey)->select('name','runs','overs','maidens','wickets','inning','dots','economy');
            $fall_of_wicket_team_query = DB::table('fall_of_wickets')->where('matchkey',$matchkey)->select('matchkey','team_id','inning','fall_of_wickets');

            $players_score_team = $players_score_team_query->where('inning',$inning)->get();
            $bowlers_score_team = $bowlers_score_team_query->where('inning',$inning)->get();
            // echo"<pre>"; print_r($bowlers_score_team_1); exit;
            $fall_of_wicket_team = $fall_of_wicket_team_query->where('inning',$inning)->get();
            //echo "<pre>"; print_r($fall_of_wicket_team1); exit;
            $innings[$inning_key]->fall_of_wicket= [];

            foreach ($fall_of_wicket_team as $fwt) {
              $fwt_array = get_object_vars($fwt);
              $fwt = $fwt_array;
              $fall=array();
              $innings[$inning_key]->fall_of_wicket[$j] = $fwt;
              $arr=explode('at',$fwt['fall_of_wickets']);
              $fall['name']= $arr[0];
              $fall['score']= str_replace(' ', '', $this->string_between_two_string($fwt['fall_of_wickets'],' at ',' runs,'));
              $fall['over']= number_format((double)str_replace(' ', '', $this->string_between_two_string($fwt['fall_of_wickets'],', in',' over')),1);
              $innings[$inning_key]->fall_of_wicket[$j] = $fall;
              $j++;
            }
            usort($innings[$inning_key]->fall_of_wicket, function($a, $b) {
              return $a['over'] <=> $b['over'];
            });
            // $wk1=1;
            // foreach ($innings1['innings'][$i]->fall_of_wicket as $key => $value) {
            //   $innings1['innings'][$i]->fall_of_wicket['score'] = $wk1;
            //  $wk1++;
            // }
            // exit;
            $innings[$inning_key]->players= [];
            foreach ($players_score_team as $ps) {
              if($ps->bats_pos==1){
                $ps->how_out= "Batting";
              }
              $ps->strike_rate = number_format($ps->strike_rate,1);
              $ps_array = get_object_vars($ps);
              $ps = $ps_array;
              $innings[$inning_key]->players[] =  $ps;
              $j++;
            }
            $innings[$inning_key]->bowlers  = [];
            foreach ($bowlers_score_team as $ps) {
              $ps_array = get_object_vars($ps);
              //echo"<pre>"; print_r($innings[$inning_key]); exit;
              $ps = $ps_array;
              $innings[$inning_key]->bowlers[$k] =  $ps;
              $k++;
            }
            $i++;
          }

          // $innings[$key]
          //echo"<pre>"; print_r($innings[$inning_key]); exit;
        }
        //echo "</br><pre>"; print_r($team_score); exit;
      }
      if(!empty($innings)){
        return Response::json(["status" => STATUS_SUCCESS,"result"=>$innings]);
      }
      else{
        return Response::json(["status" => STATUS_SUCCESS,"result"=>array()]);
      }
    }

    public function validateOTP(Request $request) {
      $this->validate($request,[
          'user_id' => 'required',
          'otp' => 'required'
        ]);

          $user_data = RegisterUser::where('id',$request->user_id)->first();
          if(!empty($user_data)){
            // if($user_data->code == $request->otp){
            if(123456 == $request->otp){
          return Response::json(["status" => 1,"message" => "OTP successfully verified.", "result" => ["status"=>"1" ,"user_id"=>$user_data->id]]);
        }else{
          return Response::json(["status" => 1,"message" => "Invalid OTP.", "result" => ["status"=>"0" ,"user_id"=>$user_data->id]]);
        }
        }

        return Response::json(["status" => 1,"message" => "Invalid Details.", "result" => ["status"=>"0" ,"user_id"=>0]]);
    }


    //Forgot Password ( before login )
        public function changePassword_new(Request $request) {
          $this->validate($request, [
          'user_id' => 'required',
          'newpassword' => 'required',
        ]);
        $user = RegisterUser::find($request->user_id);
        $user->fill([
          'password' => Hash::make($request->newpassword)
        ])->save();
        return Response::json(["status" => STATUS_SUCCESS,"message"=>"Password changed.","result"=>""]);
        }

      public function generateToken ($email) {
      $mail = $email;
      $ran_val_1 = rand(100000,100000000);
      $ran_val_2 = rand(100000,100000000);
      $email_and_token = $ran_val_1.$mail.$ran_val_2;
      $token = md5($email_and_token);
      return $token;
    }

    public function reset(Request $request) {
    $this->validate($request,[
        'email' => 'required|email'
      ]);
      $email = $request->email;
        $user = RegisterUser::where('email',$email)->first();
    if (!isset($user->email)) {
            return Response::json(["status" => 0,"message" => "invalid details.", "result" => ["status"=>"failed"]]);die;
        }

        $token = $this->generateToken($email);
        $button = "Reset Password";
        $emailsubject = "reset password link";
        $template_message = BASE_URL.'password/reset/view/'.$token;
        $which_view_open = "ResetPassword";
        $purpose = "ResetPassword";
    $this->saveToken($email,$token,$purpose);
    $this->sendMail($email,$token,$button,$emailsubject,$template_message,$which_view_open);
        return Response::json(["status" => 1,"message" => "reset mail sent.", "result" => ["status"=>"sent"]]);
  }

  public function sendMail ($email_r,$token_r,$button_r,$emailsubject_r,$template_message_r,$which_view_open_r,$email_otp=null) {
        $datamessage['email'] = $email_r;
        $datamessage['token'] = $token_r;
        $datamessage['button'] = $button_r;
        $datamessage['subject'] = $emailsubject_r;
        $datamessage['template_message'] = $template_message_r;
        $datamessage['which_view_open'] = $which_view_open_r;
        $datamessage['email_otp'] = $email_otp;
        Helpers::mailSmtpSend($datamessage);
    }

  public function saveToken ($email,$token,$purpose) {
        switch ($purpose) {
        case 'ResetPassword':
            $token_exist = TokenForMail::where('email',$email)->first();
            if (empty($token_exist)) {
                $user = TokenForMail::create([
                'email' => $email,
                'token_reset_password' => $token
                ]);
                $user->save();
            } else {
                $token_exist->token_reset_password = $token;
                $token_exist->save();
            }
            break;
        case 'VerifyEmail':
            $token_exist = TokenForMail::where('email',$email)->first();
            if (empty($token_exist)) {
                $user = TokenForMail::create([
                'email' => $email,
                'token_verify_email' => $token
                ]);
                $user->save();
            } else {
                $token_exist->token_verify_email = $token;
                $token_exist->save();
            }
            break;
        /*case 'RegisterUser':
            $token_exist = TokenForMail::where('email',$email)->first();
            if (empty($token_exist)) {
                $user = TokenForMail::create([
                'email' => $email,
                'token_reset_password' => $token
                ]);
            } else {
                $token_exist->token_reset_password = $token;
            }
            $user->save();
            break;*/


            default:
                # code...
                break;
        }

    }





  public function compare(Request $request)
  {

    $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");

    $txt = json_encode($request->all())."John Doe\n";

    fwrite($myfile, $txt);
    $this->validate($request,[
        'user_id' => 'required'
      ]);



    $user_id = $request->user_id;
    $team1_id = $request->team1_id;
    $team2_id = $request->team2_id;
    $matchkey = $request->matchkey;
    $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
    // $sportType = DB::table('sport_types')->where('sport_key' , $sport_key)->first();
    $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);
    $joinTeams = JoinTeam::whereIn('id',array($team1_id, $team2_id))->get();
    $playersarr = array();
    foreach ($joinTeams as $key => $value) {
      $players = array_filter(explode(',', $value->players));
      if($team1_id==$value->id) {
        $team1players = $players;
      } else {
        $team2players = $players;
      }
      foreach ($players as $key2 => $value2) {
        $playersarr[] = $value2;
      }
    }
    $resplayerdetails = MatchPlayer::whereIn('matchplayers.playerid',array_unique($playersarr))->where('matchkey',$matchkey)->where('matchplayers.sport_type',$sportType->id)

        ->join('players','matchplayers.playerid','=','players.id')
        ->where('players.sport_type',$sportType->id)
        ->join('playerdetails','playerdetails.player_key','=','players.player_key')
        ->where('playerdetails.sport_type',$sportType->id)
        ->select('players.team','matchplayers.role as playerrole','matchplayers.credit as playercredit','matchplayers.role','matchplayers.points as playerpoints','matchplayers.name as playername','matchplayers.playerid as pid','playerdetails.image as image')->groupBy('matchplayers.playerid')->get();
    $playersIds = array();
    $resplayerdetails = json_decode(json_encode($resplayerdetails));
    foreach ($resplayerdetails as $key => $value) {
      $value->image = PLAYERS_DIRECTORY_URL.$value->image;
      $playersIds[$value->pid] = $value;
    }
    $json = array();
    foreach ($joinTeams as $key => $value) {
      if($value->id==$team1_id) {
        $team1_points = $value->points;
        $team1_captain = $value->captain;
        $team1_vice_captain = $value->vicecaptain;
        $team1_number = $value->teamnumber;
        $team1_players = $value->players;
      } else {
        $team2_points = $value->points;
        $team2_captain = $value->captain;
        $team2_vice_captain = $value->vicecaptain;
        $team2_number = $value->teamnumber;
        $team2_players = $value->players;
      }
    }

    $team1_data = JoinTeam::where('jointeam.id',$team1_id)->where('jointeam.sport_type',$sportType->id)->join('registerusers','registerusers.id','=','jointeam.userid')->leftJoin('leaderboard','leaderboard.team_id','=','jointeam.id')->select('jointeam.*','registerusers.email','registerusers.team as userteam','registerusers.image as image','leaderboard.rank as rank')->first();

      $team2_data = JoinTeam::where('jointeam.id',$team2_id)->where('jointeam.sport_type',$sportType->id)->join('registerusers','registerusers.id','=','jointeam.userid')->leftJoin('leaderboard','leaderboard.team_id','=','jointeam.id')->select('jointeam.*','registerusers.email','registerusers.team as userteam','registerusers.image as image','leaderboard.rank as rank')->first();
    /*print_r($team1_players);
    print_r($team2_players);
    exit;*/
    $find_match = DB::table('listmatches')->where('matchkey', $matchkey)->where('sport_type', $sportType->id)->first();

    if($find_match->final_status!='winnerdeclared') {
        $find_challenge1 = DB::table('joinedleauges')->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')->where('joinedleauges.teamid',$team1_id)->where('matchchallenges.status','!=','canceled')->where('joinedleauges.matchkey',$matchkey)->groupBy('matchchallenges.id')->select('matchchallenges.id')->get()->pluck('id');
        $find_challenge2 = DB::table('joinedleauges')->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')->where('joinedleauges.teamid',$team2_id)->where('matchchallenges.status','!=','canceled')->where('joinedleauges.matchkey',$matchkey)->groupBy('matchchallenges.id')->select('matchchallenges.id')->get()->pluck('id');
        // print_r(json_decode(json_encode($find_challenge2), true)); exit;
        $find_challenge_ids1 = array_unique(json_decode(json_encode($find_challenge1), true));
        $find_challenge_ids2 = array_unique(json_decode(json_encode($find_challenge2), true));
        $common_challenge_ids = array_values(array_intersect($find_challenge_ids1,$find_challenge_ids2));
        $team1_points = Redis::zScore($common_challenge_ids[0],$team1_data->userid.':'.$team1_id);
        $team2_points = Redis::zScore($common_challenge_ids[0],$team2_data->userid.':'.$team2_id);
    }

    $json['team1_name'] = $team1_data->userteam."(T".$team1_data->teamnumber.")";
      $json['team2_name'] = $team2_data->userteam."(T".$team2_data->teamnumber.")";
      $json['team1_rank'] = isset($team1_data->rank)?"#".$team1_data->rank:'#1';
      $json['team2_rank'] = isset($team2_data->rank)?"#".$team2_data->rank:'#2';
    $json['team1_image'] = isset($team1_data->image) ? $team1_data->image : PLAYERS_DIRECTORY_URL.'team1.jpg';
      $json['team2_image'] = isset($team2_data->image) ? $team2_data->image : PLAYERS_DIRECTORY_URL.'team2.jpg';
    $json['team1_points'] = $team1_points;
    $json['team2_points'] = $team2_points;
    $json['diff_points'] = number_format(abs($team1_points - $team2_points), 2, '.', '');
    $json['diff_text'] = ($team1_points > $team2_points) ? 'You are leading from your oponent' : (($team1_points < $team2_points) ? 'Your opponent is leading by' : 'You and your opponent have same points');







    /* Compare Captain and vice captain */
    $json['compare_c_vc']['captain'] = array();
    $json['compare_c_vc']['captain'][0] = json_decode(json_encode(@$playersIds[$team1_captain]),true);
    $json['compare_c_vc']['captain'][0]['team_id'] = $team1_id;
    $json['compare_c_vc']['captain'][1] = json_decode(json_encode(@$playersIds[$team2_captain]), true);
    $json['compare_c_vc']['captain'][1]['team_id'] = $team2_id;
    // print_r(json_encode($json)); exit;
      $json['compare_c_vc']['vice_captain'] = array();
    if($team2_vice_captain && $team1_vice_captain) {
      $json['compare_c_vc']['vice_captain'][0] = json_decode(json_encode($playersIds[$team1_vice_captain]),true);
      $json['compare_c_vc']['vice_captain'][0]['team_id'] = $team1_id;
      $json['compare_c_vc']['vice_captain'][1] = json_decode(json_encode($playersIds[$team2_vice_captain]),true);
      $json['compare_c_vc']['vice_captain'][1]['team_id'] = $team2_id;
    }
    $json['compare_c_vc']['captain'][0]['playerpoints'] = $json['compare_c_vc']['captain'][0]['playerpoints'] * 2;
    $json['compare_c_vc']['captain'][1]['playerpoints'] = $json['compare_c_vc']['captain'][1]['playerpoints'] * 2;

    $json['compare_c_vc']['vice_captain'][0]['playerpoints'] = $json['compare_c_vc']['vice_captain'][0]['playerpoints'] * 1.5;
    $json['compare_c_vc']['vice_captain'][1]['playerpoints'] = $json['compare_c_vc']['vice_captain'][1]['playerpoints'] * 1.5;
    /* Compare Captain and vice captain */
    $team1_c_vc_points = $json['compare_c_vc']['captain'][0]['playerpoints']+$json['compare_c_vc']['vice_captain'][0]['playerpoints'];
    $team2_c_vc_points = $json['compare_c_vc']['captain'][1]['playerpoints']+$json['compare_c_vc']['vice_captain'][1]['playerpoints'];
    $json['cvc_diff_points'] = number_format(abs(($team1_c_vc_points) - ($team2_c_vc_points)), 2, '.', '');
    $json['cvc_diff_text'] = ($team1_c_vc_points > $team2_c_vc_points) ? 'Your C & VC are leading from your oponent by' : (($team1_c_vc_points < $team2_c_vc_points) ? 'Your opponent C & VC leading by' : 'You and your opponent C & VC have same points');
    // print_r($json); exit;
    $json['common_players'] = array();

    $json['other_players'] = array();
    unset($team1players[array_search($team1_captain, $team1players)]);
    unset($team2players[array_search($team2_captain, $team2players)]);
    if($team2_vice_captain && $team1_vice_captain) {
      unset($team1players[array_search($team1_vice_captain, $team1players)]);
      unset($team2players[array_search($team2_vice_captain, $team2players)]);
    }
    $result = array_intersect($team1players, $team2players);
    // print_r($result); exit;
    $kk=0;
    $common_players_points = 0;
    foreach ($result as $key => $value) {
      // print_r($value); exit;
      $json['common_players'][$kk] = @$playersIds[$value];
      $common_players_points += @$playersIds[$value]->playerpoints;
      $kk++;
      // print_r($json['common_players']);
    }
    // print_r($json); exit;
    foreach ($result as $key => $value) {
      unset($team1players[array_search($value, $team1players)]);
      unset($team2players[array_search($value, $team2players)]);
    }
    $team1players = array_values($team1players);
    $team2players = array_values($team2players);
    // print_r($json['other_players']); exit;
    $team1_other_points = 0;
    $team2_other_points = 0;
    for ($i=0; $i < count($team1players); $i++) {
      // print_r( @$playersIds[@$team1players[$i]]);
      $json['other_players'][$i][0] = @$playersIds[@$team1players[$i]];
      $json['other_players'][$i][0]->team_id = $team1_id;
      $json['other_players'][$i][1] = @$playersIds[$team2players[$i]];
      $json['other_players'][$i][1]->team_id = $team2_id;
      $team1_other_points += $json['other_players'][$i][0]->playerpoints;
      $team2_other_points += $json['other_players'][$i][1]->playerpoints;
      // print_r($json);
    }
    $json['others_diff_text'] = ($team1_other_points > $team2_other_points) ? 'Your players are leading from your oponent' : (($team1_other_points < $team2_other_points) ? 'Your opponent players are leading by' : 'You and your opponent players have same points');
    $json['others_diff_points'] = number_format(abs($team1_other_points - $team2_other_points), 2, '.', '');

    $json['common_diff_text'] = "Common Players";
    $json['common_diff_points'] = $common_players_points;
    return Response::json(["status" => STATUS_SUCCESS,"result"=> $json]);
  }

  public function compare_new(Request $request)
  {
    // $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
    //
    // $txt = json_encode($request->all())."John Doe\n";
    //
    // fwrite($myfile, $txt);
    // fclose($myfile);
    $this->validate($request,[
        'user_id' => 'required'
      ]);


    $user_id = $request->user_id;
    $team1_id = $request->team1_id;
    $team2_id = $request->team2_id;
    $matchkey = $request->matchkey;
    $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
    // $sportType = DB::table('sport_types')->where('sport_key' , $sport_key)->first();
    $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);
    $joinTeams = JoinTeam::whereIn('id',array($team1_id, $team2_id))->get();
    $playersarr = array();
    foreach ($joinTeams as $key => $value) {
      $players = array_filter(explode(',', $value->players));
      if($team1_id==$value->id) {
        $team1players = $players;
      } else {
        $team2players = $players;
      }
      foreach ($players as $key2 => $value2) {
        $playersarr[] = $value2;
      }
    }
    $resplayerdetails = MatchPlayer::whereIn('matchplayers.playerid',array_unique($playersarr))->where('matchkey',$matchkey)->where('matchplayers.sport_type',$sportType->id)

        ->join('players','matchplayers.playerid','=','players.id')
        ->where('players.sport_type',$sportType->id)
        ->join('playerdetails','playerdetails.player_key','=','players.player_key')
        ->where('playerdetails.sport_type',$sportType->id)
        ->select('players.team','matchplayers.role as playerrole','matchplayers.credit as playercredit','matchplayers.role','matchplayers.points as playerpoints','players.player_name as playername','matchplayers.playerid as pid','playerdetails.image as image')->groupBy('matchplayers.playerid')->get();
    $playersIds = array();
    $resplayerdetails = json_decode(json_encode($resplayerdetails));
    foreach ($resplayerdetails as $key => $value) {
      $value->image = PLAYERS_DIRECTORY_URL.$value->image;
      $playersIds[$value->pid] = $value;
    }
    $json = array();
    foreach ($joinTeams as $key => $value) {
      if($value->id==$team1_id) {
        $team1_points = $value->points;
        $team1_captain = $value->captain;
        $team1_vice_captain = $value->vicecaptain;
        $team1_number = $value->teamnumber;
        $team1_players = $value->players;
      } else {
        $team2_points = $value->points;
        $team2_captain = $value->captain;
        $team2_vice_captain = $value->vicecaptain;
        $team2_number = $value->teamnumber;
        $team2_players = $value->players;
      }
    }

    $team1_data = JoinTeam::where('jointeam.id',$team1_id)->where('jointeam.sport_type',$sportType->id)->join('registerusers','registerusers.id','=','jointeam.userid')->leftJoin('leaderboard','leaderboard.team_id','=','jointeam.id')->select('jointeam.*','registerusers.email','registerusers.team as userteam','registerusers.image as image','leaderboard.rank as rank')->first();

      $team2_data = JoinTeam::where('jointeam.id',$team2_id)->where('jointeam.sport_type',$sportType->id)->join('registerusers','registerusers.id','=','jointeam.userid')->leftJoin('leaderboard','leaderboard.team_id','=','jointeam.id')->select('jointeam.*','registerusers.email','registerusers.team as userteam','registerusers.image as image','leaderboard.rank as rank')->first();
    /*print_r($team1_players);
    print_r($team2_players);
    exit;*/
    $json['team1_name'] = $team1_data->userteam."(T".$team1_data->teamnumber.")";
    $json['team2_name'] = $team2_data->userteam."(T".$team2_data->teamnumber.")";
    $json['team1_rank'] = isset($team1_data->rank)?"#".$team1_data->rank:'#1';
    $json['team2_rank'] = isset($team2_data->rank)?"#".$team2_data->rank:'#2';
    $json['team1_image'] = isset($team1_data->image) ? $team1_data->image : PLAYERS_DIRECTORY_URL.'team1.jpg';
    $json['team2_image'] = isset($team2_data->image) ? $team2_data->image : PLAYERS_DIRECTORY_URL.'team2.jpg';
    $json['team1_points'] = $team1_points;
    $json['team2_points'] = $team2_points;
    $json['diff_points'] = number_format(abs($team1_points - $team2_points), 2, '.', '');
    $json['diff_text'] = ($team1_points > $team2_points) ? 'You are leading from your oponent' : (($team1_points < $team2_points) ? 'Your opponent is leading by' : 'You and your opponent have same points');


$json['player_list'] = array();
$captain_vc_data = array();
$other_players = array();
$common_players = array();


$playersIds[$team1_captain]->team_id = $team1_id;
$playersIds[$team2_captain]->team_id = $team2_id;

$captain_data[] = $playersIds[$team1_captain];
$captain_data[] = $playersIds[$team2_captain];

$team1captainPoints = 0;
$team1vicecaptainPoints = 0;

$team2captainPoints = 0;
$team2vicecaptainPoints = 0;

$team1captain_vc_points = 0;
$team2captain_vc_points = 0;

$playersIds[$team1_vice_captain]->team_id = $team1_id;
$playersIds[$team1_vice_captain]->team_id = $team2_id;

$vice_captain_data[] = $playersIds[$team1_vice_captain];
$vice_captain_data[] = $playersIds[$team2_vice_captain];


$team1captainPoints = $playersIds[$team1_captain]->playerpoints * 2;
$team2captainPoints = $playersIds[$team2_captain]->playerpoints * 2;

$team1vicecaptainPoints = $playersIds[$team1_vice_captain]->playerpoints * 1.5;
$team1vicecaptainPoints = $playersIds[$team2_vice_captain]->playerpoints * 1.5;

$team1captain_vc_points = $team1captainPoints + $team1vicecaptainPoints;
$team2captain_vc_points = $team2captainPoints + $team2vicecaptainPoints;


$object_cp = new \stdClass();
if(!empty($captain_data)){

  $object_cp->player_data = $captain_data;
}


$object_vp = new \stdClass();
  if(!empty($vice_captain_data)){
    $object_vp->player_data = $vice_captain_data;

  }



$captain_vice[] = $object_cp;
$captain_vice[] = $object_vp;




   unset($team1players[array_search($team1_captain, $team1players)]);
   unset($team2players[array_search($team2_captain, $team2players)]);
   if($team2_vice_captain && $team1_vice_captain) {
     unset($team1players[array_search($team1_vice_captain, $team1players)]);
     unset($team2players[array_search($team2_vice_captain, $team2players)]);
   }
   $result = array_intersect($team1players, $team2players);
   // print_r($result); exit;
   $kk=0;
   $common_players_points = 0;
   foreach ($result as $key => $value) {
     // print_r($value); exit;
     $common_players[] = @$playersIds[$value];
     $common_players_points += @$playersIds[$value]->playerpoints;
     $kk++;
     // print_r($json['common_players']);
   }
   // print_r($json); exit;
   foreach ($result as $key => $value) {
     unset($team1players[array_search($value, $team1players)]);
     unset($team2players[array_search($value, $team2players)]);
   }


   $team1players = array_values($team1players);
   $team2players = array_values($team2players);
   // print_r($json['other_players']); exit;
   $team1_other_points = 0;
   $team2_other_points = 0;
   $otherPlayersData = array();
   for ($i=0; $i < count($team1players); $i++) {
     $other_players = array();
     @$playersIds[@$team1players[$i]]->team_id = $team1_id;
     $other_players[] = @$playersIds[@$team1players[$i]];
     $playersIds[@$team2players[$i]]->team_id = $team2_id;
     $other_players[] = @$playersIds[@$team2players[$i]];


     $object_op = new \stdClass();
     if(!empty($other_players)){
       $object_op->player_data = $other_players;
     }


     $otherPlayersData[]= $object_op;
     $team1_other_points += $playersIds[@$team1players[$i]]->playerpoints;
     $team2_other_points += $playersIds[@$team2players[$i]]->playerpoints;
   }



   $json['player_list'][0]['diff_text'] = ($team1captain_vc_points > $team2captain_vc_points) ? 'Your C & VC are leading from your oponent by' : (($team1captain_vc_points < $team2captain_vc_points) ? 'Your opponent C & VC leading by' : 'You and your opponent C & VC have same points');
   $json['player_list'][0]['diff_points'] = number_format(abs(($team1captain_vc_points) - ($team2captain_vc_points)), 2, '.', '');
   $json['player_list'][0]['data'] = $captain_vice;

   $json['player_list'][1]['diff_text'] = ($team1_other_points > $team2_other_points) ? 'Your players are leading from your oponent' : (($team1_other_points < $team2_other_points) ? 'Your opponent players are leading by' : 'You and your opponent players have same points');
   $json['player_list'][1]['diff_points'] = number_format(abs($team1_other_points - $team2_other_points), 2, '.', '');
   $json['player_list'][1]['data'] = $otherPlayersData;


 // var_dump($common_players[0]);exit;


$common_players_one[] = $common_players[0];
$common_players_one[] = $common_players[0];

   $object_compareData1 = new \stdClass();
   if(!empty($common_players_one)){

     $object_compareData1->player_data = $common_players_one;
   }


   $common_players_two[] = @$common_players[1];
   $common_players_two[] = @$common_players[1];

      $object_compareData2 = new \stdClass();
       if(!empty($common_players_two)){
         $object_compareData2->player_data = $common_players_two;
       }
       // echo "<pre>"; print_r($object_compareData2->player_data[0]); exit;

    if(!empty($object_compareData1->player_data[0])){
      $copData[] = $object_compareData1;

    }
    if(!empty($object_compareData2->player_data[0])){
      $copData[] = $object_compareData2;
    }
$json['player_list'][2]['diff_text'] = "Common Players";
$json['player_list'][2]['diff_points'] = $common_players_points;
$json['player_list'][2]['data'] = !empty($copData) ? $copData : array();



$json['others_diff_text'] = ($team1_other_points > $team2_other_points) ? 'Your players are leading from your oponent' : (($team1_other_points < $team2_other_points) ? 'Your opponent players are leading by' : 'You and your opponent players have same points');
$json['others_diff_points'] = number_format(abs($team1_other_points - $team2_other_points), 2, '.', '');


    return Response::json(["status" => STATUS_SUCCESS,"result"=> $json]);
  }


  public function investments(Request $request) {
    $this->validate($request,[
        'user_id' => 'required'
      ]);

    $user_id = $request->user_id;
    $total_invest = DB::table('leaugestransactions')->join('matchchallenges','leaugestransactions.challengeid','=','matchchallenges.id')->where('matchchallenges.status','!=','canceled')->where('leaugestransactions.user_id', $user_id)->sum('matchchallenges.entryfee');
    $total_recieve = DB::table('finalresults')->where('finalresults.userid', $user_id)->sum('finalresults.amount');
    $total_deposit = DB::table('transactions')->where('userid', $user_id)->where('type','add fund')->where('paymentstatus','confirmed')->sum('amount');
    $total_withdraw = DB::table('withdraw')->where('user_id', $user_id)->where('status','1')->sum('amount');
    if($total_invest > $total_recieve) {
      $loss = $total_invest - $total_recieve;
      $profit = 0;
    } else {
      $loss = 0;
      $profit = $total_recieve - $total_invest;
    }

    if($total_deposit > $total_withdraw) {
      $loss_wallet = $total_deposit - $total_withdraw;
      $profit_wallet = 0;
    } else {
      $profit_wallet = $total_withdraw - $total_deposit;
      $loss_wallet = 0;
    }
    $json['investment']['total_invest'] = number_format((float)$total_invest, 2, '.', '');
    $json['investment']['total_recieve'] = number_format((float)$total_recieve, 2, '.', '');
    $json['investment']['profit'] = number_format((float)$profit, 2, '.', '');
    $json['investment']['loss'] = number_format((float)$loss, 2, '.', '');
    $json['wallet']['total_deposit'] = number_format((float)$total_deposit, 2, '.', '');
    $json['wallet']['total_withdrawal'] = number_format((float)$total_withdraw, 2, '.', '');
    $json['wallet']['profit'] = number_format((float)$profit_wallet, 2, '.', '');
    $json['wallet']['loss'] = number_format((float)$loss_wallet, 2, '.', '');
    return Response::json(["status" => STATUS_SUCCESS,"message" => "df","result"=> $json]);
  }




    public function findScratchCard(Request $request) {
      return Response::json(["status" => STATUS_SUCCESS, "open" => 0]);
      $this->validate($request,[
        'user_id' => 'required'
      ]);

      $user_id = $request->user_id;

      $list = ScratchCard::where('user_id',$user_id)->where('active',1)->where('coupon_type',2)->where('is_scratched',0)->first();
      $control = DB::table('control_manage')->where('name','scratch_card')->first();

      if ($control->status == 0) {
        return Response::json(["status" => STATUS_SUCCESS, "open" => 0]); die;
      }
      if (!empty($list)) {
          return Response::json(["status" => STATUS_SUCCESS, "open" => 1]);
      // if ($user_id == 138) {
      // return Response::json(["status" => STATUS_SUCCESS, "open" => 1]);
      // }  else {
      //   return Response::json(["status" => STATUS_SUCCESS, "open" => 0]);
      // }

      } else {
      return Response::json(["status" => STATUS_SUCCESS, "open" => 0]);
      }

    }


    public function ScratchCardsList(Request $request) {
      return Response::json(["status" => STATUS_SUCCESS]);
      $this->validate($request,[
        'user_id' => 'required',
        'list_id' => 'required',
        'amount'  => 'required'
      ]);
      $list_id = $request->list_id;
      $user_id = $request->user_id;
      $amount  = $request->amount;
      $row = ScratchCard::where('id',$list_id)->where('user_id',$user_id)->first();

      if (!empty($row)) {
        $row->coupon_amount = $amount;
        $row->is_scratched = 1;
        $row->save();


      $balance = UserBalance::where('user_id',$user_id)->first();
      $last_balance = $balance->bonus;
      $balance->bonus = $last_balance + $amount;
      $balance->save();

      $total_balance = $balance->bonus + $balance->winning + $balance->balance;

      $transaction = new Transaction();
      $transaction->userid = $user_id;
      $transaction->refer_id = $row->user_id;
      $transaction->type = 'Daily Scratch Card Bonus';
      $transaction->transaction_id = 'Fanline11-SCRBNS-'.time();
      $transaction->transaction_by = 'FANLINE11';
      $transaction->sport = 1;
      $transaction->amount = $amount;
      $transaction->paymentstatus = 'confirmed';
      $transaction->bonus_amt = $amount;
      $transaction->bal_bonus_amt = $balance->bonus;
      $transaction->bal_win_amt = $balance->winning;
      $transaction->bal_fund_amt = $balance->balance;
      $transaction->total_available_amt = $total_balance;
      $transaction->save();



        return Response::json(["status" => STATUS_SUCCESS]);
      } else {
        return Response::json(["status" => STATUS_FAILURE,"message"=> "Something went wrong."]);
      }

    }


    public function openScratchCard(Request $request) {
      return Response::json(["status" => STATUS_SUCCESS]);
      $this->validate($request,[
        'user_id' => 'required',
        'list_id' => 'required',
        'amount'  => 'required'
      ]);
      $list_id = $request->list_id;
      $user_id = $request->user_id;
      $amount  = $request->amount;
      $row = ScratchCard::where('id',$list_id)->where('user_id',$user_id)->first();

      if (!empty($row)) {
        $row->coupon_amount = $amount;
        $row->is_scratched = 1;
        $row->save();


      $balance = UserBalance::where('user_id',$user_id)->first();
      $last_balance = $balance->bonus;
      $balance->bonus = $last_balance + $amount;
      $balance->save();

      $total_balance = $balance->bonus + $balance->winning + $balance->balance;

      $transaction = new Transaction();
      $transaction->userid = $user_id;
      $transaction->refer_id = $row->user_id;
      $transaction->type = 'Daily Scratch Card Bonus';
      $transaction->transaction_id = 'Fanline11-SCRBNS-'.time();
      $transaction->transaction_by = 'Fanline11';
      $transaction->sport = 1;
      $transaction->amount = $amount;
      $transaction->paymentstatus = 'confirmed';
      $transaction->bonus_amt = $amount;
      $transaction->bal_bonus_amt = $balance->bonus;
      $transaction->bal_win_amt = $balance->winning;
      $transaction->bal_fund_amt = $balance->balance;
      $transaction->total_available_amt = $total_balance;
      $transaction->save();



        return Response::json(["status" => STATUS_SUCCESS]);
      } else {
        return Response::json(["status" => STATUS_FAILURE,"message"=> "Something went wrong."]);
      }

    }



    public function razorPay(Request $request) {

      $this->validate($request,[

        'amount' => 'required',

        'user_id' => 'required'

        ]);
      // print_r("command");die;
      $amount = $request->amount;

      $a = array(

        "amount" => $amount*100,

        "currency" => CURRENCY_NAME,

        "receipt" => RAZORPAY_RECEIPT,

        "payment_capture" => RAZORPAY_CAPTURE

      );

      $command = 'curl -u rzp_live_hQgScvuEGwDAjl:7m2bseTC6mqUfnhNfUw4K13U \-X POST https://api.razorpay.com/v1/orders \-H "Content-Type: application/json" \-d \''.json_encode($a).'\'';

      $response   = shell_exec($command);

      $resp = json_decode($response);

      // print_r($response);die;

      $user = RegisterUser::where('id',$request->user_id)->first();
      // print_r($user); exit;


      if (!is_null($user)) {

        $trans_table = Transaction::create([

        'userid' => $user->id,

        'amount' => $request->amount,

        'transaction_by' => RAZORPAY,

        'paymentstatus' => PENDING,

        'transaction_id' => $resp->id,

        'type' => ADD_FUND

      ]);

      /*  $trans_table = array(

        'userid' => $user->id,

        'amount' => $request->amount,

        'transaction_by' => RAZORPAY,

        'paymentstatus' => PENDING,

        'transaction_id' => $resp->id,

        'type' => ADD_FUND

      );

        DB::table('transactions')->insert($trans_table);*/
      // $trans_table->save();

      }

      print_r($response); exit;



      // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/

      $ch = curl_init();



      curl_setopt($ch, CURLOPT_URL, 'https://api.razorpay.com/v1/orders');

      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

      curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n    \"amount\": \"50000\",\n    \"currency\" : \"INR\",\n    \"receipt\": \"rcptid #1\",\n    \"payment_capture\": \"0\"\n    }");

      curl_setopt($ch, CURLOPT_POST, 1);

      curl_setopt($ch, CURLOPT_USERPWD, 'rzp_live_xkvVAy3Qg8WdLq

      ' . ':' . '58o5V6zurW5uwbMKsbP6MufR');



      $headers = array();

      $headers[] = 'Content-Type: application/json';

      curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);



      $result = curl_exec($ch);



      if (curl_errno($ch)) {

          echo 'Error:' . curl_error($ch);

      }

      print_r($result);die;

      curl_close($ch);

    }

    /**

     * Get a JWT via given credentials.

     *

     * @return \Illuminate\Http\JsonResponse

     */



    public function payWithPaytm(Request $request) {

      $this->validate($request,[

        'MID' => 'required',

        'ORDER_ID' => 'required',

        'CUST_ID' => 'required',

        'INDUSTRY_TYPE_ID' => 'required',

        'CHANNEL_ID' => 'required',

        'TXN_AMOUNT' => 'required',

        'WEBSITE' => 'required',

        'EMAIL' => 'required',

        'MOBILE_NO' => 'required',

        'CALLBACK_URL' => 'required',

      ]);



      require_once(BASE_URL.FRONT_DIRECTORY.PAYTM_CONFIG_FILE);

      require_once(BASE_URL.FRONT_DIRECTORY.PAYTM_ENCDEC_FILE);

      $checkSum = "";



      $myfile = fopen("test.txt", "w") or die("Unable to open file!");

      $txt = serialize($_POST);

      fwrite($myfile, $txt);

      $txt = "Jane Doe\n";

      fwrite($myfile, $txt);

      fclose($myfile);

      // below code snippet is mandatory, so that no one can use your checksumgeneration url for other purpose .

      //$PAYTM_TXN_URL='https://pguat.paytm.com/oltp-web/processTransaction';

      $paramList = array();

      $paramList["MID"] = $request->MID; //Provided by Paytm

      $paramList["ORDER_ID"] = $request->ORDER_ID; //unique OrderId for every request

      $paramList["CUST_ID"] = $request->CUST_ID; // unique customer identifier

      $paramList["INDUSTRY_TYPE_ID"] = $request->INDUSTRY_TYPE_ID; //Provided by Paytm

      $paramList["CHANNEL_ID"] = $request->CHANNEL_ID; //Provided by Paytm

      $paramList["TXN_AMOUNT"] = $request->TXN_AMOUNT; // transaction amount

      $paramList["WEBSITE"] = $request->WEBSITE;//Provided by Paytm

      $paramList["EMAIL"] = $request->email;//Provided by Paytm

      $paramList["MOBILE_NO"] = $request->MOBILE_NO;//Provided by Paytm

      $paramList["CALLBACK_URL"] = $request->CALLBACK_URL;// prod



      $checkSum = getChecksumFromArray($paramList,PAYTMKEY_16DIGIT);

      $paramList["CHECKSUMHASH"] = $checkSum;

      $email = $request->email;





      // $user = RegisterUser::where('email',$email)->first();

      // // $user_id =

      // if (!is_null($user)) {

      //   $trans_table = Transaction::create([

      //   'userid' => $user->id,

      //   'amount' => $request->TXN_AMOUNT,

      //   'transaction_by' => 'paytm',

      //   'paymentstatus' => PENDING,

      //   'transaction_id' => $request->ORDER_ID,

      //   'type' => ADD_FUND

      // ]);

      // $trans_table->save();

      //}



      return Response::json(["status" => STATUS_SUCCESS,"result"=>$paramList]);

    }

    //Login Api

    public function socialLogin(Request $request) {

        // require_once 'bootstrap/app.php';

        // // Get $id_token via HTTPS POST.

        // $id_token = $request->google;

        // // echo $id_token;die;

        // $CLIENT_ID = "406423245494-0f6kom1fjvnjnrm3mah9am33fbdm9srt.apps.googleusercontent.com";

        // $client = new Google_Client(['client_id' => $CLIENT_ID]);

        // // Specify the CLIENT_ID of the app that accesses the backend

        // $payload = $client->verifyIdToken($id_token);

        // if ($payload) {

        //   $userid = $payload['sub'];

        //    return Response::json(["status"=>"error","message"=> "this user exist!"]);

        // } else {

        //    return Response::json(["status"=>"success","message"=> "user does not exists!"]);

        // }

        $ios = false;

        $provider = "";

        $email = $request->email;

        $name = $request->name;

        $image = $request->imageUrl;

        $fcmToken = $request->fcmToken;

        $deviceId = $request->deviceId;

        $social_id = $request->social_id;

        if (isset($request->socialLoginType)) {
          if ($request->socialLoginType == 'gmail') {
            $google_id = $social_id;
          } elseif ($request->socialLoginType == 'facebook') {
            $facebook_id = $social_id;
          }
        }

        $socialLoginType = $request->socialLoginType;

        if (isset($request->provider)) {

            $provider = $request->provider;

        }

        $all_header = getallheaders();
        $versionCode = @$all_header['Versioncode'];
         $deviceType = @$all_header['Devicetype'];
// var_dump($deviceType);exit;
if($versionCode == 10 && $deviceType == 'IOS'){
  $ios = true;
}
        if(!empty($request->dob)){

          if($request->dob!=""){

            $dob = date('Y-m-d',strtotime($request->dob));

          }

        }

        $newmailaddress = $request->email;

        $findlogin = RegisterUser::where('email',$newmailaddress)->orWhere('email',$request->email)->select('id')->first();
        if (isset($social_id) && empty($request->email)) {
        $findlogin = RegisterUser::where('google_id',$social_id)->orWhere('facebook_id',$social_id)
        ->orWhere('social_id',$social_id)
        ->first();
        }
        // print_r($findlogin);die;
        if(!empty($findlogin)){

          $msgg['msg'] = LOGIN_SUCCESS_MESSAGE;

          $msgg['uid'] = $findlogin->id;

          $msgg['status'] = 1;

          $msgg['dobstatus'] = 1;

          if(!empty($request->fcmToken)){

            $appid = $appdata['appkey'] = $request->fcmToken;

            $appdata['userid'] = $findlogin->id;

            $findexist = AndroidAppId::where('userid',$findlogin->id)->where('appkey',$request->fcmToken)->first();

            if(empty($findexist)){

              AndroidAppId::insert($appdata);

            }

          }


          $user_info_return = RegisterUser::where('email',$request->email)
          // ->where(function($q) use ($social_id){ // comment bhai
            //     $q->where('google_id', $social_id)
            //     ->orWhere('social_id', $social_id)
            //       ->orWhere('facebook_id', $social_id);
            // })
            ->first();

          if (isset($social_id) && empty($request->email)) {
          $user_info_return = RegisterUser::where('google_id',$social_id)->orWhere('facebook_id',$social_id)
          ->orWhere('social_id',$social_id)
          ->first();
          }

if(!empty($user_info_return)){
// if(1){
          $user_info_return->fcmToken = $request->fcmToken;

          if ($user_info_return->image == "") {
          $user_info_return->image = $request->image;
          }

          $user_info_return->save();

          $user_info_return = RegisterUser::where('email',$request->email)->first();

          if (isset($social_id) && empty($request->email)) {
          $user_info_return = RegisterUser::where('google_id',$social_id)->orWhere('facebook_id',$social_id)
->orWhere('social_id',$social_id)
          ->first();
          }

          // $user_info_return = null;
          $token=JWTAuth::fromUser($user_info_return);
$isMobile = 0;
if(!empty($user_info_return->mobile) && $user_info_return->mobile != 0){
  $isMobile = 1;


    $rand2 = rand(100000,999999);

    // $code = $rand2;
    $code = "123456";

    // FOR IOS TESTER
        if($user_info_return->mobile == 8286998785){
          $code = 828699;
        }
    // $txtmsg='Dear Fanline11 user Your Verification code is: '.$code.'. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
    // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
    $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone.';

    $txtmsg_notify='Your Verification code is: '.$code;
    $titleget = 'Verification OTP!';

  $upCode['code'] = $code;
  DB::table('registerusers')->where('id' , $user_info_return->id)->update($upCode);

    Helpers::sendTextSmsNew($txtmsg,$user_info_return->mobile);


}
          $ip_address=self::getUserIpAddr();
          $user_los_array=array(
          "user_id"=>$user_info_return->id,
          "user_ip_address"=>$ip_address,
          "user_type"=>"Social Login",
          );
          DB::table('user_logs')->insert($user_los_array);

if(!$ios){
          $resultData = array();
          $resultData['mobile_verify'] = $user_info_return->mobile_verify;
          $resultData['user_id'] = $user_info_return->id;
          $resultData['mobile'] = $user_info_return->mobile;
          // $isMobile = 1;
          if($user_info_return->mobile_verify == 1){

            $isMobile = 1;
          }else{
                $resultData = new LoginResource($user_info_return);
            $isMobile = 0;
          }
      }else{

        $datasss['user_id'] = $user_info_return->id;
        DB::table('social_apple_logs')->insert($datasss);

        $resultData = new LoginResource($user_info_return);
        $resultData['mobile_verify'] = 1;
        $isMobile = 0;
        // $resultData['mobile_verify'] = $user_info_return->mobile_verify;
        // $resultData['user_id'] = $user_info_return->id;
        // $resultData['mobile'] = $user_info_return->mobile;
      }
          $user_info_return->jwt_token = $token;
          $user_info_return->save();
          Helpers::update_user_token($user_info_return->id,$token);
          return Response::json(["status" => STATUS_SUCCESS,"message"=>LOGIN_SUCCESS_MESSAGE,"is_register" => 0,"isMobile"=>$isMobile , "number"=>$user_info_return->mobile,"result"=>$resultData]);

}else{
  return Response::json(["status" => STATUS_FAILURE,"message"=>"Something went wrong!","isMobile"=>0 , "number"=>0]);

}



          // return Response::json(["status"=>"success","message"=>"user already exist!","result"=>["user_id" => $user_info_return->id, "custom_user_token" => $user_info_return->custom_user_token, "user_id"=>$user_info_return->id,"custom_user_token"=>$user_info_return->custom_user_token,"fcmToken"=>$user_info_return->fcmToken,"mobile"=>$user_info_return->mobile,"refercode"=>$user_info_return->refercode,"username"=>$user_info_return->username,"email"=>$user_info_return->email,"device_id"=>$user_info_return->deviceId,"dob"=>$user_info_return->dob,"gender"=>$user_info_return->gender,"address"=>$user_info_return->address,"city"=>$user_info_return->city,"pincode"=>$user_info_return->pincode,"email_verify"=>$user_info_return->email_verify,"mobile_verify"=>$user_info_return->mobile_verify,"bank_verify"=>$user_info_return->bank_verify,"pan_verify"=>$user_info_return->pan_verify,"refercode"=>$user_info_return->refercode,"team"=>$user_info_return->team ]]);

         // echo json_encode();die;

        }

        else{

          $rand=rand(1000,9999);

          $username= $data['username'] = $request->name;

          $data['image'] = $request->image;

          $data['provider'] = $request->provider;

          $data['activation_status'] = 'activated';

          if(isset($request->dob)){

            if($request->dob!=""){

              $dob = $data['dob'] = date('Y-m-d',strtotime($request->dob));

              $msgg['dobstatus'] = 1;

            }

            // else{

              // $msgg['msg'] = "DOB Required";

              // $msgg['uid'] = "";

              // $msgg['status'] = 0;

              // $msgg['dobstatus'] = 0;

              $user = RegisterUser::where('email',$request->email)->first();

              // // echo json_encode(array($msgg));die;

            // }

          }



          // check for refer code//

            if(!empty($request->code)){

              $finsuers = RegisterUser::where('refercode',$request->code)->first();

              if(!empty($finsuers)){

                // $data['refer_id'] = $finsuers->id;

              }

            }

            $fcmToken = $request->fcmToken;

            $image = $request->imageUrl;

            $deviceId = $request->deviceId;

            $idToken = $request->idToken;

            $socialLoginType = $request->socialLoginType;


            $data['fcmToken'] = $fcmToken;

            if (isset($request->image)) {
                $data['image'] = $request->image;
            }

            $data['deviceId'] = $deviceId;

            $data['socialLoginType'] = $socialLoginType;

            $data['social_id'] = $social_id;

            $data['provider'] = $provider;

            $data['email_verify'] = EMAIL_VERIFIED;


            if ($social_id == "") {
              $data['email'] =  "";
            } else {
              $data['email'] =  ($email != null) ? $email : "";
            }
            if (isset($google_id)) {
            $data['google_id'] = $google_id;
            }

             if (isset($facebook_id)) {
            $data['facebook_id'] = $facebook_id;
            }

            if (isset($request->email)) {
              if ($request->email == "") {
            $data['email_verify'] = EMAIL_VERIFIED;
              }
            }

            if ($data['email'] == "") {
            unset($data['email']);
            }

          // end check for refer code//

          $insertid = RegisterUser::insertGetId($data);



          //$updateData['refercode'] = 'BBF'.$rand.$insertid;

          $updateData['refercode'] = strtoupper(str_replace('@', '',str_replace('.', '', substr($newmailaddress,0,5)))).$rand;

          RegisterUser::where('id',$insertid)->update($updateData);

          if(isset($request->appid)){

            $appid = $appdata['appkey'] = $request->appid;

            $appdata['userid'] = $insertid;

            $findexist = AndroidAppId::where('userid',$insertid)->where('appkey',$appid)->first();

            if(empty($findexist)){

              AndroidAppId::insert($appdata);

            }

          }



          $blns['user_id'] = $numberid =  $insertid;

          $blns['balance'] = 0;
          $blns['bonus'] = 0;

          // if (isset($insertid)) {

          //   Userbalance::where('user_id',$insertid)->update($blns);

          // } else {

          //   Userbalance::insert($blns);

          // }

          Userbalance::insert($blns);



          $msgg['msg'] = "User Login Successfully.";

          $msgg['uid'] = $insertid;

          $msgg['status'] = 1;



          $user_info_return = RegisterUser::where('id',$insertid)->orderBy('id','DESC')->first();

          // MailController::sendVerificationMailOnRegister($request->email);

          $token=JWTAuth::fromUser($user_info_return);


           $user_info_return->jwt_token = $token;
           $user_info_return->save();
           Helpers::update_user_token($insertid,$token);


           if(!$ios){

                     $resultData = array();
                     $resultData['mobile_verify'] = $user_info_return->mobile_verify;
                     $resultData['user_id'] = $user_info_return->id;
                     $resultData['mobile'] = $user_info_return->mobile;
                     if($user_info_return->mobile_verify == 1){

                       $isMobile = 1;
                     }else{
                           $resultData = new LoginResource($user_info_return);
                       $isMobile = 0;
                     }
                 }else{

$datasss['user_id'] = $insertid;
DB::table('social_apple_logs')->insert($datasss);

                   $resultData = new LoginResource($user_info_return);
                   $resultData['mobile_verify'] = 1;
                   $isMobile = 0;
                   // $resultData['mobile_verify'] = $user_info_return->mobile_verify;
                   // $resultData['user_id'] = $user_info_return->id;
                   // $resultData['mobile'] = $user_info_return->mobile;
                 }



          return Response::json(["status" => STATUS_SUCCESS,"message"=>REGISTERED_SUCCESS_MESSAGE,"is_register" => 1,"isMobile"=>$isMobile , "number"=>0,"result"=> $resultData]);

        }

    }





     public function withdrawList(Request $request) {
      $this->validateLogin($request->user_id);
      $this->validate($request,[

        'user_id' => 'required'

      ]);

      $user_id  = $request->user_id;

      $WithdrawList = Withdraw::where('user_id',$user_id)

      ->limit(50)

      ->orderBy('approved_date','ASC')

      ->select('CONVERT(nvarchar,modified, 0)','amount','status','approved_date')

      ->get();



      return Response::json([

        "status"=>STATUS_SUCCESS,

        "result"=>$WithdrawList

      ]);

    }

  public function amountDeduct() {
    exit;
    $trans = DB::table('transactions')->where('transaction_by','paytm')->where('paymentstatus','confirmed')->orderBy('id','DESC')->limit(200)->get();
    foreach ($trans as $key => $value) {
      $order_id = $value->transaction_id;
      if($this->checkPaytmStatus($order_id)) {

      } else {
        $user_id = $value->userid;
        $bal = DB::table('userbalances')->where('user_id', $user_id)->first();
        // print_r($bal);
        $newBal['balance'] = $bal->balance-$value->amount;
        $newBal['winning'] = $bal->winning;
        $newBal['bonus'] = $bal->bonus;
        // print_r($newBal); exit;
        DB::table('userbalances')->where('id',$bal->id)->update($newBal);
        DB::table('transactions')->where('id', $value->id)->delete();
      }
    }
    echo 1; exit;
  }

    public static function checkPaytmStatus($order_id) {
      require_once 'PaytmKit/lib/encdec_paytm.php';

        /* initialize an array */
        $paytmParams = array();

        /* Find your MID in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys */
        $paytmParams["MID"] = PAYTM_MERCHANT_MID;

        /* Enter your order id which needs to be check status for */
        $paytmParams["ORDERID"] = $order_id;

        /**
        * Generate checksum by parameters we have
        * Find your Merchant Key in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys
        */
        $checksum = getChecksumFromArray($paytmParams, PAYTM_MERCHANT_KEY);

        /* put generated checksum value here */
        $paytmParams["CHECKSUMHASH"] = $checksum;

        /* prepare JSON string for request */
        $post_data = json_encode($paytmParams, JSON_UNESCAPED_SLASHES);

        /* for Staging */
        // $url = "https://securegw-stage.paytm.in/order/status";

        /* for Production */
        $url = "https://securegw.paytm.in/order/status";

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
        $response = curl_exec($ch);
        $response = json_decode($response, true);
        // print_r($response); exit;
        if($response['STATUS']=='TXN_SUCCESS') {
          return true;
        } else {
          return false;
        }
    }


    public static function checkPaytmStatusTest(Request $request) {
      require_once 'PaytmKit/lib/encdec_paytm.php';
        $order_id = $request->order_id;
        /* initialize an array */
        $paytmParams = array();

        /* Find your MID in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys */
        $paytmParams["MID"] = PAYTM_MERCHANT_MID;

        /* Enter your order id which needs to be check status for */
        $paytmParams["ORDERID"] = $order_id;

        /**
        * Generate checksum by parameters we have
        * Find your Merchant Key in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys
        */
        $checksum = getChecksumFromArray($paytmParams, PAYTM_MERCHANT_KEY);

        /* put generated checksum value here */
        $paytmParams["CHECKSUMHASH"] = $checksum;

        /* prepare JSON string for request */
        $post_data = json_encode($paytmParams, JSON_UNESCAPED_SLASHES);

        /* for Staging */
        // $url = "https://securegw-stage.paytm.in/order/status";

        /* for Production */
        $url = "https://securegw.paytm.in/order/status";

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
        $response = curl_exec($ch);
        $response = json_decode($response, true);
        print_r($response); exit;
        if($response['STATUS']=='TXN_SUCCESS') {
          return true;
        } else {
          return false;
        }
    }


    public static function checkRazorStatusTest(Request $request) {
      $order_id = $request->order_id;
      $command = 'curl -u rzp_live_hQgScvuEGwDAjl:7m2bseTC6mqUfnhNfUw4K13U \-X GET https://api.razorpay.com/v1/orders/'.$order_id.'';

      $response   = shell_exec($command);

      $resp = json_decode($response);
      print_r($resp);die;
      if(@$resp->error) {
        return false;
      } else {
        if(@$resp->status=='paid') {
          return true;
        } else {
          return false;
        }
      }
      // if()
    }


    public static function checkRazorStatus($order_id) {
      $command = 'curl -u rzp_live_hQgScvuEGwDAjl:7m2bseTC6mqUfnhNfUw4K13U \-X GET https://api.razorpay.com/v1/orders/'.$order_id.'';

      $response   = shell_exec($command);

      $resp = json_decode($response);
      // print_r($resp);die;
      if(@$resp->error) {
        return false;
      } else {
        if(@$resp->status=='paid') {
          return true;
        } else {
          return false;
        }
      }
      // if()
    }

    public function androidAddFundApi(Request $request){

    // Helpers::check_request($request->userid, $_SERVER);


    // $msgg['msg'] = "Payment done.";

    // $msgg['amount'] = @$total_available_amt+@$bonusAmount ?? 0;

    // $msgg['status'] = 1;

    // return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

    // echo json_encode(array($msgg));die;
      $req = json_encode($request->all());

      // $myfile = fopen(base_path()."/newfile.txt", "a") or die("Unable to open file!");
    // $txt = $req."\n";
    // fwrite($myfile, $txt);

    $amount = $getdata['amount']=floor($request->amount);
    $promocode = $request->promo;
    $id_promo = $request->promo_id;



    ////   DEPOSIT REFERRAL BONUS 3%  ////
    if ($request->user_id == 4820) {
      $check_exist_referral = ReferralBonus::where('user_id',$request->user_id)->first();
      if (empty($check_exist_referral)) {
        $user_self = RegisterUser::where('id',$request->user_id)->first();
      $user_referrer = RegisterUser::where('id',$user_self->refer_id)->first();

      if (!empty($user_self) && !empty($user_referrer)) {
      $share_amount = ($request->amount * DEPOSIT_REFER_BONUS_PERCENT)/100;

      $user_self_id = $user_self->id;
      $user_referrer_id = $user_referrer->id;
      ReferralBonus::create([
        'user_id' => $user_self_id,
        'refer_id' => $user_referrer_id,
        'amount' => $share_amount
      ]);

  $user_balance_self = UserBalance::where('user_id',$user_self_id)->first();
  $user_balance_referrer = UserBalance::where('user_id',$user_referrer_id)->first();


  $user_balance_self->balance += $share_amount;
  $user_balance_referrer->balance += $share_amount;

  $user_balance_self->save();
  $user_balance_referrer->save();


  $total_balance_self = $user_balance_self->bonus+$user_balance_self->winning+$user_balance_self->balance;
  $total_balance_referrer = $user_balance_referrer->bonus+$user_balance_referrer->winning+$user_balance_referrer->balance;



  $rand1 = rand(100000,999999);
  $rand2 = rand(100000,999999);

  // ENTRY FOR SELF USER
  Transaction::create([
    'userid' => $user_self_id,
    'refer_id' => $user_referrer_id,
    'type' => DEPOSIT_REFER_BONUS,
    'transaction_id' => 'RFR-DPST-'.$rand1,
    'transaction_by' => APP_NAME,
    'amount' => $share_amount,
    'addfund_amt' => $share_amount,
    'paymentstatus' => CONFIRMED,
    'bal_bonus_amt' => $user_balance_self->bonus,
    'bal_win_amt' => $user_balance_self->winning,
    'bal_fund_amt' => $user_balance_self->balance,
    'total_available_amt' => $total_balance_self,
  ]);


  // ENTRY FOR REFERRER USER
  Transaction::create([
    'userid' => $user_referrer_id,
    'refer_id' => $user_self_id,
    'type' => DEPOSIT_REFER_BONUS,
    'transaction_id' => 'RFR-DPST-'.$rand1,
    'transaction_by' => APP_NAME,
    'amount' => $share_amount,
     'paymentstatus' => CONFIRMED,
    'addfund_amt' => $share_amount,
    'bal_bonus_amt' => $user_balance_referrer->bonus,
    'bal_win_amt' => $user_balance_referrer->winning,
    'bal_fund_amt' => $user_balance_referrer->balance,
    'total_available_amt' => $total_balance_referrer,
  ]);
      }

      }


    }

    ////   DEPOSIT REFERRAL BONUS 3%  ////


    $msgg['msg'] = "Payment done.";

      $msgg['amount'] = 0;

      $msgg['status'] = 1;

      return Response::json(["status" => STATUS_SUCCESS, "message" => $msgg['msg'], "result" => $msgg]);die;

    $promo_data = DB::table('user_promo')->where('id', $id_promo)->orderBy('id','DESC')->first();
    if (!empty($promo_data)) {
      $promocode = $promo_data->promo_code;
    }

    $paytid ="";

    if(isset($request->payment_id)){

      $paytid = $request->payment_id;

    }

    // if ($request->user_id != 12054) {
      if ($request->paymentby == RAZORPAY) {
        $paytid = $request->order_id;
        if($this->checkRazorStatus($paytid)) {
        } else {
          exit;
        }
      }
    // }
    // else {

    // }

      // echo "got it.";die;
       if ($request->paymentby == 'paytm') {
        $paytid = $request->order_id;
        if($this->checkPaytmStatus($paytid)) {

        } else {
          exit;
        }
      }




    $user_id= $getdata['userid']= $request->user_id;
    $userid=$getdata['userid'];



    $offers= Offer::get();

    $getdata['paymentby']= $request->paymentby;
    // $getdata['paymentby']= 'paytm';

    // if($request->paymentby !="cashfree") return false;

    $txnid = 'smashers-'.rand(1000,9999).''.$getdata['userid'];

    // Promo code bonus

    $bonusAmount = 0;

    if($promocode != ""){


      $valid_promo = 0;


      foreach($offers as $o){

        if($promocode == $o->code  && $amount == $o->minamount && $o->status ==1 ){


          $valid_promo = 1;

          $used = UsedOffer::where('offer_id',$promocode)->where('user_id',$user_id)->get();


          $bonusAmount1 = $o->bonus;

          $bonus_type = $o->bonus_type;

           if($bonus_type == RS){

            $bonusAmount = $bonusAmount1;

          }else{

            $bonusAmount = (($amount * $bonusAmount1)/100);

          }




          if(is_null($used)) {

              $bonusAmount= 0;
            }

        }

      }




      $usedoffer['offer_id'] = $promocode;

      $usedoffer['user_id']= $user_id;

      UsedOffer::insert($usedoffer);

    }


    // echo $bonusAmount; exit;

    //update user balance//

      $userBalance = UserBalance::where('user_id',$getdata['userid'])->first();
      $total_balance = $userBalance->balance+$userBalance->bonus+$userBalance->winning;
      $userdata = RegisterUser::where('id',$getdata['userid'])->first();
      // print_r($getdata['userid']);die;
      $referid = $userdata->refer_id;

      $userBalanceReffred= UserBalance::where('user_id',$referid)->first();

      $referdata = RegisterUser::where('id',$referid)->where('refer_to_join', 0)->first();


      if($paytid != '') {
     $paytid = $request->payment_id;
          if ($request->paymentby == RAZORPAY) {
        $paytid = $request->order_id;
      }
      $trans = Transaction::where('transaction_id',$paytid)->where('paymentstatus','pending')->first();
      if(!empty($trans)) {


        // if($getdata['paymentby']==CASHFREE ) {
        if(1) {

          // Transaction::where('id', $trans->id)->where('paymentstatus',PENDING)->update(array("paymentstatus"=>"confirmed","total_available_amt"=>$total_balance));

        }



      if(!empty($referdata)) {

      if(!empty($referid) || $referid != 0){

          $bal_bonus_amt=0;$bal_win_amt=0;$bal_fund_amt=0;$total_available_amt=0;

          $bal_bonus_amt = $userBalanceReffred->bonus;

          $bal_win_amt = $userBalanceReffred->winning;

          $bal_fund_amt = $userBalanceReffred->balance;

          $total_available_amt = $bal_bonus_amt+$bal_win_amt+$bal_fund_amt;

          $bonus = BonusAmount::where('type',ADD_FUND_BONUS)->first();

       //     if ($request->user_id == 53) {
       //      echo $bonus;die;
       // }

          $bonus_type = isset($bonus->bonus_type) ? $bonus->bonus_type : 0;

          $price = isset($bonus->price) ? $bonus->price : 0;

       //   echo '<pre>';print_r($userBalance);die;

          if(!empty($userBalance)){

              if($bonus_type == 'amount'){

                  $balance_refer=$datainseertt['balance'] = $userBalanceReffred->balance+$price;

                  $amount_added = $price;

              }else{

                  $balance_refer=$datainseertt['balance'] = $userBalanceReffred->balance+(($amount * $price)/100);

                  $amount_added = (($amount * $price)/100);

              }



             /*

              $dataInsert['amount'] = $amount_added;

              $dataInsert['user_id'] = $user_id;

              $dataInsert['refered_by'] = $referid;



              DB::table('refer_bonus')->insert($dataInsert);*/

          }

          $total_available_amt = $total_available_amt+$balance_refer;



          $datainseertt['user_id'] = $referid;

        // echo '<pre>'; print_r($datainseertt); die;

        // if($getdata['paymentby']==CASHFREE) {

        // UserBalance::where('user_id',$referid)->update($datainseertt);

        //  }

        $notificationdata['userid'] = $referid;

          $notificationdata['title'] = 'Add Fund of Rs '.$amount_added.' for refer.';

          if($getdata['paymentby']==CASHFREE) {

            Notification::insert($notificationdata);

          }

          //push notifications//

          $titleget = 'Add fund successfully!';

          Helpers::sendnotification($titleget,$notificationdata['title'],'',$referid);



          // $transactionsdata_refer['userid'] = $referid;

            $transactionsdata_refer['type'] = ADD_FUND_REFER_BONUS;

            $transactionsdata_refer['refer_id'] = $user_id;

            // $transactionsdata_refer['paytid'] = $paytid;

            $transactionsdata_refer['transaction_id'] = $txnid;

            $transactionsdata_refer['transaction_by'] = $getdata['paymentby'];

            $transactionsdata_refer['amount'] = $amount_added;

            $transactionsdata_refer['addfund_amt'] = $amount_added;

            $transactionsdata_refer['paymentstatus'] = CONFIRMED;

            $transactionsdata_refer['bal_fund_amt'] = $balance_refer;

            $transactionsdata_refer['bal_win_amt'] = $bal_win_amt;

            $transactionsdata_refer['bal_bonus_amt'] = $bal_bonus_amt;

            $transactionsdata_refer['cons_amount'] = $amount;

            $transactionsdata_refer['total_available_amt'] = $total_available_amt;

            if($getdata['paymentby']==CASHFREE) {

            // Transaction::insert($transactionsdata_refer);

            }



      }

    }







      if(!empty($userBalance)){

        $datainseert['user_id'] = $getdata['userid'];

        $datainseert['refer_id']= $referid;

        $datainseert['balance'] = $userBalance->balance+$amount;

        $datainseert['bonus'] = $userBalance->bonus+$bonusAmount;

        // if($getdata['paymentby']==CASHFREE) {
        if(1) {

          // DB::table('userbalances')->where('user_id',$getdata['userid'])->update($datainseert);

        }



      }



      $userid=$getdata['userid'];



      $bal_bonus_amt=0;$bal_win_amt=0;$bal_fund_amt=0;$total_available_amt=0;

      $findlastow = UserBalance::where('user_id',$userid)->first();



      if(!empty($findlastow)){

        $total_available_amt = $findlastow->balance+$findlastow->winning+$findlastow->bonus;

        $bal_fund_amt = $findlastow->balance;

        $bal_win_amt = $findlastow->winning;

        $bal_bonus_amt = $findlastow->bonus;

      }



      $notificationdata['userid'] = $userid;

      $notificationdata['title'] = 'Add Fund of Rs '.$amount.' through '.$getdata['paymentby'].'.';

      if($getdata['paymentby']==CASHFREE) {

        // Notification::insert($notificationdata);

      }

      //push notifications//

      $titleget = 'Add fund successfully!';

      // Helpers::sendnotification($titleget,$notificationdata['title'],'',$userid);

      //end push notifications//

      $transactionsdata['userid'] = $userid;

      $transactionsdata['type'] = ADD_FUND;

      $transactionsdata['transaction_id'] = $txnid;

      $transactionsdata['paytid'] = $paytid;

      $transactionsdata['transaction_by'] = $getdata['paymentby'];

      $transactionsdata['amount'] = $amount;

      $transactionsdata['addfund_amt'] = $amount;

      // $transactionsdata['paymentstatus'] = CONFIRMED;

      $transactionsdata['bal_fund_amt'] = $bal_fund_amt;

      $transactionsdata['bal_win_amt'] = $bal_win_amt;

      $transactionsdata['bal_bonus_amt'] = $bal_bonus_amt;

      $transactionsdata['cons_amount'] = $amount;

      $transactionsdata['total_available_amt'] = $total_available_amt;

      if($getdata['paymentby']==CASHFREE) {

        // Transaction::where('id', $trans->id)->where('paytid', $paytid)->update($transactionsdata);

      }

    }

  }

  // echo $bonusAmount; exit;

      if($bonusAmount!=0){

        // find balance details //

        $finduser_bal = UserBalance::where('user_id',$userid)->first();

        if(!empty($finduser_bal)){

          $new_total_available_amt = $finduser_bal->balance+$finduser_bal->winning+$finduser_bal->bonus;

          $new_bal_fund_amt = $finduser_bal->balance;

          $new_bal_win_amt = $finduser_bal->winning;

          $new_bal_bonus_amt = $finduser_bal->bonus;

          $datainseert2['user_id'] = $userid;

          $datainseert2['refer_id']= $referid;

          $datainseert2['bonus'] = $finduser_bal->bonus+$bonusAmount;

          //if($getdata['paymentby']==CASHFREE) {

           // UserBalance::where('user_id',$userid)->update($datainseert2);

          //}

          $ntxnid = 'Fanline11BONUS-'.time();

          $newtransactionsdata['userid'] = $userid;

          $newtransactionsdata['type'] = ADD_FUND_BONUS;

          $newtransactionsdata['transaction_id'] = $ntxnid;

          $newtransactionsdata['transaction_by'] = '';

          $newtransactionsdata['amount'] = $bonusAmount;

          $newtransactionsdata['bonus_amt'] = $bonusAmount;

          $newtransactionsdata['paymentstatus'] = CONFIRMED;

          $newtransactionsdata['bal_fund_amt'] = $new_bal_fund_amt;

          $newtransactionsdata['bal_win_amt'] = $new_bal_win_amt;

          $newtransactionsdata['bal_bonus_amt'] = $new_bal_bonus_amt;

          $newtransactionsdata['total_available_amt'] = $new_total_available_amt;

          // Transaction::insert($newtransactionsdata);



          $notificationdata['userid'] = $userid;

              $notificationdata['title'] = 'Bonus of Rs '.$bonusAmount.' Added to your account';

              // Notification::insert($notificationdata);

              //push notifications//

              $titleget = 'Bonus Credited';

              // Helpers::sendnotification($titleget,$notificationdata['title'],'',$userid);

        }

      }

      $finduser_bal = UserBalance::where('user_id',$user_id)->first();
      $total_available_amt = $finduser_bal->balance;
      $msgg['msg'] = "Payment done.";

      $msgg['amount'] = $total_available_amt+$bonusAmount ?? 0;

      $msgg['status'] = 1;

      return Response::json(["status" => STATUS_SUCCESS, "message" => $msgg['msg'], "result" => $msgg]);die;

      // echo json_encode(array($msgg));die;

  }



  public function paytm_notify(Request $request) {

    $myfile = fopen("paytm_notify.txt", "a") or die("Unable to open file!");
    $txt = json_encode($_REQUEST)."John Doe\n";
    fwrite($myfile, $txt);

    // $myfile = fopen(base_path()."/test.txt", "w") or die("Unable to open file!");
    // $txt = serialize($_POST)."John Doe\n";
    // fwrite($myfile, $txt);
    // print_r($request->all());die;
    $orderId = $request->ORDERID;
    $txnid = $request->ORDERID;
    fclose($myfile);
    if($request->STATUS=='TXN_SUCCESS') {
      $orderId = $request->ORDERID;
      if($orderId!='') {
      $trans = DB::table('transactions')->where('transaction_id', $orderId)->where('paymentstatus','pending')->first();
      if(!empty($trans)) {
        DB::table('transactions')->where('id', $trans->id)->where('transaction_id', $orderId)->where('paymentstatus','pending')->update(array("paymentstatus"=>"confirmed"));
        $user_id = $getdata['userid'] = $trans->userid;
        $amount = $request->TXNAMOUNT;
        $userBalance = DB::table('userbalances')->where('user_id',$user_id)->first();
        $userdata = DB::table('registerusers')->where('id',$getdata['userid'])->first();
          $referid = $userdata->refer_id;
          $userBalanceReffred= DB::table('userbalances')->where('user_id',$referid)->first();
          $referdata = DB::table('registerusers')->where('id',$referid)->where('refer_to_join', 0)->first();


          /* Insert IN Bonus */
        $promo = DB::table('user_promo')->where('user_id', $user_id)->orderBy('id','DESC')->first();
        $bonusAmount = 0;
        if(!empty($promo) && $promo->status==0) {
        $promocode = $promo->promo_code;
        $bonusAmount= 0;
        if($promocode != ""){
          $valid_promo = 0;
          $offers= DB::table('offers')->where('code',$promocode)->where('minamount','<=', $amount)->where('maxamount','>=', $amount)->where('status', 1)->first();
          // foreach($offers as $o){
            if(!empty($offers)){
              $valid_promo = 1;
              $used = DB::table('usedoffers')->where('offer_id',$promocode)->where('user_id',$user_id)->get();
              $bonusAmount1 = $offers->bonus;
              $bonus_type = $offers->bonus_type;
               if($bonus_type == 'rs'){
                $bonusAmount = $bonusAmount1;
              }else{
                $bonusAmount = (($amount * $bonusAmount1)/100);
              }
              // if(!empty($used))
              //     $bonusAmount= 0;
            }
          if($bonusAmount) {
            $usedoffer['offer_id'] = $promocode;
            $usedoffer['user_id']= $user_id;
            DB::table('usedoffers')->insert($usedoffer);
            DB::table('user_promo')->where('id', $promo->id)->update(array("status" => 1));
          }

        }
        }

        if(!empty($promo) && $promo->status==0 && strtolower($promo->promo_code)=='first') {

        /* Check first time bonus */
        $countFund = $trans = DB::table('transactions')->where('userid', $user_id)->where('paymentstatus','confirmed')->where('type','add fund')->count();
        if($countFund == 1) {
          if($amount>=399 && $amount<=4999) {
            $bonusAmount = $amount;
          }
        }
        /* Check first time bonus */

        }


        /* Bonus Credit */
          if($bonusAmount!=0){
        // find balance details //
            $finduser_bal = DB::table('userbalances')->where('user_id',$user_id)->first();
            if(!empty($finduser_bal)){
              $new_total_available_amt = $finduser_bal->balance+$finduser_bal->winning+$finduser_bal->bonus;
              $new_bal_fund_amt = $finduser_bal->balance;
              $new_bal_win_amt = $finduser_bal->winning;
              $new_bal_bonus_amt = $finduser_bal->bonus;
              // $datainseert2['user_id'] = $user_id;
              // $datainseert2['refer_id']= $referid;
              // $datainseert['balance'] = $userBalance->balance+$amount;
              $datainseert2['bonus'] = $finduser_bal->bonus+$bonusAmount;
              //if($getdata['paymentby']=='cashfree') {
                DB::table('userbalances')->where('user_id',$user_id)->update($datainseert2);
              //}
              $ntxnid = 'FANLINE11BONUS-'.time();
              $newtransactionsdata['userid'] = $user_id;
              $newtransactionsdata['type'] = 'Bonus add during add fund';
              $newtransactionsdata['transaction_id'] = $ntxnid;
              $newtransactionsdata['transaction_by'] = 'cashfree';
              $newtransactionsdata['amount'] = $bonusAmount;
              $newtransactionsdata['bonus_amt'] = $bonusAmount;
              $newtransactionsdata['paymentstatus'] = 'confirmed';
              $newtransactionsdata['bal_fund_amt'] = $new_bal_fund_amt;
              $newtransactionsdata['bal_win_amt'] = $new_bal_win_amt;
              $newtransactionsdata['bal_bonus_amt'] = $new_bal_bonus_amt;
              $newtransactionsdata['total_available_amt'] = $new_total_available_amt; //print_r($newtransactionsdata); exit;
              DB::table('transactions')->insert($newtransactionsdata);
            }
          }
          /* Bonus Credit */
        /* Insert IN Bonus */





        ////   DEPOSIT REFERRAL BONUS 3%  ////
  //   if (1) {
  //     $check_exist_referral = ReferralBonus::where('user_id',$user_id)->first();
  //     if (empty($check_exist_referral)) {
  //       $user_self = RegisterUser::where('id',$user_id)->first();
  //     $user_referrer = RegisterUser::where('id',$user_self->refer_id)->first();

  //     if (!empty($user_self) && !empty($user_referrer)) {
  //     $share_amount = ($amount * DEPOSIT_REFER_BONUS_PERCENT)/100;

  //     $user_self_id = $user_self->id;
  //     $user_referrer_id = $user_referrer->id;
  //     ReferralBonus::create([
  //       'user_id' => $user_self_id,
  //       'refer_id' => $user_referrer_id,
  //       'amount' => $share_amount
  //     ]);

  // $user_balance_self = UserBalance::where('user_id',$user_self_id)->first();
  // $user_balance_referrer = UserBalance::where('user_id',$user_referrer_id)->first();


  // $user_balance_self->balance += $share_amount;
  // $user_balance_referrer->balance += $share_amount;

  // $user_balance_self->save();
  // $user_balance_referrer->save();


  // $total_balance_self = $user_balance_self->bonus+$user_balance_self->winning+$user_balance_self->balance;
  // $total_balance_referrer = $user_balance_referrer->bonus+$user_balance_referrer->winning+$user_balance_referrer->balance;

  // // echo 1; exit;

  // $rand1 = rand(100000,999999);
  // $rand2 = rand(100000,999999);

  // // ENTRY FOR SELF USER
  // $self_array = [
  //   'userid' => $user_self_id,
  //   'refer_id' => $user_referrer_id,
  //   'type' => 'Deposit Refer Bonus',
  //   'transaction_id' => 'RFR-DPST-'.$rand1,
  //   'transaction_by' => '11Caps',
  //   'amount' => $share_amount,
  //   'addfund_amt' => $share_amount,
  //   'paymentstatus' => 'Confirmed',
  //   'bal_bonus_amt' => $user_balance_self->bonus,
  //   'bal_win_amt' => $user_balance_self->winning,
  //   'bal_fund_amt' => $user_balance_self->balance,
  //   'total_available_amt' => $total_balance_self,
  // ];
  // // print_r($self_array); exit;
  // Transaction::create($self_array);


  // // ENTRY FOR REFERRER USER
  // Transaction::create([
  //   'userid' => $user_referrer_id,
  //   'refer_id' => $user_self_id,
  //   'type' => 'Deposit Refer Bonus',
  //   'transaction_id' => 'RFR-DPST-'.$rand1,
  //   'transaction_by' => '11Caps',
  //   'amount' => $share_amount,
  //    'paymentstatus' => 'confirmed',
  //   'addfund_amt' => $share_amount,
  //   'bal_bonus_amt' => $user_balance_referrer->bonus,
  //   'bal_win_amt' => $user_balance_referrer->winning,
  //   'bal_fund_amt' => $user_balance_referrer->balance,
  //   'total_available_amt' => $total_balance_referrer,
  // ]);
  //     }

  //     }


  //   }

    ////   DEPOSIT REFERRAL BONUS 3%  ////



          if(!empty($referdata)) {
          if(!empty($referid) || $referid != 0){
              $bal_bonus_amt=0;$bal_win_amt=0;$bal_fund_amt=0;$total_available_amt=0;
              $bal_bonus_amt = $userBalanceReffred->bonus;
              $bal_win_amt = $userBalanceReffred->winning;
              $bal_fund_amt = $userBalanceReffred->balance;
              $total_available_amt = $bal_bonus_amt+$bal_win_amt+$bal_fund_amt;
              // $bonus = DB::table('bonus_amount')->where('type',"Add Fund Bonus")->first();
              // $bonus_type = $bonus->bonus_type;
              // $price = $bonus->price;
           //   echo '<pre>';print_r($userBalance);die;
              if(!empty($userBalance)){
                  // if($bonus_type == 'amount'){
                  //     $balance_refer=$datainseertt['balance'] = $userBalanceReffred->balance+$price;
                  //     $amount_added = $price;
                  // }else{
                  //     $balance_refer=$datainseertt['balance'] = $userBalanceReffred->balance+(($amount * $price)/100);
                  //     $amount_added = (($amount * $price)/100);
                  // }
                 /*
                  $dataInsert['amount'] = $amount_added;
                  $dataInsert['user_id'] = $user_id;
                  $dataInsert['refered_by'] = $referid;
                  DB::table('refer_bonus')->insert($dataInsert);*/
              }
              $total_available_amt = $total_available_amt;
              // $total_available_amt = $total_available_amt+$balance_refer;
              $datainseertt['user_id'] = $referid;
            //echo '<pre>'; print_r($datainseertt); die;
            // DB::table('userbalances')->where('user_id',$referid)->update($datainseertt);
            // $notificationdata['userid'] = $referid;
        //      $notificationdata['title'] = 'Add Fund of Rs '.$amount_added.' for refer.';
        //      DB::table('notifications')->insert($notificationdata);
        //      //push notifications//
        //      $titleget = 'Add fund successfully!';
        //      Helpers::sendnotification($titleget,$notificationdata['title'],'',$referid);
            // $txnid = 'fantasypower11-'.rand(1000,9999).''.$getdata['userid'];
           //    $transactionsdata_refer['userid'] = $referid;
        //        $transactionsdata_refer['type'] = 'Add Fund Refer Bonus';
        //        $transactionsdata_refer['refer_id'] = $user_id;
        //        // $transactionsdata_refer['paytid'] = $orderId;
        //        $transactionsdata_refer['transaction_id'] = $txnid;
        //        $transactionsdata_refer['transaction_by'] = 'paytm';
        //        $transactionsdata_refer['amount'] = $amount_added;
        //        $transactionsdata_refer['addfund_amt'] = $amount_added;
        //        $transactionsdata_refer['paymentstatus'] = 'confirmed';
        //        $transactionsdata_refer['bal_fund_amt'] = $balance_refer;
        //        $transactionsdata_refer['bal_win_amt'] = $bal_win_amt;
        //        $transactionsdata_refer['bal_bonus_amt'] = $bal_bonus_amt;
        //        $transactionsdata_refer['cons_amount'] = $amount;
        //        $transactionsdata_refer['total_available_amt'] = $total_available_amt; //print_r($transactionsdata_refer); exit;
        //        DB::table('transactions')->insert($transactionsdata_refer);
          }
        }
        if(!empty($userBalance)){
          $datainseert['user_id'] = $user_id;
          $datainseert['refer_id']= $referid;
          $datainseert['balance'] = $userBalance->balance+$amount;
          // $datainseert['bonus'] = $userBalance->bonus+$bonusAmount;
          DB::table('userbalances')->where('user_id',$getdata['userid'])->update($datainseert);
        }
        $bal_bonus_amt=0;$bal_win_amt=0;$bal_fund_amt=0;$total_available_amt=0;
        $findlastow = DB::table('userbalances')->where('user_id',$getdata['userid'])->first();
        if(!empty($findlastow)){
          $total_available_amt = $findlastow->balance+$findlastow->winning+$findlastow->bonus;
          $bal_fund_amt = $findlastow->balance;
          $bal_win_amt = $findlastow->winning;
          $bal_bonus_amt = $findlastow->bonus;
        }
        //push notifications//
        $titleget = 'Add fund successfully!';
        $notificationdata['title'] = 'Add fund of '.$amount.' is successful';
        Helpers::sendnotification($titleget,$notificationdata['title'],'',$getdata['userid']);
        $transactionsdata['userid'] = $user_id;
        $transactionsdata['type'] = 'Add Fund';
        $transactionsdata['transaction_id'] = $txnid;
        $transactionsdata['transaction_by'] = 'paytm';
        $transactionsdata['amount'] = $amount;
        $transactionsdata['addfund_amt'] = $amount;
        $transactionsdata['paymentstatus'] = 'confirmed';
        $transactionsdata['bal_fund_amt'] = $bal_fund_amt;
        $transactionsdata['bal_win_amt'] = $bal_win_amt;
        $transactionsdata['bal_bonus_amt'] = $bal_bonus_amt;
        $transactionsdata['cons_amount'] = $amount;
        $transactionsdata['total_available_amt'] = $total_available_amt;
        DB::table('transactions')->where('paytid', $orderId)->update($transactionsdata);
        $notificationdata['userid'] = $user_id;
        $notificationdata['title'] = 'Add Fund of Rs '.$amount.' through paytm';
        DB::table('notifications')->insert($notificationdata);
      }
      }
    }
    echo json_encode(array("status"=>"OK"));
    exit;
  }





    // public function get_cashfree_checksum(Request $request) {

    //     $post = $_POST; //print_r($_POST); exit;

    //     $secretKey = '32a299dccf95135486ba2ae549f0d4dbf7271a36'; //CODE to fetching your secretKey from your config files

    //         foreach($post as $key => $value) {

    //             $postData[$key] = $_POST[$key];

    //          }



    //      //The postData initializes its values from the Post parameters

    //      $postData['appId'] = '2018bac39cc66a425c8e2b6f8102';





    //      // combine all of the data into a single string as shown below

    //      ksort($postData);

    //      $checksumData = "";

    //      foreach ($postData as $key => $value){

    //           $checksumData .= $key.$value;

    //      }





    //      $checksum = hash_hmac('sha256', $checksumData, $secretKey,true);

    //      $checksum = base64_encode($checksum);



    //      $email = $post['customerEmail'];

    //      $row = RegisterUser::where('email', $email)->first();

    //      if($row) {

    //       $user_id = $row->id;

    //       $insert_data = array(

    //         "userid" => $user_id,

    //         "amount" => $post['orderAmount'],

    //         "transaction_by" => "cashfree",

    //         "paymentstatus" => "pending",

    //         "transaction_id" => $post['orderId'],

    //         "paytid" => $post['orderId'],

    //         "type" => "Add Fund"

    //       );

    //       Transaction::insert($insert_data);

    //   }



    //     //$this->db->insert('transaction', $insert_data);





    //      $response = array("orderId" => $post['orderId'], "checksum" => $checksum, "status" => "OK");

    //      echo json_encode($response); exit;

    //      return $data;



    // }





     public function cashfree_notify() {
    $myfile = fopen("cashfree_notify.txt", "a") or die("Unable to open file!");
    $txt = json_encode($_REQUEST)."John Doe\n";
    fwrite($myfile, $txt);


    $secretKey = '1552a09be4de3973a3d7e1bf6f9e7dbe7bd5ecc3';
    //$secretKey = '27d764350ea2d0b908dc24e4fbfe4892e4aede84';
        $orderId = $txnid = $_POST["orderId"];
         $orderAmount = $_POST["orderAmount"];
         $referenceId = $_POST["referenceId"];
         $txStatus = $_POST["txStatus"];
         $paymentMode = $_POST["paymentMode"];
         $txMsg = $_POST["txMsg"];
         $txTime = $_POST["txTime"];
         $signature = $_POST["signature"];
         $data = $orderId.$orderAmount.$referenceId.$txStatus.$paymentMode.$txMsg.$txTime;
         $hash_hmac = hash_hmac('sha256', $data, $secretKey, true) ;
         $computedSignature = base64_encode($hash_hmac); //print_r($_POST); exit;
         // echo $computedSignature;
         //if($orderId==1554373479724) {
         if ($signature == $computedSignature) {
            if($txStatus=='SUCCESS') {
              $transaction_row = DB::table('transactions')->where('transaction_id', $orderId)->where('paymentstatus','pending')->first();
              // $this->db->select('id')->from('transaction')->where('transaction_id', $orderId)->where('status',0);
              if(!empty($transaction_row)) {
                DB::table('transactions')->where('id',$transaction_row->id)->where('transaction_id', $orderId)->update(array('paymentstatus'=>'confirmed'));
                  $user_id = $getdata['userid'] = $transaction_row->userid;
                  $amount = $orderAmount;
                  $userBalance = DB::table('userbalances')->where('user_id',$user_id)->first();
          $userdata = DB::table('registerusers')->where('id',$getdata['userid'])->first();
          $referid = $userdata->refer_id;
          $userBalanceReffred= DB::table('userbalances')->where('user_id',$referid)->first();
          $referdata = DB::table('registerusers')->where('id',$referid)->where('refer_to_join', 0)->first();
          /* Insert IN Bonus */
        $promo = DB::table('user_promo')->where('user_id', $user_id)->orderBy('id','DESC')->first();
        $bonusAmount = 0;
        if(!empty($promo) && $promo->status==0) {
        $promocode = $promo->promo_code;
        $bonusAmount= 0;
        if($promocode != ""){
          $valid_promo = 0;
          $offers= DB::table('offers')->where('code',$promocode)->where('minamount','<=', $amount)->where('maxamount','>=', $amount)->where('status', 1)->first();
          // print_r($offers);
          // foreach($offers as $o){
            if(!empty($offers)){
              $valid_promo = 1;
              $used = DB::table('usedoffers')->where('offer_id',$promocode)->where('user_id',$user_id)->get();
              $bonusAmount1 = $offers->bonus;
              $bonus_type = $offers->bonus_type;
               if($bonus_type == 'rs'){
                $bonusAmount = $bonusAmount1;
              }else{
                $bonusAmount = (($amount * $bonusAmount1)/100);
              }
              // if(!empty($used))
              //     $bonusAmount= 0;
            }
          // }
          if($bonusAmount) {
            $usedoffer['offer_id'] = $promocode;
            $usedoffer['user_id']= $user_id;
            DB::table('usedoffers')->insert($usedoffer);
            DB::table('user_promo')->where('id', $promo->id)->update(array("status" => 1));
          }

        }
        }
        // echo $bonusAmount; exit;
        /* Bonus Credit */
          if(!empty($promo) && $promo->status==0 && strtolower($promo->promo_code)=='first') {

        /* Check first time bonus */
        $countFund = $trans = DB::table('transactions')->where('userid', $user_id)->where('paymentstatus','confirmed')->where('type','add fund')->count();
        if($countFund == 1) {
          if($amount>=399 && $amount<=4999) {
            $bonusAmount = $amount;
          }
        }
        /* Check first time bonus */

        }
          if($bonusAmount!=0){
        // find balance details //
            $finduser_bal = DB::table('userbalances')->where('user_id',$user_id)->first();
            if(!empty($finduser_bal)){
              $new_total_available_amt = $finduser_bal->balance+$finduser_bal->winning+$finduser_bal->bonus;
              $new_bal_fund_amt = $finduser_bal->balance;
              $new_bal_win_amt = $finduser_bal->winning;
              $new_bal_bonus_amt = $finduser_bal->bonus;
              // $datainseert2['user_id'] = $user_id;
              // $datainseert2['refer_id']= $referid;
              // $datainseert['balance'] = $userBalance->balance+$amount;
              $datainseert2['bonus'] = $finduser_bal->bonus+$bonusAmount;
              //if($getdata['paymentby']=='cashfree') {
                DB::table('userbalances')->where('user_id',$user_id)->update($datainseert2);
              //}
              $ntxnid = 'FANLINE11BONUS-'.time();
              $newtransactionsdata['userid'] = $user_id;
              $newtransactionsdata['type'] = 'Bonus add during add fund';
              $newtransactionsdata['transaction_id'] = $ntxnid;
              $newtransactionsdata['transaction_by'] = 'cashfree';
              $newtransactionsdata['amount'] = $bonusAmount;
              $newtransactionsdata['bonus_amt'] = $bonusAmount;
              $newtransactionsdata['paymentstatus'] = 'confirmed';
              $newtransactionsdata['bal_fund_amt'] = $new_bal_fund_amt;
              $newtransactionsdata['bal_win_amt'] = $new_bal_win_amt;
              $newtransactionsdata['bal_bonus_amt'] = $new_bal_bonus_amt;
              $newtransactionsdata['total_available_amt'] = $new_total_available_amt; //print_r($newtransactionsdata); exit;
              DB::table('transactions')->insert($newtransactionsdata);
            }
          }
          /* Bonus Credit */
        /* Insert IN Bonus */

        ////   DEPOSIT REFERRAL BONUS 3%  ////
    if (1) {
                /*
                $check_exist_referral = ReferralBonus::where('user_id',$user_id)->first();
                if (empty($check_exist_referral)) {
                  $user_self = RegisterUser::where('id',$user_id)->first();
                $user_referrer = RegisterUser::where('id',$user_self->refer_id)->first();

                if (!empty($user_self) && !empty($user_referrer)) {
                $share_amount = ($amount * DEPOSIT_REFER_BONUS_PERCENT)/100;

                $user_self_id = $user_self->id;
                $user_referrer_id = $user_referrer->id;
                ReferralBonus::create([
                  'user_id' => $user_self_id,
                  'refer_id' => $user_referrer_id,
                  'amount' => $share_amount
                ]);

            $user_balance_self = UserBalance::where('user_id',$user_self_id)->first();
            $user_balance_referrer = UserBalance::where('user_id',$user_referrer_id)->first();


            $user_balance_self->balance += $share_amount;
            $user_balance_referrer->balance += $share_amount;

            $user_balance_self->save();
            $user_balance_referrer->save();


            $total_balance_self = $user_balance_self->bonus+$user_balance_self->winning+$user_balance_self->balance;
            $total_balance_referrer = $user_balance_referrer->bonus+$user_balance_referrer->winning+$user_balance_referrer->balance;

            // echo 1; exit;

            $rand1 = rand(100000,999999);
            $rand2 = rand(100000,999999);

            // ENTRY FOR SELF USER
            $self_array = [
              'userid' => $user_self_id,
              'refer_id' => $user_referrer_id,
              'type' => 'Deposit Refer Bonus',
              'transaction_id' => 'RFR-DPST-'.$rand1,
              'transaction_by' => '11Caps',
              'amount' => $share_amount,
              'addfund_amt' => $share_amount,
              'paymentstatus' => 'Confirmed',
              'bal_bonus_amt' => $user_balance_self->bonus,
              'bal_win_amt' => $user_balance_self->winning,
              'bal_fund_amt' => $user_balance_self->balance,
              'total_available_amt' => $total_balance_self,
            ];
            // print_r($self_array); exit;
            Transaction::create($self_array);


            // ENTRY FOR REFERRER USER
            Transaction::create([
              'userid' => $user_referrer_id,
              'refer_id' => $user_self_id,
              'type' => 'Deposit Refer Bonus',
              'transaction_id' => 'RFR-DPST-'.$rand1,
              'transaction_by' => '11Caps',
              'amount' => $share_amount,
               'paymentstatus' => 'confirmed',
              'addfund_amt' => $share_amount,
              'bal_bonus_amt' => $user_balance_referrer->bonus,
              'bal_win_amt' => $user_balance_referrer->winning,
              'bal_fund_amt' => $user_balance_referrer->balance,
              'total_available_amt' => $total_balance_referrer,
            ]);
                }

                }


              */
  }

    ////   DEPOSIT REFERRAL BONUS 3%  ////


                  // Refer Data add
     //              if(!empty($referdata)) {
        //  if(!empty($referid) || $referid != 0){
        //      $bal_bonus_amt=0;$bal_win_amt=0;$bal_fund_amt=0;$total_available_amt=0;
        //      $bal_bonus_amt = $userBalanceReffred->bonus;
        //      $bal_win_amt = $userBalanceReffred->winning;
        //      $bal_fund_amt = $userBalanceReffred->balance;
        //      $total_available_amt = $bal_bonus_amt+$bal_win_amt+$bal_fund_amt;
        //      $bonus = DB::table('bonus_amount')->where('type',"Add Fund Bonus")->first();
        //      $bonus_type = $bonus->bonus_type;
        //      $price = $bonus->price;
        //   //   echo '<pre>';print_r($userBalance);die;
        //      if(!empty($userBalance)){
        //          if($bonus_type == 'amount'){
        //              $balance_refer=$datainseertt['balance'] = $userBalanceReffred->balance+$price;
        //              $amount_added = $price;
        //          }else{
        //              $balance_refer=$datainseertt['balance'] = $userBalanceReffred->balance+(($amount * $price)/100);
        //              $amount_added = (($amount * $price)/100);
        //          }
        //         /*
        //          $dataInsert['amount'] = $amount_added;
        //          $dataInsert['user_id'] = $user_id;
        //          $dataInsert['refered_by'] = $referid;
        //          DB::table('refer_bonus')->insert($dataInsert);*/
        //      }
        //      $total_available_amt = $total_available_amt+$balance_refer;
        //      $datainseertt['user_id'] = $referid;
        //    //echo '<pre>'; print_r($datainseertt); die;
        //    DB::table('userbalances')->where('user_id',$referid)->update($datainseertt);
        //    $notificationdata['userid'] = $referid;
      //        $notificationdata['title'] = 'Add Fund of Rs '.$amount_added.' for refer.';
      //        // DB::table('notifications')->insert($notificationdata);
      //        //push notifications//
      //        $titleget = 'Add fund successfully!';
      //        // Helpers::sendnotification($titleget,$notificationdata['title'],'',$referid);
        //    $txnid = 'fantasypower11-'.rand(1000,9999).''.$getdata['userid'];
        //      $transactionsdata_refer['userid'] = $referid;
      //          $transactionsdata_refer['type'] = 'Add Fund Refer Bonus';
      //          $transactionsdata_refer['refer_id'] = $user_id;
      //          // $transactionsdata_refer['paytid'] = $orderId;
      //          $transactionsdata_refer['transaction_id'] = $txnid;
      //          $transactionsdata_refer['transaction_by'] = 'cashfree';
      //          $transactionsdata_refer['amount'] = $amount_added;
      //          $transactionsdata_refer['addfund_amt'] = $amount_added;
      //          $transactionsdata_refer['paymentstatus'] = 'confirmed';
      //          $transactionsdata_refer['bal_fund_amt'] = $balance_refer;
      //          $transactionsdata_refer['bal_win_amt'] = $bal_win_amt;
      //          $transactionsdata_refer['bal_bonus_amt'] = $bal_bonus_amt;
      //          $transactionsdata_refer['cons_amount'] = $amount;
      //          $transactionsdata_refer['total_available_amt'] = $total_available_amt; //print_r($transactionsdata_refer); exit;
      //          // DB::table('transactions')->insert($transactionsdata_refer);
        //  }
        // }
                  // Refer Data add
          if(!empty($userBalance)){
          $datainseert['user_id'] = $user_id;
          $datainseert['refer_id']= $referid;
          $datainseert['balance'] = $userBalance->balance+$amount;
          // $datainseert['bonus'] = $userBalance->bonus+$bonusAmount;
          DB::table('userbalances')->where('user_id',$getdata['userid'])->update($datainseert);
        }
        $bal_bonus_amt=0;$bal_win_amt=0;$bal_fund_amt=0;$total_available_amt=0;
        $findlastow = DB::table('userbalances')->where('user_id',$getdata['userid'])->first();
        if(!empty($findlastow)){
          $total_available_amt = $findlastow->balance+$findlastow->winning+$findlastow->bonus;
          $bal_fund_amt = $findlastow->balance;
          $bal_win_amt = $findlastow->winning;
          $bal_bonus_amt = $findlastow->bonus;
        }
        //push notifications//
        $titleget = 'Add fund successfully!';
        // Helpers::sendnotification($titleget,$notificationdata['title'],'',$getdata['userid']);
        // $transactionsdata['userid'] = $user_id;
        $transactionsdata['type'] = 'Add Fund';
        $transactionsdata['transaction_id'] = $txnid;
        $transactionsdata['transaction_by'] = 'cashfree';
        $transactionsdata['amount'] = $amount;
        $transactionsdata['addfund_amt'] = $amount;
        $transactionsdata['paymentstatus'] = 'pending';
        $transactionsdata['bal_fund_amt'] = $bal_fund_amt;
        $transactionsdata['bal_win_amt'] = $bal_win_amt;
        $transactionsdata['bal_bonus_amt'] = $bal_bonus_amt;
        $transactionsdata['cons_amount'] = $amount;
        $transactionsdata['total_available_amt'] = $total_available_amt;
        DB::table('transactions')->where('id',$transaction_row->id)->where('paytid', $orderId)->update($transactionsdata);
        $notificationdata['userid'] = $user_id;
        $notificationdata['title'] = 'Add Fund of Rs '.$amount.' through cashfree';
        // DB::table('notifications')->insert($notificationdata);
        //mail//
        $toEmail = $userdata->email;
        //Get Email Detail
        /*$email_data = DB::table('email_templates')->where('action','Cashfree Notify')->first();
        $emailsubject = $email_data->subject;
        $email_body = array('{AMOUNT}');
            $rep_Array = array($amount);
        //Replase Value
        $messageBody = str_replace($email_body,$rep_Array,$email_data->body);
        $emailJob = (new SendEmailJob($toEmail,$messageBody,$emailsubject))->delay(Carbon::now()->addMinutes(1));
          dispatch($emailJob);*/
                  echo json_encode(array("status" => "OK")); exit;
              } else {
                echo 0;
              }
              echo 'Success';
            } else if($txStatus=='FAILED' || $txStatus=='CANCELLED') {
              echo 0;
            } else if($txStatus=='PENDING') {
              echo 0;
            }
          } else {
            echo 0;
           // Reject this call
         }


    // echo json_encode(array("status"=>"OK"));
    exit;
  }




  public function login(Request $request)

  {


    $query = RegisterUser::where('email',$request->email);

    $query->orWhere(function ($query) use($request) {

              $query->where('mobile','!=',0);

              $query->where('mobile',$request->email);

            });

    $user = $query->first();

      if (is_null($user)) {

          return Response::json(["status" => STATUS_FAILURE,"message"=>"Please enter valid Email address and Password!"]);

      }

      $email_check = filter_var($request->email, FILTER_VALIDATE_EMAIL);

      if ($email_check != "") {

        $credentials = ["email"=>$request->email, "password"=>$request->password];

      } else {

        $credentials = ["email"=>$user->email, "password"=>$request->password];

      }

      // print_r($credentials);die;

      $token = auth()->attempt($credentials);

      // print_r($token);die;

      if ($token == "") {

        $status = 0;

      return Response::json(["status" => STATUS_FAILURE,"message"=>"Please enter valid Email address and Password."]);

      }

      $randum = rand(1000,9999);

      $custom_token = $user->id.$randum;



      if (isset($request->deviceId)) {

        $deviceId = $request->deviceId;

        $user->deviceId = $deviceId;

      }

      if (isset($request->fcmToken)) {

        $fcmToken = $request->fcmToken;

        $user->fcmToken = $fcmToken;

      }





      $user->jwt_token = $token;

      $user->custom_user_token = $custom_token;

      $user->save();
      Helpers::update_user_token($user->id,$token);



      $app_ids = AndroidAppId::create([

        'userid' => $user->id,

        'appkey' => $request->fcmToken != "" ? $fcmToken : ""

      ]);

      $app_ids->save();

      return Response::json(["status" => STATUS_SUCCESS,"message"=>"Successfully logged in.","result"=> new LoginResource($user)]);





      // return Response::json(["status" => STATUS_SUCCESS, "message" => "Authorized","result" => [

      //   'jwt_token' => $user->jwt_token,

      //   "user_id" => $user->id,

      //   "custom_user_token" => $user->custom_user_token,

      //   "user_id"=>$user->id,

      //   "custom_user_token"=>$user->custom_user_token,

      //   "fcmToken"=> $user->fcmToken,

      //   "mobile"=>$user->mobile,

      //   "refercode"=>$user->refercode,

      //   "username"=>$user->username,

      //   "email"=>$user->email,

      //   "device_id"=>"",

      //   "dob"=>$user->dob,

      //   "gender"=>$user->gender,

      //   "address"=>$user->address,

      //   "city"=>$user->city,

      //   "pincode"=>$user->pincode,

      //   "email_verify"=>$user->email_verify,

      //   "team"=>$user->team,

      //   "mobile_verify"=>$user->mobile_verify,

      //   "bank_verify"=>$user->bank_verify,

      //   "pan_verify"=>$user->pan_verify,

      //   "team"=>$user->team,

      //   "refercode"=>$user->refercode  ]]);



  }

    public function login_new(Request $request){

  //     $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
  //
  // $txt = json_encode($request->all())."John Doe\n";
  //
  // fwrite($myfile, $txt);
  // echo "Team not exist";
  //     exit;
      $input_type = "email";
    $resultData = [];
    if(isset($request->type)){
      $input_type = $request->type;
    }



    if($input_type == 'mobile'){
          $query = RegisterUser::where(function ($query) use($request) {

                    $query->where('mobile','!=',0);

                    $query->where('mobile',$request->email);

                  });
    }else{
          $query = RegisterUser::where('email',$request->email);
    }


      $user = $query->first();

        if (is_null($user)) {
          if($input_type == 'mobile'){
                        return Response::json(["status" => STATUS_FAILURE,"message"=>"Please enter valid Mobile number!" , "is_mobile"=>0]);
          }else{
                      return Response::json(["status" => STATUS_FAILURE,"message"=>"Please enter valid Email address and Password!" , "is_mobile"=>0]);
          }


        }
        $fcmToken = $request->fcmToken;
        $isMobileAuthentication = 0;
        $phonNumber = 0;
        $resultData['mobile'] = $user->mobile;
if($input_type == 'email'){
        $email_check = filter_var($request->email, FILTER_VALIDATE_EMAIL);

        if ($email_check != "") {

          $credentials = ["email"=>$request->email, "password"=>$request->password];

        } else {

          $credentials = ["email"=>$user->email, "password"=>$request->password];

        }

        // print_r($credentials);die;

        $token = auth()->attempt($credentials);

        // print_r($token);die;

        if ($token == "") {

          $status = 0;

        return Response::json(["status" => STATUS_FAILURE,"message"=>"Please enter valid Email address and Password." , "is_mobile"=>0]);

        }

        $randum = rand(1000,9999);

        $custom_token = $user->id.$randum;



        if (isset($request->deviceId)) {

          $deviceId = $request->deviceId;

          $user->deviceId = $deviceId;

        }

        if (isset($request->fcmToken)) {
        //   $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
        // //
        // // $txt = json_encode($request->all())."John Doe\n";
        // //
        // fwrite($myfile, $txt);
        // echo "Team not exist";
        //     exit;
          $fcmToken = $request->fcmToken;

          $user->fcmToken = $fcmToken;

        }





        $user->jwt_token = $token;

        $user->custom_user_token = $custom_token;

        $user->save();
        Helpers::update_user_token($user->id,$token);


        $app_ids = AndroidAppId::create([

          'userid' => $user->id,

          'appkey' => $request->fcmToken != "" ? $fcmToken : ""

        ]);

        $app_ids->save();

$phonNumber = $user->mobile;
  $resultData['mobile'] = $user->mobile;
if(!empty($user->mobile)){
  $rand2 = rand(100000,999999);

  $code = $rand2;
// $code = "123456";
  // if($user->id == 989595){
  //   $code = 123456;
  // }


  // FOR IOS TESTER
      if($user->mobile == 8286998785){
        $code = 828699;
      }

      if($user->mobile == 9509413158){
        $code = 123456;
      }
  // $txtmsg='Dear Fanline11 user Your Verification code is: '.$code.'. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
  // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
  $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone.';

  $txtmsg_notify='Your Verification code is: '.$code;
  $titleget = 'Verification OTP!';

$upCode['code'] = $code;
DB::table('registerusers')->where('id' , $user->id)->update($upCode);

  Helpers::sendTextSmsNew($txtmsg,$user->mobile);
  $isMobileAuthentication = 1;


  $phonNumber = $user->mobile;
}


$resultData = new LoginResource($user);
$resultData['mobile'] = $user->mobile;
}else{

  $rand2 = rand(100000,999999);

  // $code = $rand2;
  $code = "123456";
  //
  // if($user->id == 989595){
  //   $code = 123456;
  // }
// FOR IOS TESTER
    if($user->mobile == 8286998785){
      $code = 828699;
    }
  // $txtmsg='Dear Fanline11 user Your Verification code is: '.$code.'. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
  // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
  $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone.';

  $txtmsg_notify='Your Verification code is: '.$code;
  $titleget = 'Verification OTP!';

$upCode['code'] = $code;
$upCode['fcmToken'] = $request->fcmToken;

$app_ids = AndroidAppId::create([

  'userid' => $user->id,

  'appkey' => $request->fcmToken != "" ? $request->fcmToken : ""

]);
$app_ids->save();

DB::table('registerusers')->where('id' , $user->id)->update($upCode);


$phonNumber = $user->mobile;
$resultData['mobile'] = $user->mobile;
  Helpers::sendTextSmsNew($txtmsg,$request->email);

$resultData['user_id'] = $user->id;
}

$isMobile = 0;
$succesMsg = "Successfully logged in.";

$ip_address=self::getUserIpAddr();
$user_los_array=array(
  "user_id"=>$user->id,
  "user_ip_address"=>$ip_address,
  "user_type"=>"Form Login",
);
  DB::table('user_logs')->insert($user_los_array);


if($input_type == 'mobile'){
  $isMobile = 1;
  $succesMsg = "Otp Sent Successfully";
  $resultData = array();
  $resultData['mobile_verify'] = $user->mobile_verify;
  $resultData['user_id'] = $user->id;
  $resultData['mobile'] = $user->mobile;
}

if($isMobileAuthentication == 1){
  $isMobile = 1;
  $succesMsg = "Otp Sent Successfully";
// $resultData = array();
}

// isMobile // flutter
// is_mobile // android
        return Response::json(["status" => STATUS_SUCCESS,"message"=>$succesMsg, "isMobile"=>$isMobile, "is_mobile"=>$isMobile, "result"=>$resultData, 'number'=>$phonNumber]);



        // return Response::json(["status" => STATUS_SUCCESS, "message" => "Authorized","result" => [

        //   'jwt_token' => $user->jwt_token,

        //   "user_id" => $user->id,

        //   "custom_user_token" => $user->custom_user_token,

        //   "user_id"=>$user->id,

        //   "custom_user_token"=>$user->custom_user_token,

        //   "fcmToken"=> $user->fcmToken,

        //   "mobile"=>$user->mobile,

        //   "refercode"=>$user->refercode,

        //   "username"=>$user->username,

        //   "email"=>$user->email,

        //   "device_id"=>"",

        //   "dob"=>$user->dob,

        //   "gender"=>$user->gender,

        //   "address"=>$user->address,

        //   "city"=>$user->city,

        //   "pincode"=>$user->pincode,

        //   "email_verify"=>$user->email_verify,

        //   "team"=>$user->team,

        //   "mobile_verify"=>$user->mobile_verify,

        //   "bank_verify"=>$user->bank_verify,

        //   "pan_verify"=>$user->pan_verify,

        //   "team"=>$user->team,

        //   "refercode"=>$user->refercode  ]]);



    }



          public function verifyOtpOnLogin(Request $request) {

             $this->validate($request,[

              // 'mobile' => 'required',

              'otp' => 'required',

              'user_id' => 'required'

            ]);

            $user_id = $request->user_id;
            $otp = $request->otp;
            $user = RegisterUser::where('id',$request->user_id)->first();

            if ($user->code == $request->otp) {
            // if (123456 == $request->otp) {
                $user->mobile_verify = 1;
                $user->save();
                $user_info_return =  RegisterUser::orderBY('id','DESC')->where('id',$request->user_id)->first();
               $token=JWTAuth::fromUser($user_info_return);
               $user_info_return->jwt_token = $token;
               $user_info_return->save();
               Helpers::update_user_token($request->user_id,$token);
               return Response::json(["status" => STATUS_SUCCESS,"message" => "Loggedin Successfully.", "result"=> new LoginResource($user_info_return)]);  die;
            } else {
              return Response::json(["status" => STATUS_FAILURE,"message" => "Please Enter Correct Otp."]);  die;
            }

          }

     public function register(Request $request) {

        $this->validate($request, [

        'email' => 'required|string|email|max:255',

        'mobile' => 'required|max:10|min:10',

        'password' => 'required|string|min:4',

         ]);

     //////////      TO CHECK LIMIT TO SEND MAXIMUM OTP    /////////////////////////
     $otp = Otp::where('mobile',$request->mobile)->first();
     if (!empty($otp)) {
       if ($otp->count >= OTP_MAX_LIMIT) {
         return Response::json(["status" => STATUS_FAILURE,"message"=> "You have reached maximum limit to send otp on your mobile!"]);die;
       } else {
        $otp_count = $otp->count;
        $otp->count = $otp_count + 1;
        $otp->save();
       }
     } else {
        Otp::create([
          'mobile' => $request->mobile,
          'count'  => 0
        ]);
     }

      $query = RegisterUser::where(function($query) use($request) {

            $query->where('email',$request->email);

          })->orWhere(function($query) use($request) {

            $query->where('mobile',$request->mobile);

          });

         $query_data = $query->first();



         if(!is_null($query_data) || !empty($query_data))

         {

           return Response::json(["status"=> STATUS_FAILURE,"message"=>"User already exists!"]);

           die;

         }

    $dob = isset($request->dob) ? $request->dob : '';

    $email = $request->email;

    $rand=rand(1000000,9999999);



    $activation_status = 'activated';
    $newmailaddress = $request->email;
    $refer_code_making = strtoupper(str_replace('@', '',str_replace('.', '', substr($newmailaddress,0,5)))).$rand;

    if(!empty($request->refer_code)){

      $finduser = RegisterUser::where('refercode',$request->refer_code)->first();


    } else {

      $finduser = "";

    }

    if($finduser == ""){

        $refer_id_register = "";

        $refer_id_balance = "";

    } else {

        $balance_in_referer = UserBalance::where('user_id',$finduser->id)->first();

        if (!is_null($balance_in_referer)) {

          // $balance_in_referer->balance += REFERAL_BONUS_AMOUNT;

          // $balance_in_referer->refer_id = $finduser->id;

          // $balance_in_referer->save();

        }



        $refer_id_register = $finduser->id;

        $refer_id_balance = $finduser->id;

    }



    $rand2 = rand(100000,999999);

    // $code = $rand2;

    $code = "123456";

    $deviceId = $request->deviceId;

    $fcmToken = $request->fcmToken;

    RegisterUserTemp::create([

      'email' => $request->email,

      'password' => Hash::make($request->password),
      'pass_token' => $request->password,

      'mobile' => $request->mobile,

      'activation_status' => $activation_status,

      'device_id' => $deviceId,

      'fcmToken'  => $fcmToken,

      'refercode' => $refer_code_making,

      'refer_id'  => isset($finduser->id) ? $finduser->id : 0,

        'code'    => $code,

        'dob'     => $dob

      ]);





    $find_user = RegisterUserTemp::where('email',$request->email)->orderBy('id','DESC')->first();
    // if (!empty($finduser)) {
    //     $scratch = new ScratchCard();

    //     $scratch->refercode = $request->refer_code;
    //     $scratch->user_id = $find_user->id;
    //     $scratch->active = 1;
    //     $scratch->refer_id = $finduser->id;
    //     $scratch->is_scratched = 0;
    //     $scratch->save();
    // }



    $user_id = $find_user->id;


    $balance_bls = 0;

    $balance_wng = 0;

    $balance_bns = 0;

    // UserBalance::create([

    //   'user_id' => $user_id,

    //   'refer_id' => $refer_id_balance,

    //   'balance' => $balance_bls,

    //   'winning' => $balance_wng,

    //   'bonus' => $balance_bns

    // ]);

    $user_info_return = RegisterUserTemp::where('email',$request->email)->orderBy('id','DESC')->first();

    $randum = rand(100000,999999);

    $custom_token = $user_id.$randum;

    $user_info_return->custom_user_token = $custom_token;

    // $txtmsg='Dear Fanline11 user Your Verification code is: '.$code.'. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
    // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
    $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone.';

    $txtmsg_notify='Your Verification code is: '.$code;
    $titleget = 'Verification OTP!';
    Helpers::sendnotification_sms_fix($titleget,$txtmsg,'',$fcmToken);




    Helpers::sendTextSmsNew($txtmsg,$request->mobile);

    MailController::sendVerificationMailOnRegister($request->email);

    return Response::json(["status" => STATUS_SUCCESS,"message"=>REGISTERED_SUCCESS_MESSAGE,"result"=> new LoginResource($user_info_return)]);  die;

    }

    public function register_new(Request $request) {
      // print_r("here");exit;

       $this->validate($request, [

       'email' => 'required|string|email|max:255',

       'mobile' => 'required|max:10|min:10',

       'password' => 'required|string|min:4',

        ]);

    //////////      TO CHECK LIMIT TO SEND MAXIMUM OTP    /////////////////////////
    $otp = Otp::where('mobile',$request->mobile)->first();
    if (!empty($otp)) {
      if ($otp->count >= OTP_MAX_LIMIT) {
        return Response::json(["status" => STATUS_FAILURE,"message"=> "You have reached maximum limit to send otp on your mobile!"]);die;
      } else {
       $otp_count = $otp->count;
       $otp->count = $otp_count + 1;
       $otp->save();
      }
    } else {
       Otp::create([
         'mobile' => $request->mobile,
         'count'  => 0
       ]);
    }

     $query = RegisterUser::where(function($query) use($request) {

           $query->where('email',$request->email);

         })->orWhere(function($query) use($request) {

           $query->where('mobile',$request->mobile);

         });

        $query_data = $query->first();



        if(!is_null($query_data) || !empty($query_data))

        {

          return Response::json(["status"=> STATUS_FAILURE,"message"=>"User already exists!"]);

          die;

        }

    $dob = isset($request->dob) ? $request->dob : '';

    $email = $request->email;

    $rand=rand(1000000,9999999);


    $activation_status = 'activated';
    $newmailaddress = $request->email;
    $refer_code_making = strtoupper(str_replace('@', '',str_replace('.', '', substr($newmailaddress,0,5)))).$rand;

    if(!empty($request->refer_code)){

     $finduser = RegisterUser::where('refercode',$request->refer_code)->first();


    } else {

     $finduser = "";

    }

    if($finduser == ""){

       $refer_id_register = "";

       $refer_id_balance = "";

    } else {

       $balance_in_referer = UserBalance::where('user_id',$finduser->id)->first();

       if (!is_null($balance_in_referer)) {

         // $balance_in_referer->balance += REFERAL_BONUS_AMOUNT;

         // $balance_in_referer->refer_id = $finduser->id;

         // $balance_in_referer->save();

       }



       $refer_id_register = $finduser->id;

       $refer_id_balance = $finduser->id;

    }



    $rand2 = rand(100000,999999);

    // $code = $rand2;
    $code = "123456";

// FOR IOS TESTER
    if($request->mobile == 8286998785){
      $code = 828699;
    }

    $emailotp_rand = rand(100000,999999);

    // $email_code = $emailotp_rand;
     $email_code = "123456";
     // $email_code = $emailotp_rand;


    $deviceId = $request->deviceId;

    $fcmToken = $request->fcmToken;

    RegisterUserTemp::create([

     'email' => $request->email,

     'password' => Hash::make($request->password),
     'pass_token' => $request->password,
     'mobile' => $request->mobile,

     'activation_status' => $activation_status,

     'device_id' => $deviceId,

     'fcmToken'  => $fcmToken,

     'refercode' => $refer_code_making,

     'refer_id'  => isset($finduser->id) ? $finduser->id : 0,

       'code'    => $code,
    'email_code' => $email_code,
       'dob'     => $dob

     ]);



    $find_user = RegisterUserTemp::where('email',$request->email)->orderBy('id','DESC')->first();
    // if (!empty($finduser)) {
    //     $scratch = new ScratchCard();

    //     $scratch->refercode = $request->refer_code;
    //     $scratch->user_id = $find_user->id;
    //     $scratch->active = 1;
    //     $scratch->refer_id = $finduser->id;
    //     $scratch->is_scratched = 0;
    //     $scratch->save();
    // }



    $user_id = $find_user->id;

    $balance_bls = 0;

    $balance_wng = 0;

    $balance_bns = 0;

    // UserBalance::create([

    //   'user_id' => $user_id,

    //   'refer_id' => $refer_id_balance,

    //   'balance' => $balance_bls,

    //   'winning' => $balance_wng,

    //   'bonus' => $balance_bns

    // ]);

    $user_info_return = RegisterUserTemp::where('email',$request->email)->orderBy('id','DESC')->first();

    $randum = rand(100000,999999);

    $custom_token = $user_id.$randum;

    $user_info_return->custom_user_token = $custom_token;

    // $txtmsg='Dear Fanline11 user Your Verification code is: '.$code.'. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;

// $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;

$txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$code.'. Never share it with anyone.';
// $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: XXXXXX. Never share it with anyone.';

    $txtmsg_notify='Your Verification code is: '.$code;
    $titleget = 'Verification OTP!';
    // Helpers::sendnotification_sms_fix($titleget,$txtmsg,'',$fcmToken);

// print_r($request->email);exit;
    MailController::sendVerificationMailOnRegisterOTP($request->email,$email_code);
    Helpers::sendTextSmsNew($txtmsg,$request->mobile);

    // MailController::sendVerificationMailOnRegister($request->email);

    return Response::json(["status" => STATUS_SUCCESS,"message"=>REGISTERED_SUCCESS_MESSAGE,"result"=> new LoginResource($user_info_return)]);  die;

    }

    public function deleteAccount(Request $request){

            $this->validate($request,[
              'user_id' => 'required'
            ]);
            $userid = $request->user_id;
            $upData['activation_status'] = "deactivated";
             DB::table('registerusers')->where('id' , $userid)->update($upData);
                          return Response::json(["status" => STATUS_SUCCESS,"message"=> 'Account Deleted']);

            die;

          }


    public function forgetUser(Request $request){

    $this->validate($request,[

      'email' => 'required'

    ]);

    $email = $request->email;

    $findlogin = RegisterUser::where('email',$email)->first();

    if(!empty($findlogin)){

      $findToken = RegisterUser::where('email',$email)->select('remember_token')->first();



      //   if($findOTP->code == ""  || $findOTP->code == "0"){

      //     $data['code'] = rand(1000,9999);

      //     $user = RegisterUser::where('id',$findlogin->id)->first();

      //     $user->code = $data['code'];

      //     $user->save();

      // }else{

      //     $data['code'] = $findOTP->code;

      // }



      // if($findOTP->mobile != "0"){

      //     $message = "Dear Challenger \r\n";

      //     $message.= "Please use OTP ".$data['code']." to change your password. \r\n ";

      //     Helpers::sendTextSmsNew($message,$findOTP->mobile);

      // }else{}



          $email = $email;

          $emailsubject = 'Reset Password - FANLINE11.co.in';

          $content='<p><strong>Hello </strong></p>';

          $content.='<p>Please use this link now<strong>'."http://FANLINE11.com/new_api/fp11/password/reset/".$findToken->remember_token.'</strong> to change your password.</p>';

          $msg = Helpers::mailheader();

          $msg.= Helpers::mailbody($content);

          $msg.= Helpers::mailfooter();

          $datamessage['email'] = $email;

          $datamessage['subject'] = $emailsubject;

          $datamessage['content'] = $msg;

          // Helpers::mailsentFormat($email,$emailsubject,$msg);

          // Helpers::mailSmtpSend($datamessage);



        //send mail

        // require 'vendor/autoload.php';

        //  $emailGrid = new \SendGrid\Mail\Mail();

        //  $emailGrid->setFrom("info@FANLINE11.co.in", "FANLINE11");

        //  $emailGrid->setSubject($emailsubject);

        //  $emailGrid->addTo($email, "Example User");

        //  $emailGrid->addContent(

        //   "text/html", $msg

        //  );

        //  $sendgrid = new \SendGrid(getenv('SENDGRID_API_KEY'));



        // try {



        //    $response = $sendgrid->send($emailGrid);



        // } catch (Exception $e) {

        //   //error message

        // }



      // echo json_encode(array('token' => $findlogin->id));

      // die;

      return Response::Json(["status" => STATUS_SUCCESS,  "result" => [ "token" => $findlogin->id ]]);

      die;

    }else{

      return Response::Json(["status" => STATUS_SUCCESS, "result" => [ "token" => "Nothing" ]]);

    }

  }



 /* public function sendGridMail(){

         require 'vendor/autoload.php';

         $email = new \SendGrid\Mail\Mail();

         $email->setFrom("neeraj.img@gmail.com", "Neeraj Rajput");

         $email->setSubject("Sending with SendGrid is Fun");

         $email->addTo("rohit19.img@gmail.com", "Rohit Lalwani");



         $email->addContent("text/plain", "and easy to do anywhere, even with PHP");

        //   $email->addContent("text/html", "<strong>and easy to do anywhere, even with PHP</strong>");

          $sendgrid = new \SendGrid(getenv('SENDGRID_API_KEY'));





           try {

             $response = $sendgrid->send($email);

            echo 'sent';

            return Response::json(["status" => STATUS_SUCCESS,"message"=>"sent","result"=>"sent"]);

           } catch (Exception $e) {

            return Response::json(["status" => STATUS_SUCCESS,"message"=>"exeption","result"=>["Caught exception: "=> print_r($e->getMessage())]]);

          }

          die;

    } */



    public function getOffersAndroid_old_v1(Request $request){

      $version = AndroidVersion::first()->version;

      $findoffers = Advertisement::orderBY('sort','DESC')->where('type','!=','popup')->get();

       $unseen_noti = Notification::where('seen', 0)->where('userid',$request->user_id)->first();
      $noti = 0;
      if (!empty($unseen_noti)) {
        $noti = 1;
      } else {
        $noti = 0;
      }

      $Json=array();

      $url = BANNER_DIRECTORY_URL;

      if(!$findoffers->isEmpty()){

        $i=0;

        foreach($findoffers as $post){

          $Json[$i]['id'] = $post->id;

          $Json[$i]['title'] = '';

          if (is_null($post->url)) {

            $Json[$i]['link'] = "";

          } else {

            $Json[$i]['link'] = $post->url;

          }



          $Json[$i]['image'] = $url.$post->image;
          $Json[$i]['type'] = $post->type;
          $Json[$i]['offer_code'] = $post->offer_code;

          $i++;

        }

      }

      $popup_status = 0;
      $popup_image = "";
      $popupBannerList = Advertisement::orderBY('id','DESC')->where('type','=','popup')->first();
      if(!empty($popupBannerList) && isset($popupBannerList)){
          if($popupBannerList->type == 'popup') {
            $popup_image = $url.$popupBannerList->image;
            $popup_status = 1;
          }
      }

      return Response::json([

        "status" => STATUS_SUCCESS,

        "version"=> (int)  $version,

        "app_download_url"=> APP_URL,

        "base_url" => BASE_URL,
        "notification" => $noti,

        "api_base_url" => API_BASE_URL,

        "version_code" => $version,
        "popup_status" => $popup_status,

        "popup_image" => $popup_image,
        "is_maintenance" => 0,

        "result"=>$Json]);

      die;

    }


    public function getOffersAndroid(Request $request){
      // echo date('Y-m-d H:i:s'); exit;
      $version = DB::table('androidversion')->first()->version;

      $settings = Cache::remember('settings',1, function(){
            $settings = DB::table('setting')->where('setting_key','LIVE_MATCHES')->first();
            return $settings;
        });



      // $findoffers = Advertisement::orderBY('sort','DESC')->where('type','!=','popup')->get();
        $findoffers = Cache::remember('banners',0, function(){
            $findoffers = DB::table('advertisments')->where('type','!=','popup')->get()->sortByDesc('sort');
            return $findoffers;
        });
        // exit;

       $unseen_noti = Notification::where('seen', 0)->where('userid',$request->user_id)->first();
      $noti = 0;
      if (!empty($unseen_noti)) {
        $noti = 1;
      } else {
        $noti = 0;
      }

$visible_sport_arr = array();

$object = new \stdClass();
$object->sport_name = "CRICKET";
$object->sport_key = "CRICKET";
array_push($visible_sport_arr ,$object);

$object = new \stdClass();
$object->sport_name = "LIVE";
$object->sport_key = "LIVE";
if($settings->value=='1') {

array_push($visible_sport_arr ,$object);
}

$object = new \stdClass();
$object->sport_name = "KABADDI";
$object->sport_key = "KABADDI";
array_push($visible_sport_arr ,$object);



$object = new \stdClass();
$object->sport_name = "FOOTBALL";
$object->sport_key = "FOOTBALL";
array_push($visible_sport_arr ,$object);

$object = new \stdClass();
$object->sport_name = "BASKETBALL";
$object->sport_key = "BASKETBALL";
array_push($visible_sport_arr ,$object);

$object = new \stdClass();
$object->sport_name = "BASEBALL";
$object->sport_key = "BASEBALL";
array_push($visible_sport_arr ,$object);

$object = new \stdClass();
$object->sport_name = "HANDBALL";
$object->sport_key = "HANDBALL";
array_push($visible_sport_arr ,$object);
/*if($request->user_id == 297150 || $request->user_id == 279907 || $request->user_id == 14 || $request->user_id == 12){
}*/
$object = new \stdClass();
$object->sport_name = "HOCKEY";
$object->sport_key = "HOCKEY";
array_push($visible_sport_arr ,$object);



      $Json=array();
      $popup_status = 0;
      $popup_image = "";
      $poupRedirect = 0;
      $popup_url = "";
      $popup_type = "";
      $popup_match_id = "";
      $popup_series_id = "";
      $popup_redirect_type = "";
      $popup_offer_code = "";
              $popup_match_details = array();
      $url = BANNER_DIRECTORY_URL;
// $url = "https://spaces.gameking11.com/uploads/banners/";
$url = "https://fanline11.sgp1.cdn.digitaloceanspaces.com/uploads/banners/";
// var_dump($findoffers);exit;
      if(!$findoffers->isEmpty()){

        $i=0;

        foreach($findoffers as $post){

          $Json[$i]['id'] = $post->id;

          $Json[$i]['title'] = '';

          if (is_null($post->url)) {

            $Json[$i]['link'] = "";

          } else {

            $Json[$i]['link'] = $post->url;

          }


if($post->type == 'home'){
  $post->type = "";
}
          $Json[$i]['image'] = $url.$post->image;
          $Json[$i]['type'] = $post->type;

          if($post->type == 'leaderboard'){
$Json[$i]['series_id'] = $post->matchid;
          }

if($post->type == 'match'){
  $currentdate = $this->getDateCommon();
  // Cache::forget('listmatches_exist_'.$post->matchid);
   $match_detail = Cache::remember('listmatches_exist_'.$post->matchid,10, function() use ($post){


  return $match_detail = DB::table('listmatches')->where('listmatches.id',$post->matchid)->first();

     });
    // if($post->id == 349){
    //   var_dump($match_detail);exit;
    // }
    //
    // if($post->id == 349){
    //   var_dump($match_detail);exit;
    //     // $match_detail = DB::table('listmatches')->where('listmatches.id',$post->matchid)->first();
    //   echo $post->matchid;
    //   var_dump($match_detail);exit;
    // }
  // $match_banner_id = $post->matchid;
  if(!empty($match_detail)){
if($match_detail->start_date >= $currentdate){
    $findmatch = Cache::remember('listmatches_'.$post->matchid,3, function() use ($post){
        $findmatch = DB::table('listmatches')->where('listmatches.id',$post->matchid)->join('series','listmatches.series','=','series.id')
        // ->leftJoin('match_playing11','match_playing11.match_key','=','listmatches.matchkey')
        ->join('teams as t1','t1.id','=','listmatches.team1')
        ->join('teams as t2','t2.id','=','listmatches.team2')
        ->select(DB::raw('"CRICKET" as sport_key,"" as player_ids'),'t1.logo as team1logo','t2.logo as team2logo','t1.short_name as team1key','t2.short_name as team2key','listmatches.id','listmatches.short_name','listmatches.series as seriesid','series.name as seriesname','listmatches.status','listmatches.name','listmatches.sport_type as sport_type','listmatches.team1display','listmatches.team2display','listmatches.start_date','series.name as seriesname','listmatches.start_date','listmatches.format','listmatches.matchkey','listmatches.final_status','listmatches.launch_status','t1.team as team1_name','t2.team as team2_name','listmatches.announcement','listmatches.toss' , 'listmatches.mega_contest_prize' , 'listmatches.team1_color_code' , 'listmatches.team2_color_code' , 'listmatches.banner_image')
        ->first();
        return $findmatch;
    });


        if(!empty($findmatch)){

if($findmatch->sport_type == 1){
$findmatch->sport_key = 'CRICKET';
}

if($findmatch->sport_type == 2){
$findmatch->sport_key = 'FOOTBALL';
}

if($findmatch->sport_type == 3){
$findmatch->sport_key = 'BASKETBALL';
}

if($findmatch->sport_type == 4){
$findmatch->sport_key = 'HANDBALL';
}

if($findmatch->sport_type == 5){
$findmatch->sport_key = 'BASEBALL';
}

if($findmatch->sport_type == 6){
$findmatch->sport_key = 'HOCKEY';
}

if($findmatch->sport_type == 7){
$findmatch->sport_key = 'KABADDI';
}
        $Json[$i]['match_details'] = new MatchListResource($findmatch);
}
}
}
}

          $Json[$i]['offer_code'] = $post->offer_code;

          $i++;

        }

      }

    // $popupBannerList = Cache::remember('popupBannerList',2, function(){
    //     $popupBannerList = DB::table('advertisments')->orderBY('id','DESC')->where('type','=','popup')->first();
    //     return $popupBannerList;
    // });
         $popupBannerList = DB::table('advertisments')->orderBY('id','DESC')->where('type','=','popup')->first();

      // print_r($popupBannerList);
      // die;
        $popup_offer_code ='';
      if(isset($popupBannerList) && !empty($popupBannerList))
      {
        $popup_offer_code = $popupBannerList->offer_code;
      }


      if(!empty($popupBannerList) && isset($popupBannerList)){
          if($popupBannerList->type == 'popup') {
            $popup_image = $url.$popupBannerList->image;
            $popup_url = $popupBannerList->url;
            $popup_type = $popupBannerList->type;
            if(!empty($popupBannerList->popup_redirect_type)){
$poupRedirect = 1;
              $popup_redirect_type = $popupBannerList->popup_redirect_type;
            }

            // $popup_redirect_type = 'match';
            if($popup_redirect_type == 'match'){

              $popup_match_id = $popupBannerList->matchid;

              $currentdate = $this->getDateCommon();
// $popup_match_id = 17846;
              $match_detail = Cache::remember('listmatches_exist_'.$popup_match_id,10, function() use ($popup_match_id){
                $match_detail = DB::table('listmatches')->where('listmatches.id',$popup_match_id)->first();
                return $match_detail;
                });
// var_dump($match_detail);exit;
$popup_redirect_type = "";
$poupRedirect = 0;
if(!empty($match_detail)){
            if($match_detail->start_date >= $currentdate){
                    $findmatch = Cache::remember('listmatches_'.$popup_match_id,3, function() use ($popup_match_id){
                        $findmatch = DB::table('listmatches')->where('listmatches.id',$popup_match_id)->join('series','listmatches.series','=','series.id')
                        // ->leftJoin('match_playing11','match_playing11.match_key','=','listmatches.matchkey')
                        ->join('teams as t1','t1.id','=','listmatches.team1')
                        ->join('teams as t2','t2.id','=','listmatches.team2')
                        ->select(DB::raw('"CRICKET" as sport_key, "" as player_ids'),'t1.logo as team1logo','t2.logo as team2logo','t1.short_name as team1key','t2.short_name as team2key','listmatches.id','listmatches.short_name','listmatches.series as seriesid','series.name as seriesname','listmatches.status','listmatches.name','listmatches.sport_type as sport_type','listmatches.team1display','listmatches.team2display','listmatches.start_date','series.name as seriesname','listmatches.start_date','listmatches.format','listmatches.matchkey','listmatches.final_status','listmatches.launch_status','t1.team as team1_name','t2.team as team2_name','listmatches.announcement','listmatches.toss' , 'listmatches.mega_contest_prize' , 'listmatches.team1_color_code' , 'listmatches.team2_color_code' , 'listmatches.banner_image')
                        ->first();
                        return $findmatch;
                });

                    if(!empty($findmatch)){
                      $popup_redirect_type = "match";
                      $poupRedirect = 1;

                      if($findmatch->sport_type == 1){
                      $findmatch->sport_key = 'CRICKET';
                      }

                      if($findmatch->sport_type == 2){
                      $findmatch->sport_key = 'FOOTBALL';
                      }

                      if($findmatch->sport_type == 3){
                      $findmatch->sport_key = 'BASKETBALL';
                      }

                      if($findmatch->sport_type == 4){
                      $findmatch->sport_key = 'HANDBALL';
                      }

                      if($findmatch->sport_type == 5){
                      $findmatch->sport_key = 'BASEBALL';
                      }

                      if($findmatch->sport_type == 6){
                      $findmatch->sport_key = 'HOCKEY';
                      }

                      if($findmatch->sport_type == 7){
                      $findmatch->sport_key = 'KABADDI';
                      }
                    $popup_match_details = new MatchListResource($findmatch);
            }
            }
}
            }

            if($popup_redirect_type == 'leaderboard'){

              $popup_series_id = $popupBannerList->matchid;
            }

            $popup_status = 1;
            if(!empty($popupBannerList->url)){
              $poupRedirect = 1;
            }

          }
      }

      $is_visible_affiliate = 0;
      $is_visible_promote = 0;
      $is_visible_promoter_requested = 0;
      // echo $request->user_id; exit;
            $check = DB::table('registerusers')
            ->leftJoin('promoter_details','promoter_details.user_id','=','registerusers.id')
            ->where('registerusers.id',$request->user_id)
            ->select('registerusers.is_yoububer','promoter_details.user_id','registerusers.state','registerusers.team','registerusers.refercode')->first();
            // echo "<pre>"; print_r($check); exit;

              if(@$check->is_yoububer==1)
              {
                $is_visible_affiliate = 1;
                $is_visible_promote = 0;
              }
              else
              {
                $is_visible_affiliate = 0;
                $is_visible_promote = 1;
              }


              if(isset($check->user_id) && !empty($check->user_id))
              {
                $is_visible_promoter_requested=1;
              }
              else
              {
                $is_visible_promoter_requested=0;
              }
      /*if($request->user_id==279907) {
         $version = 20;
       }*/

      // $userdetail = DB::table('registerusers')->where('id',$request->user_id)->first();

// $promoters = DB::table('promoter_leaderboard_users')->where('user_id', $request->user_id)->first();

$is_visible_promoter_leaderboard = 0;
if($is_visible_affiliate==1) {

$is_visible_promoter_leaderboard = 1;
}

// if(!$promoters->isEmpty()){

// if(in_array($request->user_id , $promoters->toArray())){
  // $is_visible_promoter_leaderboard = 1;
// }
// }
// $is_visible_affiliate = 1;
// $is_visible_promote = 1;
// $is_visible_promoter_leaderboard = 0;
$resopnseJson = array();

  $resopnseJson["status"] = STATUS_SUCCESS;
  $resopnseJson["is_visible_promoter_leaderboard"]=!empty($is_visible_promoter_leaderboard) ? $is_visible_promoter_leaderboard : 1;
  $resopnseJson["is_visible_affiliate"]=!empty($is_visible_affiliate) ? $is_visible_affiliate : 1;
  $resopnseJson["is_visible_promote"]=!empty($is_visible_promote) ? $is_visible_promote : 1;
  // $resopnseJson["is_visible_affiliate"]=$is_visible_affiliate;
  // $resopnseJson["is_visible_promote"]=$is_visible_promote;
  $resopnseJson["is_visible_promoter_requested"]=!empty($is_visible_promoter_requested) ? $is_visible_promoter_requested : 0;
   $resopnseJson["version"]= (int) $version;
   // $resopnseJson["version"]= 0;
  $resopnseJson["version_changes"]= '<b>UI Enhancement:</b><br>We have updated our UI to provide a better user experience. Now, navigate all the pages with ease. <br><b>App performance:</b><br>To make your fantasy sports playing experience better, we have improved our overall application performance. Now, play with advanced features and better UI and UX.<br><br>If you face any issue please download it from https://fanline11.rglabs.net/';


  // $resopnseJson["app_download_url"]= APP_URL;
  //$resopnseJson["app_download_url"]= 'https://fanline11.rglabs.net/download/'.$check->refercode; // TO DO : Need to change before android update!
  $resopnseJson["app_download_url"]= APP_URL; // TO DO : Need to change before android update!
  $resopnseJson["state"]=!empty($check->state) ? $check->state : '';
  $resopnseJson["team"]=$check->team;
  // $resopnseJson["refer_url"]="https://fanline11.rglabs.net/download";
  // $resopnseJson["refer_url"]='https://fanline11.rglabs.net/download/'.$check->refercode;
  $resopnseJson["refer_url"]='https://fanline11.rglabs.net/download/';
  // $resopnseJson["refer_url"]='https://fanline11.rglabs.net/download/';
  $resopnseJson["base_url"] = BASE_URL;
  $resopnseJson["notification"] = $noti;

  $resopnseJson["apk_url"] = APP_URL;
  $resopnseJson["api_base_url"] = API_BASE_URL;

  $resopnseJson["version_code"] = $version;
  // $resopnseJson["version_code"] = $version;
  $resopnseJson["popup_status"] = $popup_status;
  $resopnseJson["is_popup_redirect"] = $poupRedirect;
  $resopnseJson["popup_link"] = $popup_url;
  $resopnseJson["popup_image"] = $popup_image;
  $resopnseJson["popup_redirect_type"]=$popup_redirect_type;
  $resopnseJson["popup_type"]=$popup_type;
  $resopnseJson["popup_offer_code"]=$popup_offer_code;
  if($popup_redirect_type == 'match'){
    $resopnseJson["match_details"]=$popup_match_details;
  }
  if($popup_redirect_type == 'leaderboard'){
  $resopnseJson["popup_series_id"]=$popup_series_id;
  }

  $resopnseJson["is_maintenance"] = 0;
  $resopnseJson["visible_sports"]=$visible_sport_arr;
  $resopnseJson["poup_time"]=6;
  $resopnseJson["result"]=$Json;
      return Response::json($resopnseJson);

      die;

    }



    public function total_match_play($user_id) {

    $total = JoinedLeague::join('listmatches','joinedleauges.matchkey','=','listmatches.matchkey')->join('matchchallenges','joinedleauges.challengeid','=','matchchallenges.id')->where('matchchallenges.status','!=','canceled')->where('userid', $user_id)->groupBy('joinedleauges.matchkey')->get();

    return count($total);

    }

    public function total_league_play($user_id) {

    $total = JoinedLeague::join('matchchallenges','joinedleauges.challengeid','=','matchchallenges.id')->where('matchchallenges.status','!=','canceled')->where('userid', $user_id)->groupBy('challengeid')->get();

    return count($total);

    }

    public function total_contest_win($user_id) {

      $total = FinalResult::where('userid', $user_id)->groupBy('challengeid')->get();

      return count($total);

    }

    public function total_winning($user_id) {

      $total = FinalResult::where('userid', $user_id)->sum('amount');

      return $total;

    }



    public function getMatchListUpgrade (Request $request) {

      $geturl = BASE_URL;

      $aftertime = Carbon::now()->addDays(15);

      $beforetime = Carbon::now()->subDays(15);

      $locktime = Carbon::now()->addMinutes(0);

      $query = DB::table('listmatches');

      if(!empty($request->series)){

        $series = $request->series;

        $query->where('listmatches.series',$series);

      }

      $matchshow = 0;

      $finduserinfo = 'temp';

      $findmatches = $query->leftjoin('series','listmatches.series','=','series.id')

      ->join('teams as t1','t1.id','=','listmatches.team1')

      ->join('teams as t2','t2.id','=','listmatches.team2')

      ->select('listmatches.id','listmatches.name','listmatches.format','listmatches.series','t1.logo as team1logo','t2.logo as team2logo','t1.short_name as team1name','t2.short_name as team2name','listmatches.id as listmatchid','listmatches.series as seriesid','series.name as seriesname','listmatches.matchkey','listmatches.match_status_key','listmatches.final_status as winnerstatus','listmatches.start_date as time_start','listmatches.start_date','listmatches.name','listmatches.format','listmatches.matchkey','listmatches.final_status','listmatches.launch_status',

        DB::raw("(CASE WHEN t1.logo != '' THEN  CONCAT(TEAMS_DIRECTORY,t1.logo) ELSE DEFAULT_TEAM_IMAGE END AS team1logo"),

        DB::raw("(CASE WHEN t2.logo != '' THEN  CONCAT(TEAMS_DIRECTORY,t2.logo) ELSE DEFAULT_TEAM_IMAGE END) AS team2logo"),

        DB::raw("(CASE WHEN listmatches.start_date <= '$locktime' THEN 'closed' ELSE OPENED END) AS matchopenstatus"),

        DB::raw("(CASE WHEN $matchshow = 1 THEN 'NOTUSING' ELSE 'NOTUSING' END) AS matchindexing"),

        DB::raw("(CASE WHEN t1.short_name != '' THEN UCASE(t1.short_name) ELSE '' END) AS team1name"),

        DB::raw("(CASE WHEN t2.short_name != '' THEN UCASE(t2.short_name) ELSE '' END) AS team2name")

      )

      ->Where('listmatches.series','!=','0')

      ->orderBY('listmatches.start_date','desc')

      ->where('series.series_status',OPENED)

      ->get();

      //  $findmatches = Cache::remember('users', 1, function () use($query,$geturl,$locktime,$matchshow) {

      //  return $query->leftjoin('series','listmatches.series','=','series.id')

      // ->join('teams as t1','t1.id','=','listmatches.team1')

      // ->join('teams as t2','t2.id','=','listmatches.team2')

      // ->select('listmatches.id','listmatches.name','listmatches.format','listmatches.series','t1.logo as team1logo','t2.logo as team2logo','t1.short_name as team1name','t2.short_name as team2name','listmatches.id as listmatchid','listmatches.series as seriesid','series.name as seriesname','listmatches.matchkey','listmatches.match_status_key','listmatches.final_status as winnerstatus','listmatches.start_date as time_start','listmatches.name','listmatches.format','listmatches.matchkey','listmatches.final_status','listmatches.launch_status',

      //   DB::raw("(CASE WHEN t1.logo != '' THEN  CONCAT('$geturl','uploads/teams/',t1.logo) ELSE CONCAT('$geturl','uploads/teams/batball-team-India-730.jpg') END) AS team1logo"),

      //   DB::raw("(CASE WHEN t2.logo != '' THEN  CONCAT('$geturl','uploads/teams/',t2.logo) ELSE CONCAT('$geturl','uploads/teams/batball-team-India-730.jpg') END) AS team2logo"),

      //   DB::raw("(CASE WHEN listmatches.start_date <= '$locktime' THEN 'closed' ELSE OPENED END) AS matchopenstatus"),

      //   DB::raw("(CASE WHEN $matchshow = 1 THEN 'NOTUSING' ELSE 'NOTUSING' END) AS matchindexing")

      // )

      // ->Where('listmatches.series','!=','0')

      // ->orderBY('listmatches.start_date','desc')

      // ->where('series.series_status',OPENED)

      // ->get();

      //  });





      return Response::json(["status" => STATUS_SUCCESS,"result"=>$findmatches]);

      die;

  }

    public function getMatchList_old_v1(Request $request){

      date_default_timezone_set("Asia/Kolkata");

      $geturl = BASE_URL;

      $aftertime = Carbon::now()->addDays(15);

      $beforetime = Carbon::now()->subDays(15);

      $locktime = Carbon::now()->addMinutes(0);

      $date = $this->getDateCommon();

       $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
       // echo $sport_key; exit;
       $sport_key_arr = explode(',', $sport_key);
      $sportType = DB::table('sport_types')->whereIn('sport_key',$sport_key_arr)->get();
      $sportType_arr = json_decode(json_encode($sportType));
       $all_sport_keys = array_column($sportType_arr, 'id');
       // print_r($all_sport_keys); exit;
      $query = DB::table('listmatches');


    $findmatches = $query->leftjoin('series','listmatches.series','=','series.id')

    ->leftJoin('match_playing11','match_playing11.match_key','=','listmatches.matchkey')

    ->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'t1.logo as team1logo','match_playing11.player_ids','t2.logo as team2logo','t1.short_name as team1key','t2.short_name as team2key','listmatches.id','listmatches.short_name','listmatches.series as seriesid','series.name as seriesname','listmatches.status','listmatches.name','listmatches.sport_type','listmatches.team1display','listmatches.team2display','listmatches.start_date','series.name as seriesname','listmatches.start_date','listmatches.format','listmatches.matchkey','listmatches.final_status','listmatches.launch_status','t1.team as team1_name','t2.team as team2_name','listmatches.announcement','listmatches.toss' , 'listmatches.mega_contest_prize' , 'listmatches.team1_color_code' , 'listmatches.team2_color_code' , 'listmatches.banner_image')
    ->where('listmatches.start_date','>',$locktime)
    ->where(function($q) {
          $q->where('listmatches.launch_status', 'launched')
            ->orWhere('listmatches.is_release', 1);
      })
    ->whereIn('listmatches.sport_type',$all_sport_keys)
    ->where('listmatches.series','!=','0')
    ->where('series.series_status',OPENED)
      ->groupBy('listmatches.matchkey')
      ->orderBY('listmatches.sort','ASC')
      ->orderBY('listmatches.start_date','ASC')
      ->take(20)->get();

      return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findmatches)]);die;

    }


    public function getMatchList_old_v2(Request $request){

      date_default_timezone_set("Asia/Kolkata");

      $geturl = BASE_URL;

      $aftertime = Carbon::now()->addDays(15);

      $beforetime = Carbon::now()->subDays(15);

      $locktime = Carbon::now()->addMinutes(0);

      $date = $this->getDateCommon();

       $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);

       if($sport_key=='LIVE'){
        $sport_key_arr = explode(',', 'CRICKET');
      }else{
        $sport_key_arr = explode(',', $sport_key);
      }
      $sportType = DB::table('sport_types')->whereIn('sport_key',$sport_key_arr)->get();
      $sportType_arr = json_decode(json_encode($sportType));
       $all_sport_keys = array_column($sportType_arr, 'id');


      if($sport_key=='LIVE'){
         $query = DB::table('listmatches');

         $findmatches = $query->leftjoin('series','listmatches.series','=','series.id')->leftJoin('match_playing11','match_playing11.match_key','=','listmatches.matchkey')->join('teams as t1','t1.id','=','listmatches.team1')
         ->join('teams as t2','t2.id','=','listmatches.team2')
         ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'t1.logo as team1logo','match_playing11.player_ids','t2.logo as team2logo','t1.short_name as team1key',
         't2.short_name as team2key',
         'listmatches.id','listmatches.short_name','listmatches.series as seriesid','series.name as seriesname','listmatches.status','listmatches.name','listmatches.sport_type',
         'listmatches.team1display','listmatches.team2display',
         'listmatches.livefantasy_start_date as start_date','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.format','listmatches.matchkey as matchkey','listmatches.final_status','listmatches.launch_status','t1.team as team1_name','t2.team as team2_name','listmatches.live_fantasy_announcement as announcement','listmatches.toss'  , 'listmatches.team1_color_code' , 'listmatches.team2_color_code' , 'listmatches.banner_image','listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.second_inning as secondinning')
       ->where('listmatches.livefantasy_start_date','>',$locktime)
       ->where(function($q) {
             $q->where('listmatches.launch_status', 'launched')
               ->orWhere('listmatches.is_release', 1);
         })
       ->whereIn('listmatches.sport_type',$all_sport_keys)
       ->where('listmatches.series','!=','0')
       ->where('series.series_status',OPENED)
       ->where('is_live_fantasy_enable',1)
         ->groupBy('listmatches.matchkey')
         ->orderBY('listmatches.sort','ASC')
         ->orderBY('listmatches.livefantasy_start_date','ASC')
         ->take(20)->get();
         foreach ($findmatches as $key => $value) {

           // if($request->user_id == 279907  || $request->user_id == 14){
           //   $findmatches[$key]->start_date = '2021-06-25';
           // }
           $slotesData=[];
           $sloteId_arr = DB::table('matches_livefantasy_slotesmaster')->where('matchkey',$value->matchkey)->orderBy('sort','ASC')->get();
           if(!empty($sloteId_arr)){
              foreach ($sloteId_arr as $key => $solte) {
                $matchsloteData=DB::table('live_fantasy_slotes_master')->where('id',$solte->slotes_id)->first();
               if(!empty($matchsloteData)){
                 if(!empty($slotesData[$key]['start_date'])){
                 if($slotesData[$key]['start_date'] > $locktime){
                   $slotesData[$key]['id']=$matchsloteData->id;
                   $slotesData[$key]['type']=$matchsloteData->type;
                   $slotesData[$key]['min_over']=$matchsloteData->min_over;
                   $slotesData[$key]['max_over']=$matchsloteData->max_over;
                   $slotesData[$key]['inning']=$matchsloteData->inning;
               }
             }else{
               $slotesData[$key]['id']=$matchsloteData->id;
               $slotesData[$key]['type']=$matchsloteData->type;
               $slotesData[$key]['min_over']=$matchsloteData->min_over;
               $slotesData[$key]['max_over']=$matchsloteData->max_over;
               $slotesData[$key]['inning']=$matchsloteData->inning;
             }
             }
              }
              $value->slotes = $slotesData;
              $value->livefantasy = 1;
            }


         }
         // var_dump($findmatches);exit;
         // echo "<pre>"; print_r($findmatches); exit;
       }else{

      $query = DB::table('listmatches');


    $findmatches = $query->leftjoin('series','listmatches.series','=','series.id')

    ->leftJoin('match_playing11','match_playing11.match_key','=','listmatches.matchkey')


    ->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'t1.logo as team1logo','match_playing11.player_ids','t2.logo as team2logo','t1.short_name as team1key','t2.short_name as team2key','listmatches.id','listmatches.short_name','listmatches.series as seriesid','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.status','listmatches.name','listmatches.sport_type','listmatches.team1display','listmatches.team2display','listmatches.start_date','series.name as seriesname','listmatches.start_date','listmatches.format','listmatches.matchkey','listmatches.final_status','listmatches.launch_status','t1.team as team1_name','t2.team as team2_name','listmatches.announcement','listmatches.toss' , 'listmatches.mega_contest_prize' , 'listmatches.team1_color_code' ,  'listmatches.team2_color_code' , 'listmatches.banner_image'  , 'listmatches.giveaway_amount' , 'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.second_inning as secondinning_allow' , 'listmatches.second_inning as secondinning')
    ->where('listmatches.start_date','>',$locktime)
    ->where(function($q) {
          $q->where('listmatches.launch_status', 'launched')
            ->orWhere('listmatches.is_release', 1);
      })
    ->whereIn('listmatches.sport_type',$all_sport_keys)
    ->where('listmatches.series','!=','0')
    ->where('series.series_status',OPENED)
      ->groupBy('listmatches.matchkey')
      ->orderBY('listmatches.sort','ASC')
      ->orderBY('listmatches.start_date','ASC')
      ->take(20)->get();

      foreach ($findmatches as $key => $value) {
          $value->livefantasy = 0;
      }

    }



      $date1 = date('Y-m-d H:i:s', strtotime('-24 hours', strtotime(date('Y-m-d H:i:s'))));


          $userid =  $data['userid'] = $request->user_id;

          $locktime = Carbon::now()->addMinutes(24);




          $query = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')
          // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
          ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
          ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
          ->where('jointeam.userid',$userid)
          ->whereIn('jointeam.sport_type',$all_sport_keys)
          ->whereIn('listmatches.sport_type',$all_sport_keys)
          ->where('listmatches.series','!=','0');

          if($sport_key=='LIVE') {
            $query->where('joinedleauges.fantasy_type_id','=','1');
            $query->where('jointeam.fantasy_type_id','=','1');

            // if($request->user_id == 279907 || $request->user_id == 14 ){
            //
            //   $date1 = '2021-06-13 14:22:00';
            //   $query = $query->where('listmatches.matchkey' , 'pslt20_2021_g022');
            // }

          } else {
            $query->where('joinedleauges.fantasy_type_id','!=','1');
            $query->where('jointeam.fantasy_type_id','!=','1');
          }
          // ->where('matchchallenges.status','!=','canceled')
          // ->where('listmatches.status', '!=','notstarted')
          $findjoinedleauges = $query->where('listmatches.start_date','>',$date1)
          ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type','listmatches.start_date','listmatches.status',
          'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.second_inning as secondinning',
          't1.team as team1_name','t2.team as team2_name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo','listmatches.announcement','listmatches.toss','listmatches.team1_color_code','listmatches.team2_color_code')
          ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
          ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
          ->selectRaw('SUM(finalresults.amount) as total_amount')
          ->orderBy('listmatches.start_date','DESC')
          ->groupBy('jointeam.matchkey')->limit(10)->get();

          foreach ($findjoinedleauges as $key1 => $value_join) {
            if($sport_key=='LIVE'){
              $value_join->livefantasy = 1;
              $sport_type = DB::table('sport_types')->where('sport_key',"CRICKET")->first();
              // if($request->user_id == 279907  || $request->user_id == 14){
              //   $findjoinedleauges[$key1]->start_date = '2021-06-25';
              // }
                 $slotesData=[];
                 $sloteId_arr = DB::table('matches_livefantasy_slotesmaster')->where('matchkey',$value_join->matchkey)->orderBy('sort','ASC')->get();
                 if(!empty($sloteId_arr)){
                    foreach ($sloteId_arr as $key => $solte) {
                      $matchsloteData=DB::table('live_fantasy_slotes_master')->where('id',$solte->slotes_id)->first();
                     if(!empty($matchsloteData)){

                       if(!empty($slotesData[$key]['start_date'])){
                       if($slotesData[$key]['start_date'] > $locktime){

                         $slotesData[$key]['id']=$matchsloteData->id;
                         $slotesData[$key]['type']=$matchsloteData->type;
                         $slotesData[$key]['min_over']=$matchsloteData->min_over;
                         $slotesData[$key]['max_over']=$matchsloteData->max_over;
                         $slotesData[$key]['inning']=$matchsloteData->inning;

}
}else{
  $slotesData[$key]['id']=$matchsloteData->id;
  $slotesData[$key]['type']=$matchsloteData->type;
  $slotesData[$key]['min_over']=$matchsloteData->min_over;
  $slotesData[$key]['max_over']=$matchsloteData->max_over;
  $slotesData[$key]['inning']=$matchsloteData->inning;
}

                     }
                    }
                    $findjoinedleauges[$key1]->slotes = $slotesData;
                  }


              $findjoinedleauges[$key1]->total_teams = DB::table('jointeam')
              ->where('matchkey' , $value_join->matchkey)
              ->where('sport_type' , $sport_type->id)
              ->where('userid' , $userid)
              ->where('fantasy_type_id' , 1)
              ->count();

$findjoinedleauges[$key1]->total_joined = DB::table('joinedleauges')
->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
->where('matchchallenges.status','!=','canceled')
->where('matchchallenges.matchkey' , $value_join->matchkey)
->where('joinedleauges.matchkey' , $value_join->matchkey)
->where('joinedleauges.sport_type' , $sport_type->id)
->where('joinedleauges.userid' , $userid)
->where('joinedleauges.fantasy_type_id' , 1)
->count();

            }else{
              $value_join->livefantasy = 0;
              $sport_type = DB::table('sport_types')->where('sport_key',$value_join->sport_key)->first();
              /*$findjoinedleauges[$key]->total_teams = DB::table('jointeam')
              ->where('matchkey' , $value_join->matchkey)
              ->where('sport_type' , $sport_type->id)
              ->where('userid' , $userid)
              ->where('fantasy_type_id' ,'!=', 1)
              ->count();
*/
              $findjoinedleauges[$key1]->total_joined = DB::table('joinedleauges')
              ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
              ->where('matchchallenges.status','!=','canceled')
              ->where('matchchallenges.matchkey' , $value_join->matchkey)
              ->where('joinedleauges.matchkey' , $value_join->matchkey)
              ->where('joinedleauges.sport_type' , $sport_type->id)
              ->where('joinedleauges.userid' , $userid)
              ->where('joinedleauges.fantasy_type_id' ,'!=', 1)
              ->count();
            }

          }

          $completedmatches = array();
          $completedmatches = $findjoinedleauges;


          // finished and upcoming matches for user specific

          return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findmatches),"users_matches"=>MatchListResource::collection($completedmatches)]);die;
      // return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findmatches)]);die;

    }


//     public function getMatchList(Request $request){
//       // Helpers::sendTextSmsNew($txtmsg,"7014845547");
//
//       date_default_timezone_set("Asia/Kolkata");
//
//       $geturl = BASE_URL;
//
//       $aftertime = Carbon::now()->addDays(15);
//
//       $beforetime = Carbon::now()->subDays(15);
//
//       $locktime = Carbon::now()->addMinutes(0);
//
//       $date = $this->getDateCommon();
//
//        $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
//
//        if($sport_key=='LIVE'){
//         $sport_key_arr = explode(',', 'CRICKET');
//       }else{
//         $sport_key_arr = explode(',', $sport_key);
//       }
//       // $sportType = DB::table('sport_types')->whereIn('sport_key',$sport_key_arr)->get();
//       // $sportType_arr = json_decode(json_encode($sportType));
//        // $all_sport_keys = array_column($sportType_arr, 'id');
//       $sportType = (object)array();
//     $sportType->id = Helpers::get_sport_type($request->sport_key);
//
//       if($sport_key=='LIVE'){
//          $query = DB::table('listmatches');
//          $findmatches = $query->leftjoin('series','listmatches.series','=','series.id')
//
//          ->leftJoin('match_playing11','match_playing11.match_key','=','listmatches.matchkey')->join('teams as t1','t1.id','=','listmatches.team1')
//          ->join('teams as t2','t2.id','=','listmatches.team2')
//          ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'t1.logo as team1logo','match_playing11.player_ids','t2.logo as team2logo','t1.short_name as team1key',
//          't2.short_name as team2key',
//          'listmatches.id','listmatches.short_name','listmatches.series as seriesid','series.name as seriesname','listmatches.status','listmatches.name','listmatches.sport_type',
//          'listmatches.team1display','listmatches.team2display',
//          'listmatches.livefantasy_start_date as start_date','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.format','listmatches.matchkey as matchkey','listmatches.final_status','listmatches.launch_status','t1.team as team1_name','t2.team as team2_name','listmatches.announcement as announcement','listmatches.toss' , 'listmatches.mega_contest_prize' , 'listmatches.team1_color_code' , 'listmatches.team2_color_code' , 'listmatches.banner_image','listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.is_reverse_fantasy_enable as reversefantasy','listmatches.second_inning_allow as secondinning' , 'listmatches.second_inning as secondinning_flag','listmatches.is_giveaway','listmatches.giveaway_amount')
//        ->where('listmatches.livefantasy_start_date','>',$locktime)
//        ->where(function($q) {
//              $q->where('listmatches.launch_status', 'launched')
//                ->orWhere('listmatches.is_release', 1);
//          })
//        ->where('listmatches.sport_type',$sportType->id)
//        ->where('listmatches.series','!=','0')
//        ->where('series.series_status',OPENED)
//        ->where('is_live_fantasy_enable',1)
//          ->groupBy('listmatches.matchkey')
//          ->orderBY('listmatches.sort','ASC')
//          ->orderBY('listmatches.livefantasy_start_date','ASC')
//          ->take(20)->get();
//
//
//
//          $findmatches_secondInning = DB::table('listmatches')->leftjoin('series','listmatches.series','=','series.id')->leftJoin('match_playing11','match_playing11.match_key','=','listmatches.matchkey')->join('teams as t1','t1.id','=','listmatches.team1')
//          ->join('teams as t2','t2.id','=','listmatches.team2')
//          ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'t1.logo as team1logo','match_playing11.player_ids','t2.logo as team2logo','t1.short_name as team1key',
//          't2.short_name as team2key',
//          'listmatches.id','listmatches.short_name','listmatches.series as seriesid','series.name as seriesname','listmatches.status','listmatches.name','listmatches.sport_type',
//          'listmatches.team1display','listmatches.team2display',
//          'listmatches.start_date as start_date','series.name as seriesname','series.is_leaderboard as is_leaderboard' , 'listmatches.format','listmatches.matchkey as matchkey','listmatches.final_status','listmatches.launch_status','t1.team as team1_name','t2.team as team2_name','listmatches.live_fantasy_announcement as announcement','listmatches.toss' , 'listmatches.mega_contest_prize' , 'listmatches.team1_color_code' , 'listmatches.team2_color_code' , 'listmatches.banner_image','listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.is_reverse_fantasy_enable as reversefantasy','listmatches.second_inning_allow as secondinning' , 'listmatches.second_inning as secondinning_flag')
//         ->where('listmatches.start_date','>',$locktime)
//         ->where(function($q) {
//              $q->where('listmatches.launch_status', 'launched')
//                ->orWhere('listmatches.is_release', 1);
//          })
//         ->where('listmatches.sport_type',$sportType->id)
//         ->where('listmatches.series','!=','0')
//         ->where('series.series_status',OPENED)
//         ->where('second_inning',1)
//          ->groupBy('listmatches.matchkey')
//          ->orderBY('listmatches.sort','ASC')
//          ->orderBY('listmatches.start_date','ASC')
//          ->take(20)->get();
//
// $findmatches = $findmatches->merge($findmatches_secondInning);
//
//
//          foreach ($findmatches as $key => $value) {
//
//            $slotesData=[];
//            $sloteId_arr = DB::table('matches_livefantasy_slotesmaster')->where('matchkey',$value->matchkey)->where('start_date','>',$locktime)->orderBy('sort','ASC')->get();
//            //
//            // $sloteId_arr = DB::table('matches_livefantasy_slotesmaster')->where('matchkey',$value->matchkey)->orderBy('sort','ASC')->get();
//            if(!empty($sloteId_arr)){
//               foreach ($sloteId_arr as $key => $solte) {
//                 $matchsloteData=DB::table('live_fantasy_slotes_master')->where('id',$solte->slotes_id)->first();
//                if(!empty($matchsloteData)){
//                  if(!empty($slotesData[$key]['start_date'])){
//                  if($slotesData[$key]['start_date'] > $locktime){
//                    $slotesData[$key]['id']=$matchsloteData->id;
//                    $slotesData[$key]['type']=$matchsloteData->type;
//                    $slotesData[$key]['min_over']=$matchsloteData->min_over;
//                    $slotesData[$key]['max_over']=$matchsloteData->max_over;
//                    $slotesData[$key]['inning']=$matchsloteData->inning;
//                }
//              }else{
//                $slotesData[$key]['id']=$matchsloteData->id;
//                $slotesData[$key]['type']=$matchsloteData->type;
//                $slotesData[$key]['min_over']=$matchsloteData->min_over;
//                $slotesData[$key]['max_over']=$matchsloteData->max_over;
//                $slotesData[$key]['inning']=$matchsloteData->inning;
//              }
//              }
//               }
//               $value->slotes = $slotesData;
//               if($value->secondinning_flag == 0){
//               $value->livefantasy = 1;
//             }
//             }
//
//
//          }
//          // var_dump($findmatches);exit;
//          // echo "<pre>"; print_r($findmatches); exit;
//        }else{
// $findmatches  = Cache::remember('listmatches_'.$sportType->id,1, function() use ($sport_key_arr, $sportType,$locktime){
//       $query = DB::table('listmatches');
//
//
//     $findmatches = $query->leftjoin('series','listmatches.series','=','series.id')
//
//     ->leftJoin('match_playing11','match_playing11.match_key','=','listmatches.matchkey')
//
//
//     ->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'t1.logo as team1logo','match_playing11.player_ids','t2.logo as team2logo','t1.short_name as team1key','t2.short_name as team2key','listmatches.id','listmatches.short_name','listmatches.series as seriesid','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.status','listmatches.name','listmatches.sport_type','listmatches.team1display','listmatches.team2display','listmatches.start_date','series.name as seriesname','listmatches.start_date','listmatches.format','listmatches.matchkey','listmatches.final_status','listmatches.launch_status','t1.team as team1_name','t2.team as team2_name','listmatches.announcement','listmatches.toss' , 'listmatches.mega_contest_prize' , 'listmatches.team1_color_code' ,  'listmatches.team2_color_code' , 'listmatches.banner_image' , 'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy' , 'listmatches.is_reverse_fantasy_enable as reversefantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.second_inning_allow as secondinning_allow' , 'listmatches.second_inning as secondinning' , 'listmatches.second_inning as secondinning_flag','listmatches.is_giveaway','listmatches.giveaway_amount' , 'listmatches.is_fixture')
//     ->where('listmatches.start_date','>',$locktime)
//     ->where(function($q) {
//           $q->where('listmatches.launch_status', 'launched')
//             ->orWhere('listmatches.is_release', 1);
//       })
//     ->where('listmatches.sport_type',$sportType->id)
//     ->where('listmatches.series','!=','0')
//     // ->where('listmatches.second_inning','=','0')
//     ->where('series.series_status',OPENED)
//       ->groupBy('listmatches.matchkey')
//       ->orderBY('listmatches.sort','ASC')
//       ->orderBY('listmatches.start_date','ASC')
//       ->take(20)->get();
//       return $findmatches;
//   });
//     $date_playing11 = date('Y-m-d H:i:s', strtotime('+60 minutes', strtotime(date('Y-m-d H:i:s'))));
//       foreach ($findmatches as $key => $value) {
//           $findmatches[$key]->livefantasy = 0;
//
//           if($date_playing11 > $value->start_date) {
//
//             $findmatches[$key]->player_ids = Redis::hGet($value->matchkey.'_'.$sportType->id,'lineup');
//           }
//       }
//
//     }
//
//
//
//       $date1 = date('Y-m-d H:i:s', strtotime('-24 hours', strtotime(date('Y-m-d H:i:s'))));
//
//
//           $userid =  $data['userid'] = $request->user_id;
//
//           $locktime = Carbon::now()->addMinutes(24);
//
//
//
//
//           $query = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')
//           // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
//           ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
//           ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
//           ->where('jointeam.userid',$userid)
//           ->where('listmatches.sport_type',$sportType->id)
//           ->where('listmatches.series','!=','0');
//
//           if($sport_key=='LIVE') {
//             $query->where('joinedleauges.fantasy_type_id','=','1');
//             $query->where('jointeam.fantasy_type_id','=','1');
//
//           } else {
//             // $query->where('joinedleauges.fantasy_type_id','!=','1');
//             $query->where('jointeam.fantasy_type_id','!=','1');
//             $query->where('listmatches.second_inning',0);
//           }
//           // ->where('matchchallenges.status','!=','canceled')
//           // ->where('listmatches.status', '!=','notstarted')
//           $findjoinedleauges = $query->where('listmatches.start_date','>',$date1)
//           ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type','listmatches.start_date','listmatches.status',
//           'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.is_reverse_fantasy_enable as reversefantasy','listmatches.second_inning_allow as secondinning', 'listmatches.second_inning as secondinning_flag',
//           't1.team as team1_name','t2.team as team2_name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo','listmatches.announcement','listmatches.toss','listmatches.team1_color_code','listmatches.team2_color_code')
//           ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
//           ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
//           ->selectRaw('SUM(finalresults.amount) as total_amount')
//           ->orderBy('listmatches.start_date','DESC')
//           ->groupBy('jointeam.matchkey')->limit(10)->get();
//
//
//   if($sport_key=='LIVE') {
//     $findjoinedleauges_secondInning = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')
//     // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
//     ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
//     ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
//     ->where('jointeam.userid',$userid)
//     ->where('listmatches.sport_type',$sportType->id)
//     ->where('listmatches.series','!=','0')
//     ->where('listmatches.start_date','>',$date1)
//     ->where('listmatches.second_inning',1)
//     ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname' , 'series.is_leaderboard as is_leaderboard','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type','listmatches.start_date','listmatches.status',
//     'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.is_reverse_fantasy_enable as reversefantasy','listmatches.second_inning_allow as secondinning', 'listmatches.second_inning as secondinning_flag',
//     't1.team as team1_name','t2.team as team2_name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo','listmatches.announcement','listmatches.toss','listmatches.team1_color_code','listmatches.team2_color_code')
//     ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
//     ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
//     ->selectRaw('SUM(finalresults.amount) as total_amount')
//     ->orderBy('listmatches.start_date','DESC')
//     ->groupBy('jointeam.matchkey')->limit(10)->get();
//     $findjoinedleauges = $findjoinedleauges->merge($findjoinedleauges_secondInning);
//   }
//
//           foreach ($findjoinedleauges as $key1 => $value_join) {
//             if($sport_key=='LIVE'){
//                 if($value_join->secondinning_flag == 0){
//               $value_join->livefantasy = 1;
//             }
//               // $sport_type = DB::table('sport_types')->where('sport_key',"CRICKET")->first();
//
//                  $slotesData=[];
//                  $sloteId_arr = DB::table('matches_livefantasy_slotesmaster')->where('matchkey',$value_join->matchkey)->orderBy('sort','ASC')->get();
//                  if(!empty($sloteId_arr)){
//                     foreach ($sloteId_arr as $key => $solte) {
//                       $matchsloteData=DB::table('live_fantasy_slotes_master')->where('id',$solte->slotes_id)->first();
//                      if(!empty($matchsloteData)){
//
//                        if(!empty($slotesData[$key]['start_date'])){
//                        if($slotesData[$key]['start_date'] > $locktime){
//
//                          $slotesData[$key]['id']=$matchsloteData->id;
//                          $slotesData[$key]['type']=$matchsloteData->type;
//                          $slotesData[$key]['min_over']=$matchsloteData->min_over;
//                          $slotesData[$key]['max_over']=$matchsloteData->max_over;
//                          $slotesData[$key]['inning']=$matchsloteData->inning;
//
// }
// }else{
//   $slotesData[$key]['id']=$matchsloteData->id;
//   $slotesData[$key]['type']=$matchsloteData->type;
//   $slotesData[$key]['min_over']=$matchsloteData->min_over;
//   $slotesData[$key]['max_over']=$matchsloteData->max_over;
//   $slotesData[$key]['inning']=$matchsloteData->inning;
// }
//
//                      }
//                     }
//                     $findjoinedleauges[$key1]->slotes = $slotesData;
//                   }
//
//
//              /* $findjoinedleauges[$key1]->total_teams = DB::table('jointeam')
//               ->where('matchkey' , $value_join->matchkey)
//               ->where('sport_type' , $sportType->id)
//               ->where('userid' , $userid)
//               ->where('fantasy_type_id' , 1)
//               ->count();*/
//
// /*$findjoinedleauges[$key1]->total_joined = DB::table('joinedleauges')
// ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
// ->where('matchchallenges.status','!=','canceled')
// ->where('matchchallenges.matchkey' , $value_join->matchkey)
// ->where('joinedleauges.matchkey' , $value_join->matchkey)
// ->where('joinedleauges.sport_type' , $sportType->id)
// ->where('joinedleauges.userid' , $userid)
// ->where('joinedleauges.fantasy_type_id' , 1)
// ->count();*/
//
//             }else{
//               $value_join->livefantasy = 0;
//               // $sport_type = DB::table('sport_types')->where('sport_key',$value_join->sport_key)->first();
//               /*$findjoinedleauges[$key]->total_teams = DB::table('jointeam')
//               ->where('matchkey' , $value_join->matchkey)
//               ->where('sport_type' , $sport_type->id)
//               ->where('userid' , $userid)
//               ->where('fantasy_type_id' ,'!=', 1)
//               ->count();
// */
//               /*$findjoinedleauges[$key1]->total_joined = DB::table('joinedleauges')
//               ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
//               ->where('matchchallenges.status','!=','canceled')
//               ->where('matchchallenges.matchkey' , $value_join->matchkey)
//               ->where('joinedleauges.matchkey' , $value_join->matchkey)
//               ->where('joinedleauges.sport_type' , $sportType->id)
//               ->where('joinedleauges.userid' , $userid)
//               ->where('joinedleauges.fantasy_type_id' ,'!=', 1)
//               ->count();*/
//             }
//
//           }
//
//           $completedmatches = array();
//           $completedmatches = $findjoinedleauges;
//
//
//           // finished and upcoming matches for user specific
//
//           return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findmatches),"users_matches"=>MatchListResource::collection($completedmatches)]);die;
//       // return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findmatches)]);die;
//
//     }


public function getMatchList(Request $request){
  // Helpers::sendTextSmsNew($txtmsg,"7014845547");

  date_default_timezone_set("Asia/Kolkata");

  $geturl = BASE_URL;

  $aftertime = Carbon::now()->addDays(15);

  $beforetime = Carbon::now()->subDays(15);

  $locktime = Carbon::now()->addMinutes(0);

  $date = $this->getDateCommon();

  $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);

  if($sport_key=='LIVE'){
    $sport_key_arr = explode(',', 'CRICKET');
  }else{
    $sport_key_arr = explode(',', $sport_key);
  }
  // $sportType = DB::table('sport_types')->whereIn('sport_key',$sport_key_arr)->get();
  // $sportType_arr = json_decode(json_encode($sportType));
  // $all_sport_keys = array_column($sportType_arr, 'id');
  $sportType = (object)array();
  $sportType->id = Helpers::get_sport_type($request->sport_key);

  if($sport_key=='LIVE'){
    $query = DB::table('listmatches');
    $findmatches = $query->leftjoin('series','listmatches.series','=','series.id')->leftJoin('match_playing11','match_playing11.match_key','=','listmatches.matchkey')->join('teams as t1','t1.id','=','listmatches.team1')
    ->join('teams as t2','t2.id','=','listmatches.team2')
    ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'t1.logo as team1logo','match_playing11.player_ids','t2.logo as team2logo','t1.short_name as team1key',
    't2.short_name as team2key',
    'listmatches.id','listmatches.short_name','listmatches.series as seriesid','series.name as seriesname','listmatches.status','listmatches.name','listmatches.sport_type',
    'listmatches.team1display','listmatches.team2display',
    'listmatches.livefantasy_start_date as start_date','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.format','listmatches.matchkey as matchkey','listmatches.final_status','listmatches.launch_status','t1.team as team1_name','t2.team as team2_name','listmatches.announcement as announcement','listmatches.toss' , 'listmatches.mega_contest_prize' , 'listmatches.team1_color_code' , 'listmatches.team2_color_code' , 'listmatches.banner_image','listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.is_reverse_fantasy_enable as reversefantasy','listmatches.second_inning_allow as secondinning' , 'listmatches.second_inning as secondinning_flag','listmatches.is_giveaway','listmatches.giveaway_amount')
    ->where('listmatches.livefantasy_start_date','>',$locktime)
    ->where(function($q) {
      $q->where('listmatches.launch_status', 'launched')
      ->orWhere('listmatches.is_release', 1);
    })
    ->where('listmatches.sport_type',$sportType->id)
    ->where('listmatches.series','!=','0')
    ->where('series.series_status',OPENED)
    ->where('is_live_fantasy_enable',1)
    ->groupBy('listmatches.matchkey')
    ->orderBY('listmatches.sort','ASC')
    ->orderBY('listmatches.livefantasy_start_date','ASC')
    ->take(20)->get();



    $findmatches_secondInning = DB::table('listmatches')->leftjoin('series','listmatches.series','=','series.id')->leftJoin('match_playing11','match_playing11.match_key','=','listmatches.matchkey')->join('teams as t1','t1.id','=','listmatches.team1')
    ->join('teams as t2','t2.id','=','listmatches.team2')
    ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'t1.logo as team1logo','match_playing11.player_ids','t2.logo as team2logo','t1.short_name as team1key',
    't2.short_name as team2key',
    'listmatches.id','listmatches.short_name','listmatches.series as seriesid','series.name as seriesname','listmatches.status','listmatches.name','listmatches.sport_type',
    'listmatches.team1display','listmatches.team2display',
    'listmatches.start_date as start_date','series.name as seriesname','series.is_leaderboard as is_leaderboard' , 'listmatches.format','listmatches.matchkey as matchkey','listmatches.final_status','listmatches.launch_status','t1.team as team1_name','t2.team as team2_name','listmatches.live_fantasy_announcement as announcement','listmatches.toss' , 'listmatches.mega_contest_prize' , 'listmatches.team1_color_code' , 'listmatches.team2_color_code' , 'listmatches.banner_image','listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.is_reverse_fantasy_enable as reversefantasy','listmatches.second_inning_allow as secondinning' , 'listmatches.second_inning as secondinning_flag')
    ->where('listmatches.start_date','>',$locktime)
    ->where(function($q) {
      $q->where('listmatches.launch_status', 'launched')
      ->orWhere('listmatches.is_release', 1);
    })
    ->where('listmatches.sport_type',$sportType->id)
    ->where('listmatches.series','!=','0')
    ->where('series.series_status',OPENED)
    ->where('second_inning',1)
    ->groupBy('listmatches.matchkey')
    ->orderBY('listmatches.sort','ASC')
    ->orderBY('listmatches.start_date','ASC')
    ->take(20)->get();

    $findmatches = $findmatches->merge($findmatches_secondInning);


    foreach ($findmatches as $key => $value) {

      $slotesData=[];
      $sloteId_arr = DB::table('matches_livefantasy_slotesmaster')->where('matchkey',$value->matchkey)->where('start_date','>',$locktime)->orderBy('sort','ASC')->get();
      //
      // $sloteId_arr = DB::table('matches_livefantasy_slotesmaster')->where('matchkey',$value->matchkey)->orderBy('sort','ASC')->get();
      if(!empty($sloteId_arr)){
        foreach ($sloteId_arr as $key => $solte) {
          $matchsloteData=DB::table('live_fantasy_slotes_master')->where('id',$solte->slotes_id)->first();
          if(!empty($matchsloteData)){
            if(!empty($slotesData[$key]['start_date'])){
              if($slotesData[$key]['start_date'] > $locktime){
                $slotesData[$key]['id']=$matchsloteData->id;
                $slotesData[$key]['type']=$matchsloteData->type;
                $slotesData[$key]['min_over']=$matchsloteData->min_over;
                $slotesData[$key]['max_over']=$matchsloteData->max_over;
                $slotesData[$key]['inning']=$matchsloteData->inning;
              }
            }else{
              $slotesData[$key]['id']=$matchsloteData->id;
              $slotesData[$key]['type']=$matchsloteData->type;
              $slotesData[$key]['min_over']=$matchsloteData->min_over;
              $slotesData[$key]['max_over']=$matchsloteData->max_over;
              $slotesData[$key]['inning']=$matchsloteData->inning;
            }
          }
        }
        $value->slotes = $slotesData;
        if($value->secondinning_flag == 0){
          $value->livefantasy = 1;
        }
      }


    }
    // var_dump($findmatches);exit;
    // echo "<pre>"; print_r($findmatches); exit;
  }else{
    //$findmatches  = Cache::remember('listmatches_'.$sportType->id,1, function() use ($sport_key_arr, $sportType,$locktime){
      $query = DB::table('listmatches');


      $findmatches = $query->leftjoin('series','listmatches.series','=','series.id')

      ->leftJoin('match_playing11','match_playing11.match_key','=','listmatches.matchkey')


      ->join('teams as t1','t1.id','=','listmatches.team1')
      ->join('teams as t2','t2.id','=','listmatches.team2')
      ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'t1.logo as team1logo','match_playing11.player_ids','t2.logo as team2logo','t1.short_name as team1key','t2.short_name as team2key','listmatches.id','listmatches.short_name','listmatches.series as seriesid','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.status','listmatches.name','listmatches.sport_type','listmatches.team1display','listmatches.team2display','listmatches.start_date','series.name as seriesname','listmatches.start_date','listmatches.format','listmatches.matchkey','listmatches.final_status','listmatches.launch_status','t1.team as team1_name','t2.team as team2_name','listmatches.announcement','listmatches.toss' , 'listmatches.mega_contest_prize' , 'listmatches.team1_color_code' ,  'listmatches.team2_color_code' , 'listmatches.banner_image' , 'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy' , 'listmatches.is_reverse_fantasy_enable as reversefantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.second_inning_allow as secondinning_allow' , 'listmatches.second_inning as secondinning' , 'listmatches.second_inning as secondinning_flag','listmatches.is_giveaway','listmatches.giveaway_amount' , 'listmatches.is_fixture')
      ->where('listmatches.start_date','>',$locktime)
      ->where(function($q) {
        $q->where('listmatches.launch_status', 'launched')
        ->orWhere('listmatches.is_release', 1);
      })
      ->where('listmatches.sport_type',$sportType->id)
      ->where('listmatches.series','!=','0')
      // ->where('listmatches.second_inning','=','0')
      ->where('series.series_status',OPENED)
      ->groupBy('listmatches.matchkey')
      ->orderBY('listmatches.sort','ASC')
      ->orderBY('listmatches.start_date','ASC')
      ->take(20)->get();
    //   return $findmatches;
    // });
    $date_playing11 = date('Y-m-d H:i:s', strtotime('+60 minutes', strtotime(date('Y-m-d H:i:s'))));
    foreach ($findmatches as $key => $value) {
      $findmatches[$key]->livefantasy = 0;

      if($date_playing11 > $value->start_date) {

        // $findmatches[$key]->player_ids = Redis::hGet($value->matchkey.'_'.$sportType->id,'lineup');
      }
    }

  }



  $date1 = date('Y-m-d H:i:s', strtotime('-24 hours', strtotime(date('Y-m-d H:i:s'))));


  $userid =  $data['userid'] = $request->user_id;

  $locktime = Carbon::now()->addMinutes(24);




  $query = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')
  // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
  ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
  ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
  ->where('jointeam.userid',$userid)
  ->where('listmatches.sport_type',$sportType->id)
  ->where('listmatches.series','!=','0');

  if($sport_key=='LIVE') {
    $query->where('joinedleauges.fantasy_type_id','=','1');
    $query->where('jointeam.fantasy_type_id','=','1');

  } else {
    // $query->where('joinedleauges.fantasy_type_id','!=','1');
    $query->where('jointeam.fantasy_type_id','!=','1');
    $query->where('listmatches.second_inning',0);
  }
  // ->where('matchchallenges.status','!=','canceled')
  // ->where('listmatches.status', '!=','notstarted')
  $findjoinedleauges = $query->where('listmatches.start_date','>',$date1)
  ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type','listmatches.start_date','listmatches.status',
  'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.is_reverse_fantasy_enable as reversefantasy','listmatches.second_inning_allow as secondinning', 'listmatches.second_inning as secondinning_flag',
  't1.team as team1_name','t2.team as team2_name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo','listmatches.announcement','listmatches.toss','listmatches.team1_color_code','listmatches.team2_color_code')
  ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
  ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
  ->selectRaw('SUM(finalresults.amount) as total_amount')
  ->orderBy('listmatches.start_date','DESC')
  ->groupBy('jointeam.matchkey')->limit(10)->get();


  if($sport_key=='LIVE') {
    $findjoinedleauges_secondInning = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')
    // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
    ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
    ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
    ->where('jointeam.userid',$userid)
    ->where('listmatches.sport_type',$sportType->id)
    ->where('listmatches.series','!=','0')
    ->where('listmatches.start_date','>',$date1)
    ->where('listmatches.second_inning',1)
    ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname' , 'series.is_leaderboard as is_leaderboard','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type','listmatches.start_date','listmatches.status',
    'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.is_reverse_fantasy_enable as reversefantasy','listmatches.second_inning_allow as secondinning', 'listmatches.second_inning as secondinning_flag',
    't1.team as team1_name','t2.team as team2_name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo','listmatches.announcement','listmatches.toss','listmatches.team1_color_code','listmatches.team2_color_code')
    ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
    ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
    ->selectRaw('SUM(finalresults.amount) as total_amount')
    ->orderBy('listmatches.start_date','DESC')
    ->groupBy('jointeam.matchkey')->limit(10)->get();
    $findjoinedleauges = $findjoinedleauges->merge($findjoinedleauges_secondInning);
  }

  foreach ($findjoinedleauges as $key1 => $value_join) {
    if($sport_key=='LIVE'){
      if($value_join->secondinning_flag == 0){
        $value_join->livefantasy = 1;
      }
      // $sport_type = DB::table('sport_types')->where('sport_key',"CRICKET")->first();

      $slotesData=[];
      $sloteId_arr = DB::table('matches_livefantasy_slotesmaster')->where('matchkey',$value_join->matchkey)->orderBy('sort','ASC')->get();
      if(!empty($sloteId_arr)){
        foreach ($sloteId_arr as $key => $solte) {
          $matchsloteData=DB::table('live_fantasy_slotes_master')->where('id',$solte->slotes_id)->first();
          if(!empty($matchsloteData)){

            if(!empty($slotesData[$key]['start_date'])){
              if($slotesData[$key]['start_date'] > $locktime){

                $slotesData[$key]['id']=$matchsloteData->id;
                $slotesData[$key]['type']=$matchsloteData->type;
                $slotesData[$key]['min_over']=$matchsloteData->min_over;
                $slotesData[$key]['max_over']=$matchsloteData->max_over;
                $slotesData[$key]['inning']=$matchsloteData->inning;

              }
            }else{
              $slotesData[$key]['id']=$matchsloteData->id;
              $slotesData[$key]['type']=$matchsloteData->type;
              $slotesData[$key]['min_over']=$matchsloteData->min_over;
              $slotesData[$key]['max_over']=$matchsloteData->max_over;
              $slotesData[$key]['inning']=$matchsloteData->inning;
            }

          }
        }
        $findjoinedleauges[$key1]->slotes = $slotesData;
      }


      /* $findjoinedleauges[$key1]->total_teams = DB::table('jointeam')
      ->where('matchkey' , $value_join->matchkey)
      ->where('sport_type' , $sportType->id)
      ->where('userid' , $userid)
      ->where('fantasy_type_id' , 1)
      ->count();*/

      /*$findjoinedleauges[$key1]->total_joined = DB::table('joinedleauges')
      ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
      ->where('matchchallenges.status','!=','canceled')
      ->where('matchchallenges.matchkey' , $value_join->matchkey)
      ->where('joinedleauges.matchkey' , $value_join->matchkey)
      ->where('joinedleauges.sport_type' , $sportType->id)
      ->where('joinedleauges.userid' , $userid)
      ->where('joinedleauges.fantasy_type_id' , 1)
      ->count();*/

    }else{
      $value_join->livefantasy = 0;
      // $sport_type = DB::table('sport_types')->where('sport_key',$value_join->sport_key)->first();
      /*$findjoinedleauges[$key]->total_teams = DB::table('jointeam')
      ->where('matchkey' , $value_join->matchkey)
      ->where('sport_type' , $sport_type->id)
      ->where('userid' , $userid)
      ->where('fantasy_type_id' ,'!=', 1)
      ->count();
      */
      /*$findjoinedleauges[$key1]->total_joined = DB::table('joinedleauges')
      ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
      ->where('matchchallenges.status','!=','canceled')
      ->where('matchchallenges.matchkey' , $value_join->matchkey)
      ->where('joinedleauges.matchkey' , $value_join->matchkey)
      ->where('joinedleauges.sport_type' , $sportType->id)
      ->where('joinedleauges.userid' , $userid)
      ->where('joinedleauges.fantasy_type_id' ,'!=', 1)
      ->count();*/
    }

  }

  $completedmatches = array();
  $completedmatches = $findjoinedleauges;


  // finished and upcoming matches for user specific

  return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findmatches),"users_matches"=>MatchListResource::collection($completedmatches)]);die;
  // return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findmatches)]);die;

}




    public function changePassword(Request $request) {

      $this->validate($request, [

      'user_id' => 'required',

      'oldpassword' => 'required',

      'newpassword' => 'required',

    ]);

    $user = RegisterUser::find($request->user_id);

     if ($user->password == "") {
      return Response::json(["status" => STATUS_FAILURE,"message"=>"You are logged in from social account, So please reset your password.","result"=>""]);
    }

    if (Hash::check($request->oldpassword, $user->password)) {

    $user->fill([

      'password' => Hash::make($request->newpassword)

    ])->save();

    return Response::json(["status" => STATUS_SUCCESS,"message"=>"Password changed.","result"=>""]);

    }

    else {

    return Response::json(["status" => STATUS_FAILURE,"message"=>"Old password not correct.","result"=>""]);

    }



    }



    public function resetPasswordDefault(Request $request){

    $this->validate($request, [

        'id' => 'required',

        'password' => 'required',

    ]);

    $findid = RegisterUser::find($request->id);

    if(!empty($findid)){

      $findid->password =  Hash::make($request->password);

      $findid->save();

      return Response::json(["status" => STATUS_SUCCESS,"message"=> "Password changed."]);

    } else {

      return Response::json(["status" => STATUS_FAILURE,"message"=> "Password could not changed."]);

    }

    /*$finduseremail = RegisterUser::where('id',$unique_id)->first();

    $email = $finduseremail->email;

    $emailsubject = 'Password changed - FANLINE11.com';

    $content='<p><strong>Hello </strong></p>';

    $content.='<p>Your password has been successfully changed.</p>';

    $msg = Helpers::mailheader();

    $msg.= Helpers::mailbody($content);

    $msg.= Helpers::mailfooter();

    Helpers::mailsentFormat($email,$emailsubject,$msg);

    echo 1;die;*/



  }

   public function me()

    {

        return response()->json(auth()->user());

    }



    /**

     * Log the user out (Invalidate the token).

     *

     * @return \Illuminate\Http\JsonResponse

     */

    public function logout()

    {

        auth()->logout();

        return response()->json(["status" => STATUS_SUCCESS,"message" => "Successfully logged out","result"=>""]);

    }



    /**

     * Refresh a token.

     *

     * @return \Illuminate\Http\JsonResponse

     */

    public function refresh()

    {

        return $this->respondWithToken(auth()->refresh());

    }



    /**

     * Get the token array structure.

     *

     * @param  string $token

     *

     * @return \Illuminate\Http\JsonResponse

     */

    protected function respondWithToken($token)

    {

        return response()->json([

            "access_token" => $token,

            "token_type" => "bearer",

            "expires_in" => auth()->factory()->getTTL() * 60

        ]);

    }

    public function payload()

    {

        return auth()->payload();

    }



    protected function sendResetResponse(Request $request, $response){

        return response(["message" => $response]);

    }



    protected function sendResetFailedResponse(Request $request, $response){

        return response(['error' => $response]);

    }



    protected function sendResetLinkResponse(Request $request, $response){

        return response(["message" => $response]);

    }



    protected function sendResetLinkFailedResponse(Request $request, $response){

        return response(['error' => $response]);

    }



    public function Hash_password() {

      $user = RegisterUser::skip(18000)->take(6000)->get();

      foreach ($user as $u) {

          $u->password = Hash::make($u->password);

          $u->save();

      }

    }



    public function myPlayHistory(Request $request){

      $Json['total_match_play'] = $this->total_match_play($request->user_id);

      $Json['total_league_play'] = $this->total_league_play($request->user_id);

      $Json['total_contest_win'] = $this->total_contest_win($request->user_id);

      $Json['total_winning'] = number_format((float)$this->total_winning($request->user_id), 2, '.', '');

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

      die;

    }



    public function myBalance(Request $request){
      $this->validateLogin($request->user_id);
    date_default_timezone_set("Asia/Kolkata");

    $this->validate($request, [

        'user_id' => 'required',

    ]);

    $user_id = $request->user_id;

    $currentdate = $this->getDateCommon();

    $prevdate = date('Y-m-d',strtotime(Carbon::now()->subDays(15)));

    $findlastow = UserBalance::join('registerusers', 'userbalances.user_id','=','registerusers.id')->where('user_id',$user_id)->select('registerusers.*', 'userbalances.balance','userbalances.winning', 'userbalances.bonus')->first();

    if(!empty($findlastow)){

      // $usDetail = RegisterUser::where('id',$user_id)->first();
        $Json['email_verify'] = $findlastow->email_verify;
        $Json['bank_verify'] = $findlastow->bank_verify;
        $Json['mobile_verify'] = $findlastow->mobile_verify;
        $Json['pan_verify'] = $findlastow->pan_verify;

      $Json['balance'] = number_format((float)$findlastow->balance, 2, '.', '');

      $Json['winning'] = number_format((float)$findlastow->winning, 2, '.', '');

      $Json['bonus'] = number_format((float)$findlastow->bonus, 2, '.', '');

      $Json['total'] = number_format((float)$findlastow->balance+$findlastow->winning+$findlastow->bonus, 2, '.', '');

      $Json['totalamount'] = number_format((float)$findlastow->balance+$findlastow->winning+$findlastow->bonus, 2, '.', '');

      $Json['affiliate_commission'] = "100";

      $expireamount = 0;

      // get to know about the expired bonus //
      $balancebnus = array();
      // $balancebnus = Transaction::whereDate('created','<=',$prevdate)->where('userid',$user_id)->orderBy('id','DESC')->select('bal_bonus_amt')->first();

      if(!empty($balancebnus)){}

      if($expireamount>0){

        $Json['expireamount'] = intval($expireamount);

      }else{

        $Json['expireamount'] = 0;

      }

$levels = 0;
      $cuser = DB::table('users_level_history')->where('user_id',$user_id)->first();
      if(!empty($cuser)){
      $levels =  $cuser->level;
      }
      $Json['level'] = $levels;
      $JsonFinal[]=$Json;

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$JsonFinal]);

      die;



    }else{

      $Json['balance'] = 0;

      $Json['winning'] = 0;

      $Json['bonus'] = 0;

      $Json['total'] =0;

      $Json['totalamount'] =0;

      $Json['email_verify'] = 0;
      $Json['bank_verify'] = 0;
      $Json['mobile_verify'] = 0;
      $Json['pan_verify'] = 0;
            $Json['level'] = 0;


      $JsonFinal[]=$Json;

      return Response::json(["status" => STATUS_FAILURE,"message"=>"No Record Found.","result"=>$JsonFinal]);

      die;

    }

  }



public function addPromoteBasicDetails(Request $req){

  $this->validate($req,[
    'name' => 'required',
    'email' => 'required',
    'mobile' => 'required',
    // 'state' => 'required',
    'city'=>'required',
    'user_id'=>'required'
  ]);
  //echo "<pre>"; print_r($req->channel_details);  exit;
  $insertData['name'] = $req->name;
  $insertData['email'] = $req->email;
  $insertData['mobile'] = $req->mobile;
  $insertData['state'] = $req->state;
  $insertData['city'] = $req->city;
  $insertData['user_id'] = $req->user_id;
  DB::table('promoter_details')->insert($insertData);
  if(isset($req->channel_details)){
      $channel_name_arr = $req->channel_details;
}else{
  $channel_name_arr = array();
}

foreach ($channel_name_arr as $key => $value) {

  $channelData['channel_type'] = $value['type'];
  $channelData['channel_name'] = $value['name'];
  $channelData['channel_url'] = $value['url'];
  $channelData['user_id'] = $req->user_id;

  $promotor=  DB::table('promoter_channel_details')->insertGetId($channelData);
  if(!empty($promotor)){
    $token = $this->generateToken($req->email);
    $emailsubject = "Promoter email sent to you";
    $template_message = BASE_URL.'password/reset/view/'.$token;
    $which_view_open = "Promotor Request";
    $purpose = "Promoter email sending";
    $this->saveToken($req->email,$token,$purpose);
    MailController::sendMailToPRomotor($req->email,$token,"Promotor Request");
  }


}


  return Response::json(["status" => STATUS_SUCCESS,"message"=>'Success']);

}

public function sendingMail ($email_r,$token_r,$emailsubject_r,$template_message_r,$which_view_open_r,$email_otp=null) {
      $datamessage['email'] = $email_r;
      $datamessage['token'] = $token_r;
      //$datamessage['button'] = $button_r;
      $datamessage['subject'] = $emailsubject_r;
      $datamessage['template_message'] = $template_message_r;
      $datamessage['which_view_open'] = $which_view_open_r;
      $datamessage['email_otp'] = $email_otp;
      Helpers::mailSmtpSend($datamessage);
  }




  public function myTransaction_old(Request $request){
    $this->validateLogin($request->user_id);
    $this->validate($request, [

        'user_id' => 'required',

    ]);

    $page = isset($request->page) ? $request->page : 1;

    $user_id = $request->user_id;

    $page_limit = 50;

    $finduserdetails = RegisterUser::where('id',$user_id)->select('username','email','team')->first();

    $findlastow = Transaction::orderBy('transactions.created','desc')->leftjoin('matchchallenges','matchchallenges.id','=','transactions.challengeid')->leftjoin('listmatches','listmatches.matchkey','=','matchchallenges.matchkey')->leftjoin('series','listmatches.series','=','series.id')->leftjoin('teams as t1','t1.id','=','listmatches.team1')->leftjoin('teams as t2','t2.id','=','listmatches.team2')->select('transactions.id','transactions.transaction_by','listmatches.start_date','transactions.type','transactions.challengeid','transactions.amount','transactions.created','transactions.created_at','transactions.paymentstatus','transactions.total_available_amt','transactions.transaction_id','matchchallenges.win_amount','listmatches.name','t1.team_key as team1key','series.name as seriesname','t2.team_key as team2key')->where('userid',$user_id)->where('paymentstatus','!=',PENDING)->skip(($page-1)*$page_limit)->paginate($page_limit);

    // print_r($findlastow); exit;

    $trans = json_decode(json_encode($findlastow), true);

    $current_page = $trans['current_page'];

    $per_page = $trans['per_page'];

    $total_page = floor($trans['total']/$page_limit);



    if(count($findlastow)){

      $i=0;

      foreach($findlastow as $val){

        $Json[$i]['id'] = $val->id;

        $Json[$i]['transaction_by'] = $val->transaction_by;

        if($val->transaction_by==WALLET){

          $Json[$i]['deduct_amount'] =  number_format((float)$val->amount, 2, '.', '');

          $Json[$i]['add_amount'] = '0';

        }

        else{

          $Json[$i]['add_amount'] =  number_format((float)$val->amount, 2, '.', '');

          $Json[$i]['deduct_amount'] = '0';

        }

        $Json[$i]['amount'] =  number_format((float)$val->amount, 2, '.', '');

        $Json[$i]['paymentstatus'] = $val->paymentstatus;

        $Json[$i]['available'] = number_format((float)$val->total_available_amt, 2, '.', '');

        $Json[$i]['transaction_id'] = $val->transaction_id;

       // $val->challengeid;die;

        if($val->challengeid!=0 && $val->seriesid==0){

          // $matchchallenge = MatchChallenge::where('id',$val->challengeid)->select('id','matchkey','name','win_amount')->first();

          // if(!empty($val)) {

            // $thismatch = ListMatch::where('matchkey',$matchchallenge->matchkey)->select('id','matchkey','short_name','title','start_date','team1','team2')->select('t1.short_name as team1key','t2.short_name as team2key','series.name as seriesname','listmatches.name','listmatches.start_date','listmatches.format')->first();

            ///   star   ///

            //print_r($thismatch);die;

            if(!empty($val)) {

              $Json[$i]['tour'] = $val->team1key.' VS '.$val->team2key;

              $Json[$i]['matchname'] = $val->team1key.' VS '.$val->team2key.' ('.$val->seriesname.')';

              $Json[$i]['date'] = $val->start_date;

              if($val->name!=""){

                $Json[$i]['challengename'] = $val->name;

              }else{

                $Json[$i]['challengename'] = 'Win-'.$val->win_amount;

              }

            }

          // }

        }



        if($val->type==ADD_FUND){

          $typevalue = 'Cash Added';

        }

        else if($val->type=='challenge joining fee'){

          $typevalue='Challenge Joining Fee';

          if(!empty($Json[$i]['matchname'])) {

            $typevalue .= ' For '.$Json[$i]['matchname'];

          }

          if(!empty($Json[$i]['challengename'])) {

            $typevalue .= ' '.$Json[$i]['challengename'];

          }

          echo $typevalue;

        }

        else if($val->type=='Refund amount'){

          $typevalue='Challenge Joining Fee Refund';

        }

        else if($val->type=='Refund amount'){

          $typevalue='Challenge Joining Fee Refund';

        }

        else if($val->type=='Challenge Winning Amount'){

          $typevalue='Challenge Winning Amount';

          if(!empty($Json[$i]['matchname'])) {

            $typevalue .= ' For '.$Json[$i]['matchname'];

          }

          if(!empty($Json[$i]['challengename'])) {

            $typevalue .= ' '.$Json[$i]['challengename'];

          }

        }

        else{

          $typevalue = $val->type;

        }

        $Json[$i]['transaction_type'] = ucwords($typevalue);



        if($val->seriesid!=0){

          $findseries = Series::where('id',$val->seriesid)->select('*')->first();

          $findmarathonchallenge = Marathon::where('series',$val->seriesid)->where('id',$val->challengeid)->select('name','win_amount')->first();

          if(!empty($findseries)) {

            $Json[$i]['tour'] = ucwords($findseries->name);

            $Json[$i]['matchname'] = ucwords($findseries->name);

            $Json[$i]['date'] = "";

            if(!empty($findmarathonchallenge)){

              if($findmarathonchallenge->name!=""){

                $Json[$i]['challengename'] = $findmarathonchallenge->name;

              }else{

                $Json[$i]['challengename'] = 'Win-'.$findmarathonchallenge->win_amount;

              }

            }

          }

        }

        if($finduserdetails->team!=""){

          $Json[$i]['teamname'] = $finduserdetails->team;

        }else{

          $Json[$i]['teamname'] = $finduserdetails->email;

        }

        if($finduserdetails->username!=""){

          $Json[$i]['username'] = $finduserdetails->username;

        }

        $Json[$i]['created'] = date('Y-m-d H:i:s', strtotime('+330 minutes', strtotime($val->created_at)));

        $JsonFinal[]=$Json[$i];

        $i++;

      }



      return Response::json(["status" => STATUS_SUCCESS,"result"=>["data" => $JsonFinal, "current_page" => $current_page, "per_page" => $per_page, "total" => $total_page]]);die;

    }else{

      $JsonFinal=array();

      return Response::json(["status" => STATUS_FAILURE,"message"=>"No transactions found.","result"=>["data" => $JsonFinal, "current_page" => $current_page, "per_page" => $per_page, "total" => $total_page]]);die;

      die;

    }

  }

  public function transactiondownload(Request $request)
    {



      $input = $request->all();
      $user_id = $request->user_id;

      $findlastow = Transaction::orderBy('transactions.created','desc')->leftjoin('matchchallenges','matchchallenges.id','=','transactions.challengeid')->leftjoin('listmatches','listmatches.matchkey','=','matchchallenges.matchkey')->leftjoin('series','listmatches.series','=','series.id')->leftjoin('teams as t1','t1.id','=','listmatches.team1')->leftjoin('teams as t2','t2.id','=','listmatches.team2')
      ->where(function($res) use($input)
      {
        if(@$input['start_date'] != '')
          $res->whereDate('transactions.created','>=', date("Y-m-d", strtotime($input['start_date'])));
        if(@$input['end_date'] != '')
          $res->whereDate('transactions.created','<=', date("Y-m-d", strtotime($input['end_date'])));

        if(@$input['filter']=='deposits')
          $res->where('transactions.type','=','Add Fund');
        else if(@$input['filter']=='withdraw')
          $res->where('transactions.type','=','Amount Withdrawn');
        else if(@$input['filter']=='winning')
          $res->where('transactions.type','=','Challenge winning amount');
      })
      ->select('transactions.id','transactions.transaction_by','listmatches.start_date','transactions.type','transactions.challengeid','transactions.amount','transactions.created','transactions.paymentstatus','transactions.total_available_amt','transactions.transaction_id','matchchallenges.win_amount','listmatches.name','t1.team_key as team1key','series.name as seriesname','t2.team_key as team2key')->where('userid',$user_id)->where('paymentstatus','!=',PENDING)->get();

// var_dump($findlastow);exit;
ApiController::saveCSVFILE($findlastow , $user_id , $input);
return Response::json(["status" => STATUS_SUCCESS,"message"=>'We are generating your transaction , will mail you in 5 minutes.']);

     // return Response::json(["status" => STATUS_FAILURE,"message"=>"No transactions found.","result"=>["data" => ""]]);
     die;
    }


      public static function saveCSVFILE($findlastow , $user_id , $input){

    $rand=rand(10000,1000000);
    $fileName = $user_id.'_'.$rand.time().".csv";
$csvDirectory = USERS_DIRECTORY."csv/";
        $file = fopen($csvDirectory.$fileName, "w") or die("Unable to open file!");

        $columns = array('Type', 'Transaction Id' , "Transaction Date" , "Amount");

        fputcsv($file, $columns);

                $blankArr = [
                'Type' => '',
                'Transaction Id' => '',
                'Transaction Date' => '',
                'Amount' => '',
                ];
                fputcsv($file, $blankArr);

        foreach ($findlastow as $key => $value) {

        $line = [
        'Type' => $value->type,
        'Transaction Id' => $value->transaction_id,
        'Transaction Date' => $value->created,
        'Amount' => $value->amount,
        ];
        fputcsv($file, $line);
        }

        fclose($file);

        Helpers::aws_upload_image($csvDirectory.$fileName, "uploads/users/",$fileName);

$downloadData['filename'] = USERS_DIRECTORY_URL.$fileName;
$downloadData['user_id'] = $user_id;

$findExists = DB::table('download_transactions')->where('user_id' , $user_id)->first();
if(!empty($findExists)){
  DB::table('download_transactions')->where('id'  , $findExists->id)->update($downloadData);
}else{
  DB::table('download_transactions')->insert($downloadData);
}
        unlink($csvDirectory.$fileName);


        $emailsubject = 'Recent Transactions';

        $content='<p><strong>Hello , </strong></p>';



      if(isset($input['start_date']) && !empty($input['start_date'])){
        $content.='<p>Please find link of your transactions between '.$input['start_date'].' to '.$input['end_date'].'</p>';
      }else{
          $content.='<p>Please find link of your recent transactions</p>';
      }

      // $content.='<a href="'.USERS_DIRECTORY_URL.$fileName.'">Download</a>';

$button_text ='Download';
$button_text_link = USERS_DIRECTORY_URL.$fileName;
        $msg = Helpers::mailheader();

        $msg.= Helpers::mailbody($content);

        $msg.= Helpers::mailfooter();

        $user_db = DB::table('registerusers')->where('id' , $user_id)->first();

if(!empty($user_db)){
  if(!empty($user_db->email)){

    $email = $user_db->email;
    $datamessage['email'] = $email;
    $datamessage['subject'] = $emailsubject;

     $datamessage['token'] = "";
    $datamessage['button'] = $button_text;
    $datamessage['button_link'] = $button_text_link;


    $datamessage['template_message'] = $content;
    $datamessage['which_view_open'] = "";
            $datamessage['email_otp'] = "";

    Helpers::mailSmtpSend($datamessage);

}
}



      }

    public function myTransaction(Request $request){
  $this->validateLogin($request->user_id);
  $this->validate($request, [

      'user_id' => 'required',

  ]);

  //pagination
  if(isset($request->page)){
    $request->page = $request->page + 1;
  }

  //$page = isset($request->page) ? $request->page : 1;

  $user_id = $request->user_id;
  //for filter data
  $input = $request->all();
  //end for filter data
  $page_limit = 50;

  $finduserdetails = RegisterUser::where('id',$user_id)->select('username','email','team')->first();

  $findlastow = Transaction::orderBy('transactions.created','desc')->leftjoin('matchchallenges','matchchallenges.id','=','transactions.challengeid')->leftjoin('listmatches','listmatches.matchkey','=','matchchallenges.matchkey')->leftjoin('series','listmatches.series','=','series.id')->leftjoin('teams as t1','t1.id','=','listmatches.team1')->leftjoin('teams as t2','t2.id','=','listmatches.team2')
  ->where(function($res) use($input)
  {
    if(@$input['start_date'] != ''){
      // echo strtotime($input['start_date']); exit;
      $res->where('transactions.created','>=', date("Y-m-d 00:00:00", strtotime($input['start_date'])));
    }
    if(@$input['end_date'] != '')
      $res->where('transactions.created','<=', date("Y-m-d 23:59:59", strtotime($input['end_date'])));

    if(strtolower(@$input['filter_type'])=='deposit')
      $res->where('transactions.type','=','Add Fund');
    else if(strtolower(@$input['filter_type'])=='withdraw')
      $res->where('transactions.type','=','Amount Withdrawn');
    else if(strtolower(@$input['filter_type'])=='winning')
      $res->where('transactions.type','=','Challenge winning amount');
    else if(strtolower(@$input['filter_type'])=='affiliate')
      $res->where('transactions.type','=','Join league Referral Bonus');
  })
  ->select('transactions.id','transactions.transaction_by','listmatches.start_date','transactions.type','transactions.challengeid','transactions.amount','transactions.created','transactions.paymentstatus','transactions.total_available_amt','transactions.transaction_id','matchchallenges.win_amount','listmatches.name','t1.team_key as team1key','series.name as seriesname','t2.team_key as team2key')->where('userid',$user_id)->where('paymentstatus','=','confirmed')
  ->where('paymentstatus','!=','failed')
  ->groupBy('transactions.id')
  ->paginate($page_limit,['*'],'page',$request->page);
  /*->skip(($page-1)*$page_limit)->paginate($page_limit);*/

  //print_r($findlastow); exit;

  $trans = json_decode(json_encode($findlastow), true);

  $current_page = $trans['current_page'];

  $per_page = $trans['per_page'];

  $total_page = floor($trans['total']/$page_limit);

  //for download
  // if(isset($input['is_download']) && $input['is_download']==1 && !empty($findlastow->type))
  // {
  //   DB::table('download_transactions')
  //   ->insert(['user_id'=>@$input['user_id'],'filter'=>@$input['filter'],'start_date'=>@$input['start_date'],'end_date'=>@$input['end_date']]);
  // }
  //end for download

  if(count($findlastow)){

    $i=0;

    foreach($findlastow as $val){

      $Json[$i]['id'] = $val->id;

      $Json[$i]['transaction_by'] = $val->transaction_by;

      if($val->transaction_by==WALLET){

        $Json[$i]['deduct_amount'] =  number_format((float)$val->amount, 2, '.', '');

        $Json[$i]['add_amount'] = '0';

      }

      else{

        $Json[$i]['add_amount'] =  number_format((float)$val->amount, 2, '.', '');

        $Json[$i]['deduct_amount'] = '0';

      }

      $Json[$i]['amount'] =  number_format((float)$val->amount, 2, '.', '');

      $Json[$i]['paymentstatus'] = $val->paymentstatus;

      $Json[$i]['available'] = number_format((float)$val->total_available_amt, 2, '.', '');

      $Json[$i]['transaction_id'] = $val->transaction_id;

     // $val->challengeid;die;

      if($val->challengeid!=0 && $val->seriesid==0){

        // $matchchallenge = MatchChallenge::where('id',$val->challengeid)->select('id','matchkey','name','win_amount')->first();

        // if(!empty($val)) {

          // $thismatch = ListMatch::where('matchkey',$matchchallenge->matchkey)->select('id','matchkey','short_name','title','start_date','team1','team2')->select('t1.short_name as team1key','t2.short_name as team2key','series.name as seriesname','listmatches.name','listmatches.start_date','listmatches.format')->first();

          ///   star   ///

          //print_r($thismatch);die;

          if(!empty($val)) {

            $Json[$i]['tour'] = $val->team1key.' VS '.$val->team2key;

            $Json[$i]['matchname'] = $val->team1key.' VS '.$val->team2key.' ('.$val->seriesname.')';

            $Json[$i]['date'] = $val->start_date;

            if($val->name!=""){

              $Json[$i]['challengename'] = $val->name;

            }else{

              $Json[$i]['challengename'] = 'Win-'.$val->win_amount;

            }

          }

        // }

      }



      if($val->type==ADD_FUND){

        $typevalue = 'Cash Added';

      }

      else if($val->type=='challenge joining fee'){

        $typevalue='Challenge Joining Fee';

        if(!empty($Json[$i]['matchname'])) {

          $typevalue .= ' For '.$Json[$i]['matchname'];

        }

        if(!empty($Json[$i]['challengename'])) {

          $typevalue .= ' '.$Json[$i]['challengename'];

        }

        echo $typevalue;

      }

      else if($val->type=='Refund amount'){

        $typevalue='Challenge Joining Fee Refund';

      }

      else if($val->type=='Refund amount'){

        $typevalue='Challenge Joining Fee Refund';

      }

      else if($val->type=='Challenge Winning Amount'){

        $typevalue='Challenge Winning Amount';

        if(!empty($Json[$i]['matchname'])) {

          $typevalue .= ' For '.$Json[$i]['matchname'];

        }

        if(!empty($Json[$i]['challengename'])) {

          $typevalue .= ' '.$Json[$i]['challengename'];

        }

      }

      else{

        $typevalue = $val->type;

      }

      $Json[$i]['transaction_type'] = ucwords($typevalue);



      if($val->seriesid!=0){

        $findseries = Series::where('id',$val->seriesid)->select('*')->first();

        $findmarathonchallenge = Marathon::where('series',$val->seriesid)->where('id',$val->challengeid)->select('name','win_amount')->first();

        if(!empty($findseries)) {

          $Json[$i]['tour'] = ucwords($findseries->name);

          $Json[$i]['matchname'] = ucwords($findseries->name);

          $Json[$i]['date'] = "";

          if(!empty($findmarathonchallenge)){

            if($findmarathonchallenge->name!=""){

              $Json[$i]['challengename'] = $findmarathonchallenge->name;

            }else{

              $Json[$i]['challengename'] = 'Win-'.$findmarathonchallenge->win_amount;

            }

          }

        }

      }

      if($finduserdetails->team!=""){

        $Json[$i]['teamname'] = $finduserdetails->team;

      }else{

        $Json[$i]['teamname'] = $finduserdetails->email;

      }

      if($finduserdetails->username!=""){

        $Json[$i]['username'] = $finduserdetails->username;

      }

      $Json[$i]['created'] = date('Y-m-d H:i:s', strtotime('+330 minutes', strtotime($val->created)));

      $JsonFinal[]=$Json[$i];

      $i++;

    }



    return Response::json(["status" => STATUS_SUCCESS,"result"=>["data" => $JsonFinal, "current_page" => $current_page, "per_page" => $per_page, "total" => $total_page]]);die;

  }else{

    $JsonFinal=array();

    return Response::json(["status" => STATUS_FAILURE,"message"=>"No transactions found.","result"=>["data" => $JsonFinal, "current_page" => $current_page, "per_page" => $per_page, "total" => $total_page]]);die;

    die;

  }

}



  public function userFullDetails(Request $request)

  {
    $this->validateLogin($request->user_id);
    $this->validate($request,[

    'user_id' => 'required',

    ]);



    $geturl = BASE_URL;

    $id = $request->user_id;


if(isset($request->fcmToken)){
  if(!empty($request->fcmToken)){

    $updata['fcmToken'] = $request->fcmToken;
    DB::table('registerusers')->where('id' , $id)->update($updata);

  }
}

    $totalbalances=0;$verified=0;

    $userdata = RegisterUser::where('id',$id)->first();

    // print_r($userdata);die;

    $findtotalbalanace = UserBalance::where('user_id',$id)->first();



    if(!empty($findtotalbalanace)){

      $totalbalances = round($findtotalbalanace->balance+$findtotalbalanace->winning+$findtotalbalanace->bonus,2);

    }
    if (!empty($userdata)) {
       if($userdata->mobile_verify==1 && $userdata->email_verify==1 && $userdata->pan_verify==1 && $userdata->bank_verify==1){

      $verified=1;

    }



        $msgg['id'] = $userdata->id;

        $msgg['username'] = $userdata->username;

        $msgg['mobile'] = $userdata->mobile == 0 ? 0 : (int)$userdata->mobile;

        $msgg['email'] = $userdata->email;



    if($userdata->dob!='0000-00-00'){

      $msgg['dob']=($userdata->dob == null || $userdata->dob == "" || $userdata->dob == "01-Jan-1970" || $userdata->dob == "1970-01-01") ? "" : $userdata->dob;

    }else{

      $msgg['dob']=($userdata->dob == null || $userdata->dob == "" || $userdata->dob == "01-Jan-1970" || $userdata->dob == "1970-01-01") ? "" : $userdata->dob;

    }

    if($userdata->dob=='0000-00-00'){

      $msgg['DayOfBirth'] = "";

      $msgg['MonthOfBirth'] = "";

      $msgg['YearOfBirth'] = "";

        }

    else{

      $msgg['DayOfBirth'] = date('d',strtotime($userdata->dob));

      $msgg['MonthOfBirth'] = date('m',strtotime($userdata->dob));

      $msgg['YearOfBirth'] = date('Y',strtotime($userdata->dob));



    }

        $msgg['gender'] = $userdata->gender;



        if($userdata->image==""){

      $msgg['image'] = USERS_DIRECTORY_URL.'images/defaultimage.png';

    }else{

      $msgg['image'] = $userdata->image;

    }

    if($userdata->address=="" || $userdata->address=='null'){

      $msgg['address']="";

    }else{

      $msgg['address'] = $userdata->address;

    }

    if($userdata->city=="" || $userdata->city=='null'){

      $msgg['city']="";

    }else{

      $msgg['city'] = $userdata->city;

    }

    if($userdata->pincode=="" || $userdata->pincode=='null'){

      $msgg['pincode']="";

    }else{

      $msgg['pincode'] = $userdata->pincode;

    }

    $msgg['walletamaount'] = intval($totalbalances);

    $msgg['verified'] = $verified;

        $msgg['activation_status'] = $userdata->activation_status;

        $msgg['provider'] = $userdata->provider;

        $msgg['state'] = ucwords($userdata->state);

        $msgg['country'] = $userdata->country;

        $msgg['team'] = $userdata->team;

      $msgg['emailfreeze'] = 0;


//changethis
    if($userdata->team!=""){

if($userdata->is_team_updated === 1){
      $msgg['teamfreeze'] = 1;
}else{
      $msgg['teamfreeze'] = 0;
}


    }else{

      $msgg['teamfreeze'] = 0;

    }

    if($userdata->pan_verify==1){

      $msgg['statefreeze'] = 0;

    }else{

      $msgg['statefreeze'] = 0;

    }

    if($userdata->mobile_verify==1){

      $msgg['mobilefreeze'] = 1;

    }

    else{

      $msgg['mobilefreeze'] = 0;

    }

    if($userdata->pan_verify==1){

      $msgg['dobfreeze'] = 0;

    }

    else{

      $msgg['dobfreeze'] = 0;

    }

    if($userdata->pan_verify==1){

      $msgg['namefreeze'] = 1;

    }

    else{

      $msgg['namefreeze'] = 0;

    }

        $msgg['refercode'] = $userdata->refercode;
    }


    $findchallenge = JoinedLeague::where('userid',$request->user_id)->count();

    $msgg['totalchallenges'] = $findchallenge;

    $findwinchallenge = FinalResult::where('userid',$request->user_id)->select(DB::raw('sum(amount) as totalwon'))->get();

    if(count($findwinchallenge)){

      if($findwinchallenge[0]->totalwon!=""){

        $msgg['totalwon'] = $findwinchallenge[0]->totalwon;

      }else{

        $msgg['totalwon'] = 0;

      }

    }else{

      $msgg['totalwon'] = 0;

    }

        return Response::json(["status" => STATUS_SUCCESS,"result"=>["value"=>$msgg]]);

    }


    public function requestWithdraw(Request $request){
      $this->validateLogin($request->user_id);
  date_default_timezone_set("Asia/Kolkata");

  $this->validate($request,[

  'user_id' => 'required',

  'amount' => 'required',

  'payment_type' => 'required'

  ]);
      // $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
      // $txt = json_encode($request->all())."John Doe\n";
      // fwrite($myfile, $txt);exit;

  // Helpers::check_request($request->user_id, $_SERVER);

  // $this->accessrules();

  $user_id = $userid = $request->user_id;

  $amount = $request->amount;

  $data['user_id'] = $user_id;

  $data['amount'] = $amount;

  $type = $request->payment_type;


  if($type=='bank') {
        $msgg['msg'] = "Please first complete your verification process.";
        $msgg['status'] = 3;
        $msgg['amount'] = 0;
        $msgg['wining'] = 0;
        // return Response::json(["status"=> STATUS_FAILURE,"message"=>"Bank withdraw is on hold for some time, it"]);die;

    return $this->bank_withdraw($user_id, $amount);
  } else if($type == 'bank_instant'){

    $chgs = 10;
    $deducted_amount = $amount - $chgs;
    return $this->bank_instant_withdraw($user_id, $deducted_amount , $chgs);

  }else if($type == 'paytm_instant'){
          $msgg['msg'] = "Please Use Bank withdraw";
          $msgg['status'] = 0;
          return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));
          die;
            // $amount = $request->amount;
            // $chgs = round($amount * 1.99 / 100, 2);
            // $chgs = round($chgs * 118 / 100 , 2);
            // $deducted_amount = $amount - $chgs;
            //
            //   $this->paytm_instant_withdraw($user_id, $deducted_amount , $chgs);

  }else if($type == 'paytm'){

      $msgg['msg'] = "Please Use Bank withdraw";
      $msgg['status'] = 0;
      return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));
      die;
      // // $amount = $request->amount;
      // // $chgs = round($amount * 1.99 / 100, 2);
      // // $chgs = round($chgs * 118 / 100 , 2);
      // // $deducted_amount = $amount - $chgs;
      //
      // $this->paytm_withdraw($user_id,$amount);

  }else{
    $this->paytm_withdraw($user_id,$amount);
          $msgg['msg'] = "Please Use Bank withdraw";
          $msgg['status'] = 0;
          return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));
          die;
    // $msgg['msg'] = "Please Enter Valid Type";

    // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

    // echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;
  }
  }
  public function paytm_instant_withdraw($user_id, $amount , $chgs) {

    $msgg['msg'] = "Please use bank withdraw.";

         $msgg['status'] = 0;

         $msgg['amount'] = 0;

         $msgg['wining'] = 0;
         echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

         // echo json_encode(array($msgg));die;

    $data['user_id'] = $userid = $user_id;

    $data['amount'] = $amount;

    $data['type'] = 'paytm';

    $wordlist = DB::table('withdraw')->orderBY('id','DESC')->first()->id;

    $wordCount = $wordlist+1;

    $data['withdraw_request_id'] = 'WD-'.$user_id.'-'.$wordCount;

      $data['created'] = date('Y-m-d H:i:s');

      $findverification = DB::table('registerusers')->where('activation_status','!=','deactivated')->where('id',$user_id)->first();

      if(empty($findverification)) {

        $msgg['msg'] = "There is some error please login again.";

        // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

        echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

      }

      // if(!empty($findverification)){



        if($findverification->mobile_verify!=1 || $findverification->email_verify!=1){



          $msgg['msg'] = "Please first complete your verification process.";
          $msgg['message'] = "Please first complete your verification process.";

          $msgg['status'] = 2;

          $msgg['amount'] = 0;

          $msgg['wining'] = 0;

          // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;
echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

          // echo json_encode(array($msgg));die;

        }



      //   // if(($findverification->pan_verify!=1 || $findverification->bank_verify!=1) && $data['type']=='bank'){

      //   //  $msgg['msg'] = "Please first complete your verification process.";

      //   //  $msgg['status'] = 3;

      //   //  $msgg['amount'] = 0;

      //   //  $msgg['wining'] = 0;

      //   //  echo json_encode(array($msgg));die;

      //   // }

      // }

      if($amount<10){

        $msgg['msg'] = "Withdrawl amount should be greater than 99";

        $msgg['status'] = 0;

        $msgg['amount'] = 0;

        $msgg['wining'] = 0;

        // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

        echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

      }

      if(1) {

              if($amount>10000){

        $msgg['msg'] = "Withdrawl amount should be less than 10001";

        $msgg['status'] = 0;

        $msgg['amount'] = 0;

        $msgg['wining'] = 0;

        // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

        echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

      }

      }



      if($amount > 5000) {

        // $amount = $amount * 68 / 100;

      }

      $check_multi_request = DB::table('withdraw')->where('status',9)->where('type','!=','bank')->where('user_id', $user_id)->first();



          if(!empty($check_multi_request)) {



            $msgg['msg'] = "Multiple withdraw request cannot be done.";

        $msgg['status'] = 0;

        $msgg['amount'] = 0;

        $msgg['wining'] = 0;

        // return Response::json([]);die;

        echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

            // echo json_encode(array('status' => 0, 'msg' => 'Multiple withdraw request cannot be done.','amount' => 0, "winning" => 0)); exit;

          }



          $today_date = date('Y-m-d H:i:s');

          $today_date = date('Y-m-d H:i:s', strtotime('-24 hours', strtotime($today_date)));

          $check_time_request = DB::table('withdraw')->where('created','>',$today_date)->where('user_id', $user_id)->where('type','!=','bank')->where('status','!=',-1)->first();

          if(!empty($check_time_request)) {

            $msgg['msg'] = "Multiple withdrawal cannot proceed on same day try after 24 hrs.";

        $msgg['status'] = 0;

        $msgg['amount'] = 0;

        $msgg['wining'] = 0;

        // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

        echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

            // echo json_encode(array('status' => 'error', 'message' => 'Multiple withdrawal cannot proceed on same day try after 24 hrs.'));

           //    exit;

          }



      $bal_bonus_amt=0;$bal_win_amt=0;$bal_fund_amt=0;$total_available_amt=0;

      $findlastow = DB::table('userbalances')->where('user_id',$user_id)->first();

      if(!empty($findlastow)){

        // $balance = $findlastow->balance+$findlastow->winning;

        $balance = $findlastow->winning;

        if($balance >= $amount){

          $bal_fund_amt = $findlastow->balance;

          $bal_win_amt = $findlastow->winning;

          $bal_bonus_amt = $findlastow->bonus;

          $dataq['winning'] = $balance - ($amount+$chgs);

          DB::table('userbalances')->where('id',$findlastow->id)->update($dataq);

          $data['type'] = 'paytm';

          $data['status'] = 9;
          $data['is_instant'] = 1;

          $data['charges_amount'] = $chgs;
           $withdraw_insert_id = DB::table('withdraw')->insertGetId($data);

          $total_available_amt = $findlastow->balance+$dataq['winning']+$findlastow->bonus;

          $notificationdata['userid'] = $userid;

          $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount;

          DB::table('notifications')->insert($notificationdata);

          //push notifications//

          $titleget = 'Withdraw Request!';

          //Helpers::sendnotification($titleget,$notificationdata['title'],'',$userid);

          //end push notifications//

          $transactionsdata['userid'] = $userid;

          $transactionsdata['type'] = 'Amount Withdrawn';

          $transactionsdata['transaction_id'] = $data['withdraw_request_id'];

          $transactionsdata['transaction_by'] = 'wallet';

          $transactionsdata['amount'] = $amount;

          $transactionsdata['paymentstatus'] = 'confirmed';

          $transactionsdata['withdraw_amt'] = $amount;

          $transactionsdata['bal_fund_amt'] = $bal_fund_amt;

          $transactionsdata['bal_win_amt'] = $dataq['winning'];

          $transactionsdata['bal_bonus_amt'] = $bal_bonus_amt;

          $transactionsdata['cons_win'] = $amount;

          $transactionsdata['total_available_amt'] = $total_available_amt;

          DB::table('transactions')->insert($transactionsdata);

          $tranid = time();

          $chgs_transactionsdata['userid'] = $userid;

          $chgs_transactionsdata['type'] = 'Instant Withdraw Charges';

          $chgs_transactionsdata['transaction_id'] =  'FANLINE11-WDIC-'.$tranid.'-'.$userid;

          $chgs_transactionsdata['transaction_by'] = 'wallet';

          $chgs_transactionsdata['amount'] = $chgs;

          $chgs_transactionsdata['paymentstatus'] = 'confirmed';

          $chgs_transactionsdata['withdraw_amt'] = $chgs;

          $chgs_transactionsdata['bal_fund_amt'] = $bal_fund_amt;

          $chgs_transactionsdata['bal_win_amt'] = $dataq['winning'] - $chgs;

          $chgs_transactionsdata['bal_bonus_amt'] = $bal_bonus_amt;

          $chgs_transactionsdata['cons_win'] = $chgs;

          $total_available_amt = $chgs_transactionsdata['bal_fund_amt'] + $chgs_transactionsdata['bal_win_amt'] + $chgs_transactionsdata['bal_bonus_amt'];

          $chgs_transactionsdata['total_available_amt'] = $total_available_amt;

          DB::table('transactions')->insert($chgs_transactionsdata);
          //echo 1; exit;

          // if(Helpers::paytm_request_transfer($user_id, $amount)) {

          if(0) {



                $withdraw_update_data['approved_date']=date('Y-m-d');

            $withdraw_update_data['status']=9;
            $withdraw_update_data['is_instant'] = 1;

            DB::table('withdraw')->where('id',$withdraw_insert_id)->update($withdraw_update_data);



            $tdata['paymentstatus'] = 'confirmed';

            //$tdata['created'] = $findtransactiondate->created;

            $findtransactiondetails  = DB::table('transactions')->where('transaction_id',$data['withdraw_request_id'])->update($tdata);



                $notificationdata['userid'] = $user_id;

            $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount.' successfully approved';

            DB::table('notifications')->insert($notificationdata);

            //push notifications//

            $titleget = 'Withdraw successfull!';

            // Helpers::sendnotification($titleget,$notificationdata['title'],'',$user_id);



            $msgg['msg'] = "Your request for  withdrawl amount of Rs ".$amount." is successful. Please check your account.";

            $msgg['status'] = 1;

            $msgg['amount'] = $total_available_amt-$amount;

            $msgg['wining'] = $bal_win_amt-$amount;

            // return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

            echo json_encode(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

            //end push notifications//

              } else {

                $notificationdata['userid'] = $user_id;

            $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount;

            DB::table('notifications')->insert($notificationdata);

            //push notifications//

            $titleget = 'Withdraw Request!';

            //Helpers::sendnotification($titleget,$notificationdata['title'],'',$user_id);



                $msgg['msg'] = "Your request for  withdrawl amount of Rs ".$amount." is sent successfully. You will  get  it in 5 minutes";

            $msgg['status'] = 1;

            $msgg['amount'] = $total_available_amt-$amount;

            $msgg['wining'] = $bal_win_amt-$amount;

            // return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

            echo json_encode(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

              }





        }

        else{

          $msgg['msg'] = "You can withdraw only ".$balance." rupees.";

          $msgg['status'] = 0;

          $msgg['amount'] = 0;

          $msgg['wining'] = 0;

          // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

          echo json_encode(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

        }

      }else{

        $msgg['msg'] = "Invalid user id.";

        $msgg['status'] = 0;

        // return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

        echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

      }



  }

  public static function bank_instant_withdraw($user_id=0, $amount=0,$chgs) {

          $data['user_id'] = $userid = $user_id;

          $data['amount'] = $amount;

          $data['type'] = 'bank';

          $wordlist = DB::table('withdraw')->orderBY('id','DESC')->first()->id;

          $wordCount = $wordlist+1;

          $data['withdraw_request_id'] = 'WD-'.$user_id.'-'.$wordCount;

            $data['created'] = date('Y-m-d H:i:s');

            $findverification = DB::table('registerusers')->where('activation_status','!=','deactivated')->where('id',$user_id)->first();

            if(empty($findverification)) {

              $msgg['msg'] = "There is some error please login again.";

               return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

              //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

            }

            if(!empty($findverification)){

              if($findverification->mobile_verify!=1 || $findverification->email_verify!=1){

                $msgg['msg'] = "Please first complete your verification process.";

                $msgg['status'] = 3;

                $msgg['amount'] = 0;

                $msgg['wining'] = 0;

                return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

              }



              if(($findverification->pan_verify!=1 || $findverification->bank_verify!=1) && $data['type']=='bank'){

                $msgg['msg'] = "Please first complete your verification process.";

                $msgg['status'] = 3;

                $msgg['amount'] = 0;

                $msgg['wining'] = 0;

                 return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

              }

            }
            // echo $amount; exit;
            if($amount<90){

              $msgg['msg'] = "Withdrawl amount should be greater than 100";

              $msgg['status'] = 0;

              $msgg['amount'] = 0;

              $msgg['wining'] = 0;

              // echo 'yes'; exit;

              return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

              //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg)); die;

            }



                    // if($user_id!=3682) {

                    if($amount>200000){

              $msgg['msg'] = "Withdrawl amount should be less than 200000";

              $msgg['status'] = 0;

              $msgg['amount'] = 0;

              $msgg['wining'] = 0;

              return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

              //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

            }

            // }



            // if($amount > 10000) {

            //  $amount = $amount * 68 / 100;

            // }


            $today_date = date('Y-m-d');
            // $check_multi_request = DB::table('withdraw')->whereIn('status',array(0,3,4))->where('type','bank')->where('user_id', $user_id)->where('created','LIKE',$today_date)->first();
             $check_multi_request = DB::table('withdraw')->where('status','!=','-1')->where('type','bank')->where('user_id', $user_id)->where('created','like','%'.$today_date.'%')->first();



                if(!empty($check_multi_request)) {

                  $msgg['msg'] = "Multiple withdraw request cannot be done on same day.";

              $msgg['status'] = 0;

              $msgg['amount'] = 0;

              $msgg['wining'] = 0;

               return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

              //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

                  // echo json_encode(array('status' => 0, 'msg' => 'Multiple withdraw request cannot be done.','amount' => 0, "winning" => 0)); exit;

                }



                $today_date = date('Y-m-d H:i:s');

                $today_date = date('Y-m-d H:i:s', strtotime('-24 hours', strtotime($today_date)));

                /*$check_time_request = DB::table('withdraw')->where('created','>',$today_date)->where('user_id', $user_id)->where('type','bank')->where('status','!=',-1)->first();

                if(!empty($check_time_request)&& $user_id !=717142) {

                  $msgg['msg'] = "Multiple withdrawal cannot proceed on same day try after 24 hrs.";

              $msgg['status'] = 0;

              $msgg['amount'] = 0;

              $msgg['wining'] = 0;



              // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

              echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

                  // echo json_encode(array('status' => 'error', 'message' => 'Multiple withdrawal cannot proceed on same day try after 24 hrs.'));

                 //    exit;

                }*/



            $bal_bonus_amt=0;$bal_win_amt=0;$bal_fund_amt=0;$total_available_amt=0;

            $findlastow = DB::table('userbalances')->where('user_id',$user_id)->first();

            if(!empty($findlastow)){

              // $balance = $findlastow->balance+$findlastow->winning;

              $balance = $findlastow->winning;

              if($balance >= $amount){

                $bal_fund_amt = $findlastow->balance;

                $bal_win_amt = $findlastow->winning;

                $bal_bonus_amt = $findlastow->bonus;

                $dataq['winning'] = $balance - ($amount+$chgs);

                DB::table('userbalances')->where('id',$findlastow->id)->update($dataq);

                $data['type'] = 'bank';
                $data['is_instant'] = 1;
                $data['status'] = 11;
                $data['charges_amount'] = $chgs;
                $withdraw_insert_id = DB::table('withdraw')->insertGetId($data);

                $total_available_amt = $findlastow->balance+$dataq['winning']+$findlastow->bonus;

                $notificationdata['userid'] = $userid;

                $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount;

                DB::table('notifications')->insert($notificationdata);

                //push notifications//

                $titleget = 'Withdraw Request!';

                //Helpers::sendnotification($titleget,$notificationdata['title'],'',$userid);

                //end push notifications//

                $transactionsdata['userid'] = $userid;

                $transactionsdata['type'] = 'Amount Withdrawn';

                $transactionsdata['transaction_id'] = $data['withdraw_request_id'];

                $transactionsdata['transaction_by'] = 'wallet';

                $transactionsdata['amount'] = $amount;

                $transactionsdata['paymentstatus'] = 'confirmed';

                $transactionsdata['withdraw_amt'] = $amount;

                $transactionsdata['bal_fund_amt'] = $bal_fund_amt;

                $transactionsdata['bal_win_amt'] = $dataq['winning'];

                $transactionsdata['bal_bonus_amt'] = $bal_bonus_amt;

                $transactionsdata['cons_win'] = $amount;

                $transactionsdata['total_available_amt'] = $total_available_amt;

                DB::table('transactions')->insert($transactionsdata);

                $tranid = time();

                $chgs_transactionsdata['userid'] = $userid;

                $chgs_transactionsdata['type'] = 'Instant Withdraw Charges';

                $chgs_transactionsdata['transaction_id'] =  'FANLINE11-WDIC-'.$tranid.'-'.$userid;

                $chgs_transactionsdata['transaction_by'] = 'wallet';

                $chgs_transactionsdata['amount'] = $chgs;

                $chgs_transactionsdata['paymentstatus'] = 'confirmed';

                $chgs_transactionsdata['withdraw_amt'] = $chgs;

                $chgs_transactionsdata['bal_fund_amt'] = $bal_fund_amt;

                $chgs_transactionsdata['bal_win_amt'] = $dataq['winning'] - $chgs;

                $chgs_transactionsdata['bal_bonus_amt'] = $bal_bonus_amt;

                $chgs_transactionsdata['cons_win'] = $chgs;

                $total_available_amt = $chgs_transactionsdata['bal_fund_amt'] + $chgs_transactionsdata['bal_win_amt'] + $chgs_transactionsdata['bal_bonus_amt'];

                $chgs_transactionsdata['total_available_amt'] = $total_available_amt;

                DB::table('transactions')->insert($chgs_transactionsdata);
                //echo 1; exit;

                if(0) {



                      $withdraw_update_data['approved_date']=date('Y-m-d');

                  $withdraw_update_data['status']=11;
                  $withdraw_update_data['is_instant']=1;
                  // $withdraw_update_data['charges_amount'] = $chgs;
                  DB::table('withdraw')->where('id',$withdraw_insert_id)->update($withdraw_update_data);



                  $tdata['paymentstatus'] = 'confirmed';

                  //$tdata['created'] = $findtransactiondate->created;

                  $findtransactiondetails  = DB::table('transactions')->where('transaction_id',$data['withdraw_request_id'])->update($tdata);



                      $notificationdata['userid'] = $user_id;

                  $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount.' successfully approved';

                  DB::table('notifications')->insert($notificationdata);

                  //push notifications//

                  $titleget = 'Withdraw successfull!';

                  Helpers::sendnotification($titleget,$notificationdata['title'],'',$user_id);



                  $msgg['msg'] = "Your request for  withdrawl amount of Rs ".$amount." is successful. Please check your account.";

                  $msgg['status'] = 1;

                  $msgg['amount'] = $total_available_amt-$amount;

                  $msgg['wining'] = $bal_win_amt-$amount;

                   return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                  //echo json_encode(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

                  //end push notifications//

                    } else {

                      if(1) {

                        $notificationdata['userid'] = $user_id;

                    $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount;

                    DB::table('notifications')->insert($notificationdata);

                    //push notifications//

                    $titleget = 'Withdraw Request!';

                    //Helpers::sendnotification($titleget,$notificationdata['title'],'',$user_id);



                        $msgg['msg'] = "Your request for  withdrawl amount of Rs ".$amount." is sent successfully. You will  get  it in 24 hours";

                    $msgg['status'] = 1;

                    $msgg['amount'] = $total_available_amt-$amount;

                    $msgg['wining'] = $bal_win_amt-$amount;

                     return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                    //echo json_encode(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

                  }

                    }





              }

              else{

                $msgg['msg'] = "You can withdraw only ".$balance." rupees.";

                $msgg['status'] = 0;

                $msgg['amount'] = 0;

                $msgg['wining'] = 0;

                 return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

              }

            }else{

              $msgg['msg'] = "Invalid user id.";

              $msgg['status'] = 0;

               return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

              //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

            }



        }

        public static function bank_withdraw($user_id=0, $amount=0) {

            $data['user_id'] = $userid = $user_id;

            $data['amount'] = $amount;

            $data['type'] = 'bank';

            $wordlist = DB::table('withdraw')->get();

            $wordCount = count($wordlist)+1;

            $data['withdraw_request_id'] = 'WD-'.$user_id.'-'.$wordCount;

              $data['created'] = date('Y-m-d H:i:s');

              $findverification = DB::table('registerusers')->where('activation_status','!=','deactivated')->where('id',$user_id)->first();

              if(empty($findverification)) {

                $msgg['msg'] = "There is some error please login again.";

                // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

              }

              if(!empty($findverification)){

                if($findverification->mobile_verify!=1 || $findverification->email_verify!=1){

                  $msgg['msg'] = "Please first complete your verification process.";

                  $msgg['status'] = 3;

                  $msgg['amount'] = 0;

                  $msgg['wining'] = 0;

                  // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                  return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

                }



                if(($findverification->pan_verify!=1 || $findverification->bank_verify!=1) && $data['type']=='bank'){

                  $msgg['msg'] = "Please first complete your verification process.";

                  $msgg['status'] = 3;

                  $msgg['amount'] = 0;

                  $msgg['wining'] = 0;

                  // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                  return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

                }

              }


              if($amount<200){

                $msgg['msg'] = "Withdrawl amount should be greater than 200";

                $msgg['status'] = 0;

                $msgg['amount'] = 0;

                $msgg['wining'] = 0;

                // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

              }



                      // if($user_id!=3682) {

                if($amount>200000){

                $msgg['msg'] = "Withdrawl amount should be less than 200000";

                $msgg['status'] = 0;

                $msgg['amount'] = 0;

                $msgg['wining'] = 0;

                // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

              }
              //  echo "asdfghj"; exit;
              // }



              // if($amount > 10000) {

              //  $amount = $amount * 68 / 100;

              // }


           $today_date = date('Y-m-d');
              // $check_multi_request = DB::table('withdraw')->whereIn('status',array(0,3,4))->where('type','bank')->where('user_id', $user_id)->where('created','LIKE',$today_date)->first();
               $check_multi_request = DB::table('withdraw')->where('status','!=','-1')->where('user_id', $user_id)->where('created','like','%'.$today_date.'%')->first();

               // var_dump($check_multi_request); exit;

                  if(!empty($check_multi_request)) {
                    $msgg['msg'] = "Multiple withdraw request cannot be done on same day.";
                    $msgg['status'] = 0;
                    $msgg['amount'] = 0;
                    $msgg['wining'] = 0;
                    // echo 112345678; exit;
                return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);
                die;
                //return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

                    // return Response::json(array('status' => 0, 'msg' => 'Multiple withdraw request cannot be done.','amount' => 0, "winning" => 0)); exit;

                  }



                  $today_date = date('Y-m-d H:i:s');

                  $today_date = date('Y-m-d H:i:s', strtotime('-24 hours', strtotime($today_date)));

                  /*$check_time_request = DB::table('withdraw')->where('created','>',$today_date)->where('user_id', $user_id)->where('type','bank')->where('status','!=',-1)->first();

                  if(!empty($check_time_request)&& $user_id !=717142) {

                    $msgg['msg'] = "Multiple withdrawal cannot proceed on same day try after 24 hrs.";

                $msgg['status'] = 0;

                $msgg['amount'] = 0;

                $msgg['wining'] = 0;



                // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

                    // return Response::json(array('status' => 'error', 'message' => 'Multiple withdrawal cannot proceed on same day try after 24 hrs.'));

                   //    exit;

                  }*/



              $bal_bonus_amt=0;$bal_win_amt=0;$bal_fund_amt=0;$total_available_amt=0;

              $findlastow = DB::table('userbalances')->where('user_id',$user_id)->first();

              if(!empty($findlastow)){

                // $balance = $findlastow->balance+$findlastow->winning;

                $balance = $findlastow->winning;

                if($balance >= $amount){

                  $bal_fund_amt = $findlastow->balance;

                  $bal_win_amt = $findlastow->winning;

                  $bal_bonus_amt = $findlastow->bonus;

                  $dataq['winning'] = $balance - $amount;

                  DB::table('userbalances')->where('id',$findlastow->id)->update($dataq);

                  $data['type'] = 'bank';

                  $data['status'] = 0;

                  $withdraw_insert_id = DB::table('withdraw')->insertGetId($data);

                  $total_available_amt = $findlastow->balance+$dataq['winning']+$findlastow->bonus;

                  $notificationdata['userid'] = $userid;

                  $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount;

                  DB::table('notifications')->insert($notificationdata);

                  //push notifications//

                  $titleget = 'Withdraw Request!';

                  //Helpers::sendnotification($titleget,$notificationdata['title'],'',$userid);

                  //end push notifications//

                  $transactionsdata['userid'] = $userid;

                  $transactionsdata['type'] = 'Amount Withdrawn';

                  $transactionsdata['transaction_id'] = $data['withdraw_request_id'];

                  $transactionsdata['transaction_by'] = 'wallet';

                  $transactionsdata['amount'] = $amount;

                  $transactionsdata['paymentstatus'] = 'confirmed';

                  $transactionsdata['withdraw_amt'] = $amount;



                  $transactionsdata['bal_fund_amt'] = $bal_fund_amt;

                  $transactionsdata['bal_win_amt'] = $dataq['winning'];

                  $transactionsdata['bal_bonus_amt'] = $bal_bonus_amt;

                  $transactionsdata['cons_win'] = $amount;

                  $transactionsdata['total_available_amt'] = $total_available_amt;

                  DB::table('transactions')->insert($transactionsdata);

                  //echo 1; exit;

                  if(0) {



                        $withdraw_update_data['approved_date']=date('Y-m-d');

                    $withdraw_update_data['status']=1;

                    DB::table('withdraw')->where('id',$withdraw_insert_id)->update($withdraw_update_data);



                    $tdata['paymentstatus'] = 'confirmed';

                    //$tdata['created'] = $findtransactiondate->created;

                    $findtransactiondetails  = DB::table('transactions')->where('transaction_id',$data['withdraw_request_id'])->update($tdata);



                        $notificationdata['userid'] = $user_id;

                    $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount.' successfully approved';

                    DB::table('notifications')->insert($notificationdata);

                    //push notifications//

                    $titleget = 'Withdraw successfull!';

                    Helpers::sendnotification($titleget,$notificationdata['title'],'',$user_id);



                    $msgg['msg'] = "Your request for  withdrawl amount of Rs ".$amount." is successful. Please check your account.";

                    $msgg['status'] = 1;

                    $msgg['amount'] = $total_available_amt-$amount;

                    $msgg['wining'] = $bal_win_amt-$amount;

                    // return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                    return Response::json(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

                    //end push notifications//

                      } else {

                        if(1) {

                          $notificationdata['userid'] = $user_id;

                      $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount;

                      DB::table('notifications')->insert($notificationdata);

                      //push notifications//

                      $titleget = 'Withdraw Request!';

                      //Helpers::sendnotification($titleget,$notificationdata['title'],'',$user_id);



                          $msgg['msg'] = "Your request for  withdrawl amount of Rs ".$amount." is sent successfully. You will  get  it in 24 hours";

                      $msgg['status'] = 1;

                      $msgg['amount'] = $total_available_amt-$amount;

                      $msgg['wining'] = $bal_win_amt-$amount;

                      // return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                      return Response::json(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

                    }

                      }





                }

                else{

                  $msgg['msg'] = "You can withdraw only ".$balance." rupees.";

                  $msgg['status'] = 0;

                  $msgg['amount'] = 0;

                  $msgg['wining'] = 0;

                  // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                  return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

                }

              }else{

                $msgg['msg'] = "Invalid user id.";

                $msgg['status'] = 0;

                // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                return Response::json(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

              }



          }


  public static function bank_withdraw_vision11_code($user_id=0, $amount=0) {

      $data['user_id'] = $userid = $user_id;

      $data['amount'] = $amount;

      $data['type'] = 'bank';

      $wordlist = DB::table('withdraw')->orderBY('id','DESC')->first()->id;

      $wordCount = $wordlist+1;

      $data['withdraw_request_id'] = 'WD-'.$user_id.'-'.$wordCount;

        $data['created'] = date('Y-m-d H:i:s');

        $findverification = DB::table('registerusers')->where('activation_status','!=','deactivated')->where('id',$user_id)->first();

        if(empty($findverification)) {

          $msgg['msg'] = "There is some error please login again.";

           return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

          //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

        }

        if(!empty($findverification)){

          if($findverification->mobile_verify!=1 || $findverification->email_verify!=1){

            $msgg['msg'] = "Please first complete your verification process.";

            $msgg['status'] = 3;

            $msgg['amount'] = 0;

            $msgg['wining'] = 0;

             return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

            //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

          }



          if(($findverification->pan_verify!=1 || $findverification->bank_verify!=1) && $data['type']=='bank'){

            $msgg['msg'] = "Please first complete your verification process.";

            $msgg['status'] = 3;

            $msgg['amount'] = 0;

            $msgg['wining'] = 0;

             return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

            //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

          }

        }

        if($amount<100){

          $msgg['msg'] = "Withdrawl amount should be greater than 200";

          $msgg['status'] = 0;

          $msgg['amount'] = 0;

          $msgg['wining'] = 0;

           return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

          //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

        }



                // if($user_id!=3682) {

                if($amount>200000){

          $msgg['msg'] = "Withdrawl amount should be less than 200000";

          $msgg['status'] = 0;

          $msgg['amount'] = 0;

          $msgg['wining'] = 0;

           return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

          //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

        }

        // }



        // if($amount > 10000) {

        //  $amount = $amount * 68 / 100;

        // }


        $today_date = date('Y-m-d');
        // $check_multi_request = DB::table('withdraw')->whereIn('status',array(0,3,4))->where('type','bank')->where('user_id', $user_id)->where('created','LIKE',$today_date)->first();
         $check_multi_request = DB::table('withdraw')->where('status','!=','-1')->where('type','bank')->where('user_id', $user_id)->where('created','like','%'.$today_date.'%')->first();



            if(!empty($check_multi_request)) {

              $msgg['msg'] = "Multiple withdraw request cannot be done on same day.";

          $msgg['status'] = 0;

          $msgg['amount'] = 0;

          $msgg['wining'] = 0;

           return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

          //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

              // echo json_encode(array('status' => 0, 'msg' => 'Multiple withdraw request cannot be done.','amount' => 0, "winning" => 0)); exit;

            }



            $today_date = date('Y-m-d H:i:s');

            $today_date = date('Y-m-d H:i:s', strtotime('-24 hours', strtotime($today_date)));

            /*$check_time_request = DB::table('withdraw')->where('created','>',$today_date)->where('user_id', $user_id)->where('type','bank')->where('status','!=',-1)->first();

            if(!empty($check_time_request)&& $user_id !=717142) {

              $msgg['msg'] = "Multiple withdrawal cannot proceed on same day try after 24 hrs.";

          $msgg['status'] = 0;

          $msgg['amount'] = 0;

          $msgg['wining'] = 0;



          // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

          echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

              // echo json_encode(array('status' => 'error', 'message' => 'Multiple withdrawal cannot proceed on same day try after 24 hrs.'));

             //    exit;

            }*/



        $bal_bonus_amt=0;$bal_win_amt=0;$bal_fund_amt=0;$total_available_amt=0;

        $findlastow = DB::table('userbalances')->where('user_id',$user_id)->first();

        if(!empty($findlastow)){

          // $balance = $findlastow->balance+$findlastow->winning;

          $balance = $findlastow->winning;

          if($balance >= $amount){

            $bal_fund_amt = $findlastow->balance;

            $bal_win_amt = $findlastow->winning;

            $bal_bonus_amt = $findlastow->bonus;

            $dataq['winning'] = $balance - $amount;

            DB::table('userbalances')->where('id',$findlastow->id)->update($dataq);

            $data['type'] = 'bank';

            $data['status'] = 0;

            $withdraw_insert_id = DB::table('withdraw')->insertGetId($data);

            $total_available_amt = $findlastow->balance+$dataq['winning']+$findlastow->bonus;

            $notificationdata['userid'] = $userid;

            $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount;

            DB::table('notifications')->insert($notificationdata);

            //push notifications//

            $titleget = 'Withdraw Request!';

            //Helpers::sendnotification($titleget,$notificationdata['title'],'',$userid);

            //end push notifications//

            $transactionsdata['userid'] = $userid;

            $transactionsdata['type'] = 'Amount Withdrawn';

            $transactionsdata['transaction_id'] = $data['withdraw_request_id'];

            $transactionsdata['transaction_by'] = 'wallet';

            $transactionsdata['amount'] = $amount;

            $transactionsdata['paymentstatus'] = 'confirmed';

            $transactionsdata['withdraw_amt'] = $amount;



            $transactionsdata['bal_fund_amt'] = $bal_fund_amt;

            $transactionsdata['bal_win_amt'] = $dataq['winning'];

            $transactionsdata['bal_bonus_amt'] = $bal_bonus_amt;

            $transactionsdata['cons_win'] = $amount;

            $transactionsdata['total_available_amt'] = $total_available_amt;

            DB::table('transactions')->insert($transactionsdata);

            //echo 1; exit;

            if(0) {



                  $withdraw_update_data['approved_date']=date('Y-m-d');

              $withdraw_update_data['status']=1;

              DB::table('withdraw')->where('id',$withdraw_insert_id)->update($withdraw_update_data);



              $tdata['paymentstatus'] = 'confirmed';

              //$tdata['created'] = $findtransactiondate->created;

              $findtransactiondetails  = DB::table('transactions')->where('transaction_id',$data['withdraw_request_id'])->update($tdata);



                  $notificationdata['userid'] = $user_id;

              $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount.' successfully approved';

              DB::table('notifications')->insert($notificationdata);

              //push notifications//

              $titleget = 'Withdraw successfull!';

              Helpers::sendnotification($titleget,$notificationdata['title'],'',$user_id);



              $msgg['msg'] = "Your request for  withdrawl amount of Rs ".$amount." is successful. Please check your account.";

              $msgg['status'] = 1;

              $msgg['amount'] = $total_available_amt-$amount;

              $msgg['wining'] = $bal_win_amt-$amount;

               return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

              //echo json_encode(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

              //end push notifications//

                } else {

                  if(1) {

                    $notificationdata['userid'] = $user_id;

                $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount;

                DB::table('notifications')->insert($notificationdata);

                //push notifications//

                $titleget = 'Withdraw Request!';

                //Helpers::sendnotification($titleget,$notificationdata['title'],'',$user_id);



                    $msgg['msg'] = "Your request for  withdrawl amount of Rs ".$amount." is sent successfully. You will  get  it in 24 hours";

                $msgg['status'] = 1;

                $msgg['amount'] = $total_available_amt-$amount;

                $msgg['wining'] = $bal_win_amt-$amount;

                 return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

                //echo json_encode(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

              }

                }





          }

          else{

            $msgg['msg'] = "You can withdraw only ".$balance." rupees.";

            $msgg['status'] = 0;

            $msgg['amount'] = 0;

            $msgg['wining'] = 0;

             return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

            //echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

          }

        }else{

          $msgg['msg'] = "Invalid user id.";

          $msgg['status'] = 0;

          return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

        //  echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

        }



    }



    public function paytm_withdraw($user_id, $amount) {

      $msgg['msg'] = "Please use bank withdraw.";

           $msgg['status'] = 0;

           $msgg['amount'] = 0;

           $msgg['wining'] = 0;
           echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

           // echo json_encode(array($msgg));die;

      $data['user_id'] = $userid = $user_id;

      $data['amount'] = $amount;

      $data['type'] = 'paytm';

      $wordlist = DB::table('withdraw')->orderBY('id','DESC')->first()->id;

      $wordCount = $wordlist+1;

      $data['withdraw_request_id'] = 'WD-'.$user_id.'-'.$wordCount;

        $data['created'] = date('Y-m-d H:i:s');

        $findverification = DB::table('registerusers')->where('activation_status','!=','deactivated')->where('id',$user_id)->first();

        if(empty($findverification)) {

          $msgg['msg'] = "There is some error please login again.";

          // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

          echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

        }

        // if(!empty($findverification)){



          if($findverification->mobile_verify!=1 || $findverification->email_verify!=1){



            $msgg['msg'] = "Please first complete your verification process.";

            $msgg['status'] = 3;

            $msgg['amount'] = 0;

            $msgg['wining'] = 0;

            echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;
            // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

            // echo json_encode(array($msgg));die;

          }



        //   // if(($findverification->pan_verify!=1 || $findverification->bank_verify!=1) && $data['type']=='bank'){

        //   //  $msgg['msg'] = "Please first complete your verification process.";

        //   //  $msgg['status'] = 3;

        //   //  $msgg['amount'] = 0;

        //   //  $msgg['wining'] = 0;

        //   //  echo json_encode(array($msgg));die;

        //   // }

        // }

        if($amount<90){

          $msgg['msg'] = "Withdrawl amount should be greater than 99";

          $msgg['status'] = 0;

          $msgg['amount'] = 0;

          $msgg['wining'] = 0;

          // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

          echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));
          die;

        }

        if(1) {

                if($amount>10000){

          $msgg['msg'] = "Withdrawl amount should be less than 10001";

          $msgg['status'] = 0;

          $msgg['amount'] = 0;

          $msgg['wining'] = 0;

          // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

          echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

        }

        }



        if($amount > 5000) {

          // $amount = $amount * 68 / 100;

        }

        $check_multi_request = DB::table('withdraw')->where('status',0)->where('type','!=','bank')->where('user_id', $user_id)->first();



            if(!empty($check_multi_request)) {



              $msgg['msg'] = "Multiple withdraw request cannot be done.";

          $msgg['status'] = 0;

          $msgg['amount'] = 0;

          $msgg['wining'] = 0;

          // return Response::json([]);die;

          echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

              // echo json_encode(array('status' => 0, 'msg' => 'Multiple withdraw request cannot be done.','amount' => 0, "winning" => 0)); exit;

            }



            $today_date = date('Y-m-d H:i:s');

            $today_date = date('Y-m-d H:i:s', strtotime('-24 hours', strtotime($today_date)));

            $check_time_request = DB::table('withdraw')->where('created','>',$today_date)->where('user_id', $user_id)->where('type','!=','bank')->where('status','!=',-1)->first();

            if(!empty($check_time_request)) {

              $msgg['msg'] = "Multiple withdrawal cannot proceed on same day try after 24 hrs.";

          $msgg['status'] = 0;

          $msgg['amount'] = 0;

          $msgg['wining'] = 0;

          // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

          echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

              // echo json_encode(array('status' => 'error', 'message' => 'Multiple withdrawal cannot proceed on same day try after 24 hrs.'));

             //    exit;

            }



        $bal_bonus_amt=0;$bal_win_amt=0;$bal_fund_amt=0;$total_available_amt=0;

        $findlastow = DB::table('userbalances')->where('user_id',$user_id)->first();

        if(!empty($findlastow)){

          // $balance = $findlastow->balance+$findlastow->winning;

          $balance = $findlastow->winning;

          if($balance >= $amount){

            $bal_fund_amt = $findlastow->balance;

            $bal_win_amt = $findlastow->winning;

            $bal_bonus_amt = $findlastow->bonus;

            $dataq['winning'] = $balance - $amount;

            DB::table('userbalances')->where('id',$findlastow->id)->update($dataq);

            $data['type'] = 'paytm';

             $withdraw_insert_id = DB::table('withdraw')->insertGetId($data);

            $total_available_amt = $findlastow->balance+$dataq['winning']+$findlastow->bonus;

            $notificationdata['userid'] = $userid;

            $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount;

            DB::table('notifications')->insert($notificationdata);

            //push notifications//

            $titleget = 'Withdraw Request!';

            //Helpers::sendnotification($titleget,$notificationdata['title'],'',$userid);

            //end push notifications//

            $transactionsdata['userid'] = $userid;

            $transactionsdata['type'] = 'Amount Withdrawn';

            $transactionsdata['transaction_id'] = $data['withdraw_request_id'];

            $transactionsdata['transaction_by'] = 'wallet';

            $transactionsdata['amount'] = $amount;

            $transactionsdata['paymentstatus'] = 'confirmed';

            $transactionsdata['withdraw_amt'] = $amount;



            $transactionsdata['bal_fund_amt'] = $bal_fund_amt;

            $transactionsdata['bal_win_amt'] = $dataq['winning'];

            $transactionsdata['bal_bonus_amt'] = $bal_bonus_amt;

            $transactionsdata['cons_win'] = $amount;

            $transactionsdata['total_available_amt'] = $total_available_amt;

            DB::table('transactions')->insert($transactionsdata);

            //echo 1; exit;

            // if(Helpers::paytm_request_transfer($user_id, $amount)) {

            if(0) {



                  $withdraw_update_data['approved_date']=date('Y-m-d');

              $withdraw_update_data['status']=1;

              DB::table('withdraw')->where('id',$withdraw_insert_id)->update($withdraw_update_data);



              $tdata['paymentstatus'] = 'confirmed';

              //$tdata['created'] = $findtransactiondate->created;

              $findtransactiondetails  = DB::table('transactions')->where('transaction_id',$data['withdraw_request_id'])->update($tdata);



                  $notificationdata['userid'] = $user_id;

              $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount.' successfully approved';

              DB::table('notifications')->insert($notificationdata);

              //push notifications//

              $titleget = 'Withdraw successfull!';

              // Helpers::sendnotification($titleget,$notificationdata['title'],'',$user_id);



              $msgg['msg'] = "Your request for  withdrawl amount of Rs ".$amount." is successful. Please check your account.";

              $msgg['status'] = 1;

              $msgg['amount'] = $total_available_amt-$amount;

              $msgg['wining'] = $bal_win_amt-$amount;

              // return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

              echo json_encode(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

              //end push notifications//

                } else {

                  $notificationdata['userid'] = $user_id;

              $notificationdata['title'] = 'Request For Withdraw amount rs. '.$amount;

              DB::table('notifications')->insert($notificationdata);

              //push notifications//

              $titleget = 'Withdraw Request!';

              //Helpers::sendnotification($titleget,$notificationdata['title'],'',$user_id);



                  $msgg['msg'] = "Your request for  withdrawl amount of Rs ".$amount." is sent successfully. You will  get  it in 5 minutes";

              $msgg['status'] = 1;

              $msgg['amount'] = $total_available_amt-$amount;

              $msgg['wining'] = $bal_win_amt-$amount;

              // return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

              echo json_encode(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

                }





          }

          else{

            $msgg['msg'] = "You can withdraw only ".$balance." rupees.";

            $msgg['status'] = 0;

            $msgg['amount'] = 0;

            $msgg['wining'] = 0;

            // return Response::json(["status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg]);die;

            echo json_encode(array("status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg));die;

          }

        }else{

          $msgg['msg'] = "Invalid user id.";

          $msgg['status'] = 0;

          // return Response::json(["status"=> STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]);die;

          echo json_encode(array("status"=> STATUS_FAILURE,"message"=>$msgg['msg'],"result"=>$msgg));die;

        }



    }





  public function allVerify(Request $request)
  {
      $this->validateLogin($request->user_id);
      $this->validate($request,[

        'user_id' => 'required'

      ]);

      $id = $request->user_id;

      $userdata = RegisterUser::where('id',$id)->first();

      $msgg['mobile_verify'] = $userdata->mobile_verify;

      $msgg['email_verify'] = $userdata->email_verify;

      $msgg['bank_verify'] = $userdata->bank_verify;

      $msgg['pan_verify'] = $userdata->pan_verify;
      $msgg['aadhar_verify'] = $userdata->adhar_verify;



      if($msgg['pan_verify'] == PAN_SUBMITTED_BUT_NOT_VERIFIED) {

        $pan_data = PanCard::where('userid', $id)->first();

        if(!empty($pan_data)) {

          $msgg['pan_data']['pan_holder_name'] = $pan_data->pan_name;

          $msgg['pan_data']['pan_number'] = $pan_data->pan_number;

          $msgg['pan_data']['pan_dob'] = $pan_data->pan_dob;

          $msgg['pan_data']['pan_image'] = $pan_data->image;

        }

      }



      if($msgg['bank_verify']==BANK_SUBMITTED_BUT_NOT_VERIFIED) {

        $bank_data = Bank::where('userid', $id)->first();

        if(!empty($bank_data)) {

          $msgg['bank_data']['account_number'] = $bank_data->accno;

          $msgg['bank_data']['ifsc'] = $bank_data->ifsc;

          $msgg['bank_data']['bankname'] = $bank_data->bankname;

          $msgg['bank_data']['bank_branch'] = $bank_data->bankbranch;

          $msgg['bank_data']['state'] = $bank_data->state;

          $msgg['bank_data']['bank_image'] = $bank_data->image;

        }

      }
      if($msgg['aadhar_verify']==0 || $msgg['aadhar_verify']==1) {

      $aadhar_data = DB::table('adhar_card_details')->where('userid', $id)->first();

      if(!empty($aadhar_data)) {

        $msgg['aadhar_data']['adhar_number'] = @$aadhar_data->adhar_number;

        // $msgg['aadhar_data']['virtual_adhar_id'] = @$aadhar_data->virtual_adhar_id;

        $msgg['aadhar_data']['front_image'] = @$aadhar_data->front_image;

        $msgg['aadhar_data']['back_image'] = @$aadhar_data->back_image;

      }

    }

    if($msgg['aadhar_verify']==2){

          //$findreason = PanCard::where('userid',$id)->select('comment')->first();
      $findreason = DB::table('adhar_card_details')->where('userid', $id)->select('comment')->first();
      if (!is_null($findreason)) {

      $msgg['aadhar_comment'] = $findreason->comment;

      }

    }

      if($msgg['pan_verify']==PAN_REJECTED){

        $findreason = PanCard::where('userid',$request->id)->select('comment')->first();

        if (!is_null($findreason)) {

        $msgg['pan_comment'] = $findreason->comment;

        }

      }

      if($msgg['bank_verify']==BANK_REJECTED){

        $findreason = Bank::where('userid',$request->id)->select('comment')->first();

        if (!is_null($findreason)) {

        $msgg['bank_comment'] = $findreason->comment;

        }

      }

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$msgg]);

      die;

   }



   public function seePanDetails(Request $request){
    $this->validateLogin($request->user_id);
    $this->validate($request,[

      'user_id' => 'required'

    ]);

    $id = $request->user_id;

    $JSON = array();

    $pancarddetails = PanCard::where('userid',$id)->first();

    if(!empty($pancarddetails)){

      $JSON['panname'] = strtoupper($pancarddetails->pan_name);

      $JSON['pannumber'] = strtoupper($pancarddetails->pan_number);

      $JSON['pandob'] = date('d M ,Y',strtotime($pancarddetails->pan_dob));

      $JSON['image'] = $pancarddetails->image;

      $ext = pathinfo($JSON['image'], PATHINFO_EXTENSION);

     if($ext=='pdf'){

        $JSON['imagetype'] = 'pdf';

      }else{

        $JSON['imagetype'] = 'image';

      }

      $JSON['imagetype'] = $ext ;

      $userdata = RegisterUser::where('id',$id)->first();



      $JSON['status'] = $userdata->pan_verify;
      $JSON['comment'] = $pancarddetails->comment;

    }else{

      $userdata = RegisterUser::where('id',$id)->first();
      $JSON['comment'] = '';

      $JSON['panname'] = "";

      $JSON['pannumber'] = "";

      $JSON['pandob'] = "";

      $JSON['image'] = "";

      $ext = "";


      if($ext=='pdf'){

        $JSON['imagetype'] = "";

      }else{

        $JSON['imagetype'] = "";

      }

      $JSON['imagetype'] = "";

      $userdata = RegisterUser::where('id',$id)->first();

      $JSON['status'] = $userdata->pan_verify;

    }

    return Response::json(["status" => STATUS_SUCCESS,"result"=>$JSON]);

    die;

  }


  public function seebankdetails(Request $request){
    $this->validateLogin($request->user_id);

    $this->validate($request,[

      'user_id' => 'required'

    ]);

    $id = $request->user_id;

    $JSON = array();

    $pancarddetails = Bank::where('userid',$id)->where('status' , '!=' , '2')->first();

    if(!empty($pancarddetails)){

      $JSON[0]['accno'] = $pancarddetails->accno;

      $JSON[0]['ifsc'] = strtoupper($pancarddetails->ifsc);

      $JSON[0]['bankname'] = strtoupper($pancarddetails->bankname);
      $JSON[0]['ac_holder_name'] = $pancarddetails->ac_holder_name;

      $JSON[0]['bankbranch'] = strtoupper($pancarddetails->bankbranch);

      $JSON[0]['state'] = strtoupper($pancarddetails->state);

      $JSON[0]['image'] = $pancarddetails->image;

      $ext = pathinfo($JSON[0]['image'], PATHINFO_EXTENSION);

       if($ext=='pdf'){

        $JSON[0]['imagetype'] = 'pdf';

      }else{

        $JSON[0]['imagetype'] = 'image';

      }

      $JSON[0]['imagetype'] = $ext;

      $userdata = RegisterUser::where('id',$id)->first();

      $JSON[0]['status'] = $userdata->bank_verify;
      $JSON[0]['comment'] = $pancarddetails->comment;

    }else{

      $userdata = RegisterUser::where('id',$id)->first();

      $JSON[0]['status'] = $userdata->bank_verify;
      $bankComment = Bank::where('userid',$id)->first();
      $JSON[0]['comment'] = @$bankComment->comment ? $bankComment->comment : '';


    }

    return Response::json(["status" => STATUS_SUCCESS,"result"=>$JSON]);

    die;

  }



  public function emailUpdate(Request $request){

    $this->validate($request,[

      'id' => 'required',

      'preferance_email' => 'required|unique:registerusers',

      'feature' => 'required',

      'help' => 'required',

      'offer' => 'required',

    ]);



    $userexist = RegisterUser::where('preferance_email',$request->preferance_email)->first();

    if (empty($userexist)) {

      $user = RegisterUser::where('id',$request->id)->first();

      $user->feature = $request->feature;

      $user->preferance_email = $request->preferance_email;

      $user->help = $request->help;

      $user->offer = $request->offer;

      $user->transaction = 1;

      $user->save();

      return Response::json(["status" => STATUS_SUCCESS,"message"=>"Done."]);

    } else {

      return Response::json(["status" => STATUS_FAILURE,"message"=> "Already exist."]);

    }

  }

  public function refreshScoresNew(Request $request) {

    date_default_timezone_set("Asia/Kolkata");

     $this->validate($request,[

      'matchkey' => 'required',

      'user_id'   => 'required'

    ]);


 $myfile = fopen("refreshScoresNew.txt", "w") or die("Unable to open file!");
 $txt = json_encode($request->all());
 fwrite($myfile, $txt);
 fclose($myfile);

    $today_date = $this->getDateCommon();
    $matchkey="";

    if(!empty($request->matchkey)){

        $matchkey = $data['matchkey'] =  $request->matchkey;

    }
$fantasy_type= isset($request->fantasy_type) ? $request->fantasy_type :0;
if($fantasy_type == 4){
  $fantasy_type = 0;
}
$slotes_id= isset($request->slotes_id) ? $request->slotes_id :0;

    $userid =  $data['userid'] =  $request->user_id;

    $Json=array();

$isLateDeclaredVisible = 0;
$lateDeclaredtext = "";

$listmatchdetail = ListMatch::where('matchkey',$matchkey)->select('final_status','status','start_date','id' , 'is_late_declared' , 'late_declared_text','sport_type','matchkey')->first();
 // 2023-07-13 11:40:00
 // dd($listmatchdetail->final_status);
if($listmatchdetail->final_status != 'winnerdeclared' && $today_date >= '2021-10-14 14:00:00') {


  return $this->refreshScoresNew2($request,$listmatchdetail);
}

// exit;


if($listmatchdetail->final_status != 'winnerdeclared'){
  $isLateDeclaredVisible = $listmatchdetail->is_late_declared;
  $lateDeclaredtext = $listmatchdetail->late_declared_text;
}

$joinedChallengeIds = DB::table('joinedleauges')->where('userid' , $userid)->where('matchkey' , $matchkey)->pluck('challengeid');
$ContestCanceled = DB::table('matchchallenges')->where('matchkey' , $matchkey)->where('status' , 'canceled')
->whereIn('id' , $joinedChallengeIds)
->count();


if($ContestCanceled > 0){
$isLateDeclaredVisible = 1;
$lateDeclaredtext = "Your some contest has been canceled due to clash or Not filled";
}

    $queryget = DB::table('joinedleauges')
    ->where('joinedleauges.userid',$request->user_id)
    ->where('joinedleauges.matchkey',$matchkey)
    ->where('joinedleauges.fantasy_type_id',$fantasy_type)
    ->where('joinedleauges.slotes_id',$slotes_id)
    ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
    ->where('matchchallenges.status','!=','canceled');

    $queryget->leftJoin('leaderboard', function($join) {

      // $join->on('matchchallenges.id','=','leaderboard.challenge_id');

      // $join->on('joinedleauges.userid','=','leaderboard.user_id');
      $join->on('joinedleauges.id','=','leaderboard.join_id');

    });

    $queryget->leftJoin('finalresults', function($join) {

      // $join->on('matchchallenges.id','=','finalresults.challengeid');

      $join->on('joinedleauges.id','=','finalresults.joinedid');

    });

    $queryget->leftJoin('matchpricecards','matchchallenges.id','=','matchpricecards.challenge_id');

    // $queryget->where('matchchallenges.marathon','<>',1);

    // $queryget->where(function($query){

      // $query->where('matchchallenges.status','=','closed')
      // ->where('matchchallenges.status','!=','canceled')

      // ->orWhere('matchchallenges.confirmed_challenge',1)->orWhere('matchchallenges.status','opened');

    // });


    $findmychallenges = $queryget->select(DB::raw('"'.$listmatchdetail->final_status.'" as matchstatus, CONCAT("Win Rs. ", matchchallenges.win_amount) as name, (CASE WHEN `matchchallenges`.`joinedusers`= matchchallenges.maximum_user THEN 1 ELSE 0 END) AS can_invite, "1" as status, (CASE WHEN finalresults.amount IS NULL OR finalresults.amount = "" THEN 0 ELSE ROUND(SUM(finalresults.amount),0) END) AS winningamount, (CASE WHEN MIN(leaderboard.rank) IS NULL THEN 1 ELSE MIN(leaderboard.rank) END) AS userrank, (CASE WHEN matchchallenges.challenge_type IS NULL THEN "" ELSE matchchallenges.challenge_type END) AS challenge_type, (CASE WHEN leaderboard.team_number IS NULL THEN 0 ELSE leaderboard.team_number END) AS team_number_get, CONCAT(COUNT(DISTINCT(joinedleauges.id)),"") as join_with, MAX(leaderboard.points) as points,MAX(matchpricecards.max_position) as winners, MAX(matchpricecards.price) as first_rank_prize,MIN(min_position) as min_position, MAX(max_position) as max_position'),'matchchallenges.win_amount','matchchallenges.entryfee','matchchallenges.multi_entry','matchchallenges.max_team_limit' , 'matchchallenges.confirmed_challenge as confirmed','matchchallenges.grand','joinedleauges.teamid','joinedleauges.refercode','joinedleauges.challengeid as id','joinedleauges.id as joinid','matchchallenges.joinedusers','matchchallenges.maximum_user','matchchallenges.minimum_user','matchchallenges.is_private','matchchallenges.pdf_created','matchchallenges.winning_percentage','matchchallenges.status as challenge_status','matchchallenges.challenge_type','matchchallenges.percetage_type','matchchallenges.id', 'matchchallenges.is_champion' , 'matchchallenges.champion_image', 'matchchallenges.is_gadget', 'matchchallenges.gadget_image','matchchallenges.is_offer_team')
    ->groupBy('matchchallenges.id')

    // ->orderBy('leaderboard.points','DESC')
    // ->orderBy('leaderboard.id','DESC')
    ->get()->sortBy('joinedleauges.id');
    $leaderboard_data = Leaderboard::join('joinedleauges','joinedleauges.id','leaderboard.join_id')
        ->leftJoin('finalresults' , 'finalresults.joinedid' , '=' , 'leaderboard.join_id')
        ->where('joinedleauges.userid',$request->user_id)
        ->where('joinedleauges.matchkey',$listmatchdetail->matchkey)
        ->where('joinedleauges.sport_type',$listmatchdetail->sport_type)
        ->select('leaderboard.team_id','leaderboard.team_name','leaderboard.team_number','leaderboard.points','leaderboard.rank','leaderboard.arrowname' , 'finalresults.amount','leaderboard.challenge_id')->get()->sortBy('rank');
    $leaders = array();
    // $ret = Redis::pipeline();
    foreach ($leaderboard_data as $key => $value) {
        // $value->rank = Redis::hGet($value->challenge_id.'_rank',$value->team_id);
        $leaders[$value->challenge_id][] = $value;
    }
    // $ret->exec();

    // print_r($leaderboard_data); exit;

    $i = 0;
    $totalentryfees=0;
    $total_profit = 0;
    $totalwinamount=0;

    foreach ($findmychallenges as $key => $value) {

      //for investment
      $findmychallenges[$key]->winningamount = $listmatchdetail->final_status == 'winnerdeclared' ?  DB::table('finalresults')->where('challengeid', $value->id)->where('userid', $request->user_id)->sum('amount') : 0;
      if ($value->challenge_status!='canceled') {
    $totalentryfees += $value->entryfee*$value->join_with;
    $totalwinamount += $findmychallenges[$key]->winningamount;
    $total_profit = $totalwinamount-$totalentryfees ;
  }

    //end for investment
    $findmychallenges[$key]->matchkey = $matchkey;
    $findmychallenges[$key]->joined_challenge_ids = $value->id;

  // $value->pdf_created = 1;
  if($value->pdf_created==1 ){
    // dd('dd');
    $pdfname = CDN_URL.'pdffolders/join-leauges-'.$value->id.'.pdf';
    // dd($pdfname);
    // $pdfname = IMAGE_CDN.'uploads/pdffolders/join-leauges-'.$value->id.'.pdf';
    // $pdfname = CDN_URL.'pdffolders/join-leauges-'.$value->id.'.pdf';

    $findmychallenges[$i]->pdf = $pdfname;
  }


    $findmychallenges[$key]->winners_zone = array();
      if ($value->challenge_status!='canceled') {
      $find_leaders = array();
      $find_leaders = (isset($leaders[$value->id]) && !empty($leaders[$value->id])) ? $leaders[$value->id] : array();
      foreach ($find_leaders as $key1 => $value1) {
        if($value1->rank >= @$value->min_position && $value1->rank <= @$value->max_position) {

            $find_leaders[$key1]->is_winningzone = 1;
        } else {
          $find_leaders[$key1]->is_winningzone = 0;
        }
        $find_leaders[$key1]->min_position = $value->min_position;
        $find_leaders[$key1]->max_position = $value->max_position;
      }
      $findmychallenges[$key]->winners_zone = $find_leaders;
      }

      $i++;
    }
    // dd('here1',$today_date);
      $matchkey_secondinning = str_replace('_2','',$request->matchkey);
      $findmatch_runs_data = DB::table('matchruns')->where('matchkey',$matchkey_secondinning)->first();
      // echo"<pre>";print_r($findmatch_runs_data);exit;
      if(!empty($findmatch_runs_data))
            {
              $Json['Team1']= $findmatch_runs_data->teams1;
              $Json['Team2']= $findmatch_runs_data->teams2;
              $Json['Team1_Totalovers']= $findmatch_runs_data->overs1;
              $Json['Team1_Totalruns']= $findmatch_runs_data->runs1;
              $Json['Team1_Totalwickets']= $findmatch_runs_data->wickets1;
              $Json['Team2_Totalwickets']= $findmatch_runs_data->wickets2;
              $Json['Team2_Totalovers']= $findmatch_runs_data->overs2;
              $Json['Team2_Totalruns']= $findmatch_runs_data->runs2;

              if($findmatch_runs_data->winning_status == '0') {
                $Json['Winning_Status']= '';
              }
              else {
                $Json['Winning_Status']= $findmatch_runs_data->winning_status;
              }

              // $Json['scorecard_url'] = '';
            }
            else
            {
              if(!empty($findmatch_runs_data->teams1)) {
                $Json['Team1']= $findmatch_runs_data->teams1;
              }
              else {
                $Json['Team1']='';
              }

              if(!empty($findmatch_runs_data->teams2)) {
                $Json['Team2']= $findmatch_runs_data->teams2;
              }
              else {
                $Json['Team2']='';
              }

              $Json['Team1_Totalovers']= "0";
              $Json['Team1_Totalruns']= "0";
              $Json['Team1_Totalwickets']= "0";
              $Json['Team2_Totalwickets']= "0";
              $Json['Team2_Totalovers']= "0";
              $Json['Team2_Totalruns']= "0";
              $Json['Winning _Status']= "0";
              // $Json['scorecard_url'] = 'http://app.exchange22.com/admin/get-scorecards-view/'.$matchkey;
              // $Json['scorecard_url'] = '';
            }
            // dd($slotes_id);
                $query_data = JoinTeam::where('jointeam.matchkey',$request->matchkey)
                ->where('jointeam.fantasy_type_id',$fantasy_type)
                ->where('jointeam.slotes_id',$slotes_id)
                ->join('listmatches','listmatches.matchkey','=','jointeam.matchkey')

                ->join('teams as t1','t1.id','=','listmatches.team1')

                ->join('teams as t2','t2.id','=','listmatches.team2')
                ->where('userid',$request->user_id)
                // ->where('listmatches.sport_type',$sportType->id)
                // ->orderBy('teamnumber','ASC')

                ->select('jointeam.fantasy_type_id' , 'jointeam.id','jointeam.players','jointeam.teamnumber','jointeam.matchkey','jointeam.vicecaptain','jointeam.captain','jointeam.points','listmatches.team1display' , 'listmatches.team2display','jointeam.sport_type')->get();
                $findjointeam = $query_data->sortBy('teamnumber');
                // dd($findjointeam);
                $players_arr = array();
    $players = '';
    foreach ($findjointeam as $key => $value) {
      $players .= $value->players.',';
    }
    $players_arr = array_values(array_unique(array_filter(explode(',', $players))));
    // print_r($players_arr); exit;

    foreach ($findjointeam as $key => $value) {
      $findjointeam[$key]->players_arr = $players_arr;
    }
      $c = COUNT($findjointeam);
      $total_loss = 1;
      if($total_profit < 0) {
        $total_loss = $total_profit;
      }
      // echo "Punit Gandu"; exit;
      // return $findjointeam;
      // echo"<pre>";print_r($findjointeam);exit;

      return Response::json(["status" => STATUS_SUCCESS,"result"=> [
        "contest"=> LeagueListResource::collection($findmychallenges),
        "total_investment" =>  round($totalentryfees,2),
        "total_winning" =>  round($totalwinamount,2),
        "total_profit" =>  round($total_profit,2),
        "total_loss" =>  round($total_loss,2),
        "user_teams"=>$c,
        "teams" => TeamResource::collection($findjointeam),
        "matchruns"=>array($Json),
        "is_late_declared"=>$isLateDeclaredVisible,
        "late_declared_text"=>$lateDeclaredtext,
          // "matchruns_new"=>$Json
         ]]);

       exit;
  }


  public function refreshScoresNew2(Request $request,$listmatchdetail) {

    // $this->validateLogin($request->user_id);
    date_default_timezone_set("Asia/Kolkata");

     $this->validate($request,[

      'matchkey' => 'required',

      'user_id'   => 'required'

    ]);

    $today_date = $this->getDateCommon();
    // dd($today_date);
    $matchkey="";

    if(!empty($request->matchkey)){

      $matchkey = str_replace('_2','',$request->matchkey);

        $matchkey = $data['matchkey'] =  $matchkey;

    }
$fantasy_type= isset($request->fantasy_type) ? $request->fantasy_type :0;
if($fantasy_type == 4){
  $fantasy_type = 0;
}
$slotes_id= isset($request->slotes_id) ? $request->slotes_id :0;

    $userid =  $data['userid'] =  $request->user_id;

    $Json=array();

$isLateDeclaredVisible = 0;
$lateDeclaredtext = "";

$listmatchdetail = ListMatch::where('matchkey',$matchkey)->select('final_status','status','start_date','id' , 'is_late_declared' , 'late_declared_text','sport_type','matchkey')->first();
  // dd($listmatchdetail);
if(@$listmatchdetail->final_status != 'winnerdeclared'){
  $isLateDeclaredVisible = @$listmatchdetail->is_late_declared;
  $lateDeclaredtext = @$listmatchdetail->late_declared_text;
}
$joinedChallengeIds = DB::table('joinedleauges')
->where('userid' , $userid)
->where('matchkey' , $matchkey)
->pluck('challengeid');
$ContestCanceled = DB::table('matchchallenges')->where('matchkey' , $matchkey)
->where('status' , 'canceled')
->whereIn('id' , $joinedChallengeIds)
->count();

if($ContestCanceled > 0){

  $isLateDeclaredVisible = 1;
  $lateDeclaredtext = "Your some contest has been canceled due to clash or Not filled";
}


    // $queryget = JoinedLeague::where('joinedleauges.userid',$request->user_id)
    $queryget = DB::table('joinedleauges')->where('joinedleauges.userid',$request->user_id)
    ->where('joinedleauges.matchkey',$matchkey)
    ->where('joinedleauges.fantasy_type_id',$fantasy_type)
    ->where('joinedleauges.slotes_id',$slotes_id)
    ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid');

    //->where('matchchallenges.status','!=','canceled');

    $queryget->leftJoin('matchpricecards','matchchallenges.id','=','matchpricecards.challenge_id');

    $findmychallenges = $queryget->select(DB::raw('"'.@$listmatchdetail->final_status.'" as matchstatus, CONCAT("Win Rs. ", matchchallenges.win_amount) as name, (CASE WHEN `matchchallenges`.`joinedusers`= matchchallenges.maximum_user THEN 1 ELSE 0 END) AS can_invite, "1" as status, "0" AS winningamount, "0" AS userrank, (CASE WHEN matchchallenges.challenge_type IS NULL THEN "" ELSE matchchallenges.challenge_type END) AS challenge_type, "0" AS team_number_get, CONCAT(COUNT(DISTINCT(joinedleauges.id)),"") as join_with, "0" as points,MAX(matchpricecards.max_position) as winners, MAX(matchpricecards.price) as first_rank_prize,MIN(min_position) as min_position, MAX(max_position) as max_position, GROUP_CONCAT(joinedleauges.teamid) as joined_teams'),'matchchallenges.win_amount','matchchallenges.entryfee','matchchallenges.multi_entry','matchchallenges.max_team_limit' , 'matchchallenges.confirmed_challenge as confirmed','matchchallenges.grand','joinedleauges.teamid','joinedleauges.refercode','joinedleauges.challengeid as id','joinedleauges.id as joinid','matchchallenges.joinedusers','matchchallenges.maximum_user','matchchallenges.minimum_user','matchchallenges.is_private','matchchallenges.pdf_created','matchchallenges.winning_percentage','matchchallenges.status as challenge_status','matchchallenges.challenge_type','matchchallenges.percetage_type','matchchallenges.id', 'matchchallenges.is_champion' , 'matchchallenges.champion_image', 'matchchallenges.is_gadget', 'matchchallenges.gadget_image', 'matchchallenges.is_offer_team')
    ->groupBy('matchchallenges.id')
    ->get()->sortBy('joinedleauges.id');

    $leaders = array();


    $data_user = array();

    foreach ($findmychallenges as $key => $value) {
        $joined_teams = explode(',',$value->joined_teams);

        foreach ($joined_teams as $key2 => $value2) {
            // $data_user = Redis::hGetAll('team_'.$request->user_id.'_'.$value2);
            // $data_score = Redis::zScore($value->id,$request->user_id.':'.$value2);
             //print_r($data_user); exit;
            // $data_rank = Redis::hGet($value->id.'_rank',$value2);
            if(!empty($data_user)) {
                $leaders[$value->id][$value2] = (object)array(
                    "team_id" => (int)$value2,
                    "team_name" => $data_user['teamname'],
                    "team_number" => $data_user['teamnumber'],
                    "points" => (string)$data_score,
                    "rank" => (int)$data_rank,
                    "arrowname" => 'up-arrow',
                    "amount" => '0',
                    "challenge_id" => $value->id,
                );
            }
        }
        if(!empty($leaders[$value->id])) {
            $rank = array_column($leaders[$value->id], 'rank');
            array_multisort($rank, SORT_ASC, $leaders[$value->id]);
        }
    }
    // print_r($leaders); exit;
    $i = 0;
    $totalentryfees=0;
    $total_profit = 0;
    $totalwinamount=0;
    foreach ($findmychallenges as $key => $value) {

      //for investment
      // $findmychallenges[$key]->winningamount = $listmatchdetail->final_status == 'winnerdeclared' ?  DB::table('finalresults')->where('challengeid', $value->id)->where('userid', $request->user_id)->sum('amount') : 0;
      if ($value->challenge_status!='canceled') {
    $totalentryfees += $value->entryfee*$value->join_with;
    $totalwinamount += $findmychallenges[$key]->winningamount;
    $total_profit = $totalwinamount-$totalentryfees ;
  }
    //end for investment
    $findmychallenges[$key]->matchkey = $matchkey;
    $findmychallenges[$key]->joined_challenge_ids = $value->id;

  // $value->pdf_created = 1;
  if($value->pdf_created==1 ){
    $pdfname = CDN_URL.'pdffolders/join-leauges-'.$value->id.'.pdf';
    // $pdfname = IMAGE_CDN.'uploads/pdffolders/join-leauges-'.$value->id.'.pdf';
    $findmychallenges[$i]->pdf = $pdfname;
  }

    $findmychallenges[$key]->winners_zone = array();

      if ($value->challenge_status!='canceled') {
      $find_leaders = array();

      //$find_leaders = (isset($leaders[$value->id]) && !empty($leaders[$value->id])) ? $leaders[$value->id] : array();
      $find_leaders = Leaderboard::where('challenge_id',$value->id)
            ->leftJoin('finalresults' , 'finalresults.joinedid' , '=' , 'leaderboard.join_id')
            ->where('user_id',$request->user_id)
            ->select('leaderboard.team_id','leaderboard.team_name','leaderboard.team_number','leaderboard.points','leaderboard.rank','leaderboard.arrowname' , 'finalresults.amount')->orderBy('rank','ASC')->get();

      foreach ($find_leaders as $key1 => $value1) {
        if($value1->rank >= @$value->min_position && $value1->rank <= @$value->max_position) {

            $find_leaders[$key1]->is_winningzone = 1;
        } else {
          $find_leaders[$key1]->is_winningzone = 0;
        }
        $find_leaders[$key1]->min_position = $value->min_position;
        $find_leaders[$key1]->max_position = $value->max_position;
      }
      $findmychallenges[$key]->winners_zone = $find_leaders;
      }

      $i++;
    }

    $matchkey = str_replace('_2','',$request->matchkey);

      // $findmatch_runs_data = DB::table('matchruns')->where('matchkey',$request->matchkey)->first();
      $findmatch_runs_data = DB::table('matchruns')->where('matchkey',$matchkey)->first();

      if(!empty($findmatch_runs_data))
            {
              $Json['Team1']= $findmatch_runs_data->teams1;
              $Json['Team2']= $findmatch_runs_data->teams2;
              $Json['Team1_Totalovers']= $findmatch_runs_data->overs1;
              $Json['Team1_Totalruns']= $findmatch_runs_data->runs1;
              $Json['Team1_Totalwickets']= $findmatch_runs_data->wickets1;
              $Json['Team2_Totalwickets']= $findmatch_runs_data->wickets2;
              $Json['Team2_Totalovers']= $findmatch_runs_data->overs2;
              $Json['Team2_Totalruns']= $findmatch_runs_data->runs2;

              if($findmatch_runs_data->winning_status == '0') {
                $Json['Winning_Status']= '';
              }
              else {
                $Json['Winning_Status']= $findmatch_runs_data->winning_status;
              }

              // $Json['scorecard_url'] = '';
            }
            else
            {
              if(!empty($findmatch_runs_data->teams1)) {
                $Json['Team1']= $findmatch_runs_data->teams1;
              }
              else {
                $Json['Team1']='';
              }

              if(!empty($findmatch_runs_data->teams2)) {
                $Json['Team2']= $findmatch_runs_data->teams2;
              }
              else {
                $Json['Team2']='';
              }

              $Json['Team1_Totalovers']= "0";
              $Json['Team1_Totalruns']= "0";
              $Json['Team1_Totalwickets']= "0";
              $Json['Team2_Totalwickets']= "0";
              $Json['Team2_Totalovers']= "0";
              $Json['Team2_Totalruns']= "0";
              $Json['Winning _Status']= "0";
              // $Json['scorecard_url'] = 'http://app.exchange22.com/admin/get-scorecards-view/'.$matchkey;
              // $Json['scorecard_url'] = '';
            }
                $query_data = DB::table('jointeam')->where('jointeam.matchkey',$matchkey)
                ->where('jointeam.fantasy_type_id',$fantasy_type)
                ->where('jointeam.slotes_id',$slotes_id)
                ->join('listmatches','listmatches.matchkey','=','jointeam.matchkey')

                ->join('teams as t1','t1.id','=','listmatches.team1')

                ->join('teams as t2','t2.id','=','listmatches.team2')
                ->where('userid',$request->user_id)
                // ->where('listmatches.sport_type',$sportType->id)
                // ->orderBy('teamnumber','ASC')

                ->select('jointeam.fantasy_type_id' , 'jointeam.id','jointeam.players','jointeam.teamnumber','jointeam.matchkey','jointeam.vicecaptain','jointeam.captain','jointeam.points','listmatches.team1display' , 'listmatches.team2display','jointeam.sport_type')->get();


                $findjointeam = $query_data->sortBy('teamnumber');
                $players_arr = array();
    $players = '';
    foreach ($findjointeam as $key => $value) {
      $players .= $value->players.',';
    }
    $players_arr = array_values(array_unique(array_filter(explode(',', $players))));
    // print_r($players_arr); exit;

    foreach ($findjointeam as $key => $value) {
      $findjointeam[$key]->players_arr = $players_arr;
    }
 // echo"<pre>";print_r($findjointeam);exit;

      $c = COUNT($findjointeam);
      $total_loss = 1;
      if($total_profit < 0) {
        $total_loss = $total_profit;
      }
      return Response::json(["status" => STATUS_SUCCESS,"result"=> [
        "contest"=> LeagueListResource::collection($findmychallenges),
       "total_investment" =>  round($totalentryfees,2),
       "total_winning" =>  round($totalwinamount,2),
       "total_profit" =>  round($total_profit,2),
       "total_loss" =>  round($total_loss,2),
      "user_teams"=>$c,
      "teams" => TeamResource::collection($findjointeam),
          "matchruns"=>array($Json),
          "is_late_declared"=>$isLateDeclaredVisible,
          "late_declared_text"=>$lateDeclaredtext,
          // "matchruns_new"=>$Json
         ]]);

       exit;
  }



  public function addCashBanners(Request $request) {
    $this->validate($request, [
      'user_id' => 'required'
    ]);
     $findoffers = Advertisement::orderBY('id','Asc')->where('type',BANNER_TYPE_ADD_CASH)->get();

      $Json=array();

      $url = BANNER_DIRECTORY_URL;

      if(!$findoffers->isEmpty()){

        $i=0;

        foreach($findoffers as $post){

          $Json[$i]['id'] = $post->id;

          $Json[$i]['title'] = '';

          if (is_null($post->url)) {

            $Json[$i]['link'] = "";

          } else {

            $Json[$i]['link'] = $post->url;

          }

          $Json[$i]['image'] = $url.$post->image;

          $i++;

        }

      }
    return Response::json(["status" => STATUS_SUCCESS,"result"=> $Json]);
  }

  public function bankVerify(Request $request){
    $bankOldDetails = DB::table('bank')->where('userid',$request->user_id)->first();
    // print_r(json_encode($bankOldDetails));die;
      $this->validateLogin($request->user_id);
      $this->validate($request,[

        'image' => 'required',

        'user_id' => 'required',

        // 'bankname' => 'required',

        // 'caccno' => 'required',

        'accno' => 'required',

        // 'state' => 'required',

         'ac_holder_name' => 'required'

      ]);

    $exist_in_register = RegisterUser::where('id',$request->user_id)->first();

    if ($exist_in_register->pan_verify != 1) {

      $msgg['msg'] = "Please wait till your pan card verified.";

      $msgg['status'] = 0;

      return Response::json(["status" => STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=> $msgg]);

      die;

    }

    $findbankexist = Bank::where('accno',$request->accno)->where('userid','!=',$request->user_id)->where('status',1)->first();
    if(!empty($findbankexist)) {
        $msgg['msg'] = "Account Number Already Exists.";

        $msgg['status'] = 0;

        return Response::json(["status" => STATUS_SUCCESS,"message"=>"Account Number Already Exists","result"=> $msgg]);

        die;
    }

    if ($request->user_id == 512342 || $request->user_id == 149801) {

      $msgg['msg'] = "Bank edit disabled for this account.";

      $msgg['status'] = 0;

      return Response::json(["status" => STATUS_SUCCESS,"message"=>"Bank edit disabled for this account.","result"=> $msgg]);

      die;

    }



    if (!isset($exist_in_register)  && $exist_in_register=='') {

      $msgg['msg'] = "User does not exist.";

      $msgg['status'] = 0;

      return Response::json(["status" => STATUS_SUCCESS,"message"=>"user does not exist","result"=> $msgg]);

      die;

    }

    date_default_timezone_set('Asia/Kolkata');

    $caccno = $request->caccno;

    $data['userid'] = $request->user_id;

    $data['accno'] = $request->accno;

    $data['ifsc'] = strtoupper($request->ifsc);

    $data['bankname'] = strtoupper($request->bankname);

    $data['bankbranch'] = strtoupper($request->bankbranch);

    $data['state'] = $request->state;

    $data['status'] = 0;

    $data['comment'] = "";

    $data['image']=$request->image;


    $findlastow = RegisterUser::where('id',$request->user_id)->first();

    // if($caccno!=$data['accno']){

    //   $msgg['msg'] = "Account No. and confirm account number not matched.";

    //   $msgg['status'] = 0;

    //   return Response::json(["status" => STATUS_SUCCESS,"message"=>"success","result"=>$msgg]);

    //   die;

    // }

    $reg_user = RegisterUser::where('id',$data['userid'])->first();

    $reg_user->bank_verify  = '0';
    $reg_user->banid  = '';

    $reg_user->save();

    $findexist = Bank::where('userid',$request->user_id)->first();

    if(!is_null($findexist)){

      // Bank::where('id',$findexist->id)->update($data);

      $data['image']=$request->image;

      $bank = Bank::where('userid',$findexist->userid)->first();

      $bank->userid = $request->user_id;

      $bank->accno = $request->accno;

      $bank->ifsc = strtoupper($request->ifsc);

      $bank->bankname = strtoupper($request->bankname);

      $bank->bankbranch = $request->bankbranch;

      $bank->ac_holder_name = $request->ac_holder_name;

      $bank->state = $request->state;

      $bank->status = 0;

      $bank->comment = "";

      $bank->image = $request->image;

      $bank->save();

      //   user details log entry //
      // dd($bankOldDetails);
      $bankOldDetail['user_id'] = $bankOldDetails->userid;
      $bankOldDetail['update_type'] = 'bank_update';
      $bankOldDetail['old_details'] = json_encode($bankOldDetails);
      $bankOldDetail['new_details'] = json_encode($bank);
      // dd($bankOldDetail);
      $user_details_log = DB::table('users_details_log')->insert($bankOldDetail);
      // dd($user_details_log);

      if (!empty($findlastow)) {

        $findlastow->bank_verify = 0;

        $findlastow->save();

      }



    } else {

      $b = new Bank();

      $b->userid = $request->user_id;

      $b->accno = $request->accno;

      $b->ifsc = strtoupper($request->ifsc);

      $b->bankname = strtoupper($request->bankname);

      $b->bankbranch = $request->bankbranch;
      $b->ac_holder_name = $request->ac_holder_name;
      $b->state = $request->state;

      $b->status = 0;

      // $b->comment = "upload";

      $b->image = $request->image;

      $b->save();
      // dd($b);

      if (!empty($findlastow)) {

        $findlastow->bank_verify = 0;

        $findlastow->save();

      }

    }

    $msgg['msg'] = "Bank request submitted and it will approve in 24 hours.";

    $msgg['status'] = 1;

    $email = $findlastow->email;

    $emailsubject = 'Bank account Verification request submitted!';

    $content='<p><strong>Hello </strong></p>';

    $content.='<p>Your bank account verification detail has been submitted successfully. Please wait for our approval.</p>';

    $msg = Helpers::mailheader();

    $msg.= Helpers::mailbody($content);

    $msg.= Helpers::mailfooter();

    Helpers::mailsentFormat($email,$emailsubject,$msg);

    return Response::json(["status" => STATUS_SUCCESS,"message"=>$msgg['msg'],"result"=>$msgg]); die;

  }



  public function updateProfileImage(Request $request){

    $this->validate($request,[

      'user_id' => 'required',

      'file' => 'required'

    ]);

    $geturl = BASE_URL;

    $id = $request->user_id;

    $findlastow = RegisterUser::where('id',$id)->first();

    $rand=rand(10000,1000000);

    $nm='profile';

    if(!empty($findlastow)){

      $nm = $findlastow->username;

    }

    $file[] = $_FILES['file'];


    $nm.=$rand.time();

    $max_file_size = 41020*100;

    $valid_formats = array("jpg", "png", "gif", "zip", "bmp","JPG","jpeg");


    $file_size = $_FILES['file']['size'];

    $file_type = $_FILES['file']['type'];

    if($file_size > $max_file_size) {

      $Json['status']=2;

      $JsonFinal[]=$Json;

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$JsonFinal]);

      die;

      }


      $filename = $_FILES['file']['name'];


    if(!in_array(pathinfo($filename,PATHINFO_EXTENSION), $valid_formats)) {

      $Json['status']=3;

      $JsonFinal[]=$Json;



      return Response::json(["status" => STATUS_SUCCESS,"message"=>"invalid image format.","result"=>$JsonFinal]);

      die;

      }
  $rand_comp=rand(10000,1000000);
    foreach($file as $image){

      $imageName='Fanline11-user-'.$nm.'.jpg';
    $imageNameCompress='Fanline11-user-'.$rand_comp.'.jpg';
      $tmpName = $image['tmp_name'];
      // print_r($imageNameCompress);die;

      // print_r(USERS_DIRECTORY_URL. "          ".USERS_DIRECTORY);die;

      $array[]=$imageName;
      move_uploaded_file($image['tmp_name'],USERS_DIRECTORY.$imageName);

       $data['image'] =  IMAGE_CDN.'uploads/users/'.$imageName;

      $resi = USERS_DIRECTORY.$imageName;

      // print_r($resi);die;

      // Helpers::resize_image($resi);

      // Helpers::compress_image($resi,80);

      RegisterUser::where('id',$id)->update($data);
      $findlastow = RegisterUser::where('id',$id)->first();
      if(@$findlastow->image!=""){

        if (!file_exists(USERS_DIRECTORY_URL.$findlastow->image)){

          $path_parts = pathinfo($findlastow->image);

          if($path_parts['extension']!=""){

            // File::delete($findlastow->image);

            // echo $findlastow->image;

            @unlink($findlastow->image);

          }

        }

      }

      $fileName = USERS_DIRECTORY_URL.$imageName;

      $filePath = USERS_DIRECTORY;

      $uploadPath = USERS_DIRECTORY.$imageName;

      Helpers::aws_upload_image(USERS_DIRECTORY.$imageName, "uploads/users/",$imageName);

      $image_resize = Image::make(USERS_DIRECTORY.$imageName);
        $image_resize->orientate();
        $image_resize->resize(150, null, function ($constraint) {
            $constraint->aspectRatio();
        });
        $image_resize->save(USERS_DIRECTORY.$imageNameCompress);

        Helpers::aws_upload_image(USERS_DIRECTORY.$imageNameCompress, "uploads/users/",$imageNameCompress);
        // Helpers::awsImageUpload($fileName,$filePath,$uploadPath);
        $Compdata['image_thumbnail'] = IMAGE_CDN.'uploads/users/'.$imageNameCompress;
        $Compdata['is_resized_image'] = 1;
        RegisterUser::where('id',$id)->update($Compdata);

      // Helpers::awsImageUpload($fileName,$filePath,$uploadPath);

      $Json['status']=1;

      $Json['image']=$data['image'];

      $JsonFinal[]=$Json;

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$JsonFinal]);

      die;

    }

    $Json['image']='';

    $Json['status']=0;

    $JsonFinal[]=$Json;

    return Response::json(["status" => STATUS_SUCCESS,"result"=>$JsonFinal]);

      die;

  }

  public function removeProfileImage(Request $request){

    $this->validate($request,[

      'user_id' => 'required',

    ]);

    $id = $request->user_id;

    $Json['image']='';
    $Json['status']=1;
    $Json['message']="Profile Removed Successfully";
    $data['image'] = '';
    RegisterUser::where('id',$id)->update($data);
    $JsonFinal[]=$Json;

    return Response::json(["status" => STATUS_SUCCESS , "message" => "Profile Removed Successfully" ,"result"=>$JsonFinal]);

      die;

  }



   public function uploadPanImage(Request $request) {
    $this->validate($request,[

      'file' => 'required'

    ]);

    $nm="";

    $rand=rand(10000,1000000);

      $nm.=$rand.time();

    $file[] = $_FILES['file'];

    $max_file_size = 41020*100;

    $valid_formats = array("jpg","jpeg","png", "gif", "zip", "bmp","JPG","pdf");

    $file_size = $_FILES['file']['size'];

    $file_type = $_FILES['file']['type'];

    if($_FILES['file']['size'] > $max_file_size) {

      $Json['status']=2;

      $JsonFinal[]=$Json;

          return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]);

          die;

      }

    if(!in_array(pathinfo($_FILES['file']['name'],PATHINFO_EXTENSION), $valid_formats)) {

      $Json['status']=3;

      $JsonFinal[]=$Json;

          return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]);

          die;

      }



    foreach($file as $image){

      //  $findifimage = DB::table('pancard')->where('userid',$userid)->first();



      //  $imageName = 'FANLINE11-pancard-'.rand(1000,9999).''.time();

    //         $imsrc = base64_decode($request->get('imagefile'));

    //         file_put_contents('./uploads/'.$imageName, $imsrc);

    //         $data['image'] = $geturl.'uploads/'.$imageName;

    //         if($findifimage->image!=""){

    //             $getimageonly = explode("uploads/",$findifimage->image);

    //                 if(isset($getimageonly[1])){

    //                     $destinationPath.'/'.$getimageonly[1];

    //                     File::delete(($destinationPath.'/'.$getimageonly[1]));

    //                 }

    //         }





      $imageName='Fanline11-pancard-'.$nm.'.'.pathinfo($_FILES['file']['name'],PATHINFO_EXTENSION);

      $tmpName = $image['tmp_name'];

      $array[]=$imageName;

      move_uploaded_file($image['tmp_name'],USERS_DIRECTORY.$imageName);

      Helpers::aws_upload_image(USERS_DIRECTORY.$imageName, "uploads/users/",$imageName);
      // unlink(USERS_DIRECTORY.$imageName);

      $resi = 'uploads/'.$imageName;

      $file_ext = pathinfo($imageName, PATHINFO_EXTENSION);

      if($file_ext!='pdf'){

        // Helpers::resize_image($resi);

        // Helpers::compress_image($resi,80);

      }

      $data['image'] = "https://fanline11.rglabs.net/uploads/users/".$imageName;

      $Json['status']=1;

      $Json['image']=$data['image'];

      $JsonFinal[]=$Json;

      return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]); die;

    }

    $Json['image']='';

    $Json['status']=0;

    $JsonFinal[]=$Json;

    return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]); die;



  }



  public function createTeam(Request $request){
    $this->validateLogin($request->userid);
    date_default_timezone_set('Asia/Kolkata');

    $this->validate($request,[

      'userid' => 'required',

      'matchkey' => 'required',

      'players' => 'required',

      'vicecaptain' => 'required',

      'captain' => 'required',

    ]);

    $getteamid=0;

    $getteamid=$request->teamid;

    $userid = $request->userid;

    $matchkey = $request->matchkey;

    $players = $request->players;

    $fantasy_type= isset($request->fantasy_type) ? $request->fantasy_type :0;
          if($fantasy_type == 4){
            $fantasy_type = 0;
          }
          $slotes_id = 0;
          if(!empty($fantasy_type) && $fantasy_type==1){
              $slotes_id=$request->slotes_id;
          }
          $playersarray = array_filter(explode(',',$players));
          $vicecaptain = @$request->vicecaptain ? $request->vicecaptain : 0;
          $captain = $request->captain;
          if($request->teamid != 0){
          $reqData['teamid'] = $request->teamid;
          $reqData['data'] = json_encode($request->all());
          DB::table('team_logs')->insert($reqData);
          }
          $teamid_exist = JoinTeam::find($getteamid);
          if(!empty($teamid_exist)) {

              $matchkey = $teamid_exist->matchkey;
          }
          $sport_type = (isset($request->sport_key) ? $request->sport_key : 'CRICKET');
          $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);

    $playerLimit = CommonHelper::$playerLimit[$sport_type];

    $json = $Json = array();

    if( $fantasy_type == 2 || $fantasy_type == 3){
      $playerLimit = array('maxplayers' => 5 ,'team_max_player' => 3 ,'total_credits' => 45);
    }
// if($request->userid != 279907  || $request->userid != 14){
    if( $fantasy_type == 1){
        $playerLimit = array('maxplayers' => 5 ,'team_max_player' => 5 ,'total_credits' => 45);
      }
  // }
    //Code By Keshav


    $teamDataa = JoinTeam::where('userid',$userid)->where('matchkey',$matchkey)->where('sport_type',$sportType->id)
    ->where('fantasy_type_id',$fantasy_type)
    ->where('slotes_id',$slotes_id)
    ->get();
    // print_r($teamDataa);exit;
    // $checkPlayer[]  = 1;
    if(!$teamDataa->isEmpty()) {

      $checkPlayer  = [];
    if($teamid_exist)
    {

      foreach($teamDataa as $playerKey => $playerTeams)
      {
        $isPlayer = [];
        if(count($teamDataa) > 1)
        {
          if($teamid_exist->id != $playerTeams->id)
          {
            // pr($playerTeams);
            if(!empty($playerTeams->players))
            {
              $players2 = array_filter(explode(',', $playerTeams->players));
              foreach($players2 as $playerDetail)
              {
                if(in_array($playerDetail,$playersarray) and $playerTeams->vicecaptain == $vicecaptain and $playerTeams->captain == $captain)
                {
                  $isPlayer[] = 1;
                }
                else
                {
                  $isPlayer[] = 0;
                }
              }
            }

            if(in_array(0,$isPlayer))
            {
              $checkPlayer[$playerKey]  = 1;
            }
            else
            {
              $checkPlayer[$playerKey]  = 0;
            }
          }
          if(in_array(0,$checkPlayer))
          {
            return Response::json(["status" => STATUS_SUCCESS,"message"=>"Can't create same team multiple time."]);
          }  else {}
        }
        else
        {
          $checkPlayer[0] = 1;
        }
      }
    }
    else
    {
      // echo 1; exit;
      foreach($teamDataa as $playerKey => $playerTeams)
      {
        $isPlayer = [];
        if(!empty($playerTeams->players))
        {
          $players2 = array_filter(explode(',', $playerTeams->players));
          foreach($players2 as $playerDetail)
          {
            if(in_array($playerDetail,$playersarray) and $playerTeams->vicecaptain == $vicecaptain and $playerTeams->captain == $captain)

            {
              $isPlayer[] = 1;
            }
            else
            {
              $isPlayer[] = 0;
            }
          }
        } //print_r($isPlayer); exit;

        // if(in_array(0,$isPlayer))
          if(in_array(0,$isPlayer))
        {
          $checkPlayer[$playerKey]  = 1;
        }
        else
        {
          $checkPlayer[$playerKey]  = 0;
        }
      }
        // print_r($checkPlayer); exit;
       if(in_array(0,$checkPlayer))
    {


      return Response::json(["status" => STATUS_SUCCESS,"message"=>"Can't create same team multiple time."]);
    }  else {
    }
    }

    }


    //Code end by keshav

    if (!empty($teamid_exist)) {

      $teamnumber = $teamid_exist->teamnumber;

    } else {

      $check_users_data = JoinTeam::where('userid',$userid)->where('sport_type',$sportType->id)->where('matchkey',$matchkey)->get();

      $teamnumber = count($check_users_data);
     // echo $teamnumber;  die;
      if ($teamnumber+1 >= MAX_TEAM_LIMIT) {

        $Json['creditstatus'] = "could not create team.";

        return Response::json(["status" => STATUS_SUCCESS,"message"=>"You have reached maximum limit of creating team.","result"=>$Json]);

      }


    }



    $a = $playersarray;

   $playersarray =  array_unique($a);
   if(count($a) != count(array_unique($a))){
         $Json['playerlimit'] = 0;
         return Response::json(["status" => STATUS_FAILURE,"message"=>"All selected players should be unique","result"=>$Json]);
         // die;
   }

   $limitArr = CommonHelper::$playerLimit[$sport_type];

   if($fantasy_type == 2 || $fantasy_type == 3){
     $limitArr = array('maxplayers' => 5 ,'team_max_player' => 3 ,'total_credits' => 45);
   }

   $teamCheck= array();
   // dd($teamCheck);
    $team1 = DB :: table('players as p')
   ->join('listmatches as lm' ,'lm.team1','=','p.team')
   ->whereIn('p.id',$playersarray)
   ->where('matchkey',$matchkey)
   ->count();

    $team2 = DB :: table('players as p')
   ->join('listmatches as lm' ,'lm.team2','=','p.team')
   ->whereIn('p.id',$playersarray)
   ->where('matchkey',$matchkey)
   ->count();

   if($team1 > $limitArr['team_max_player']){

       $Json['playerlimit'] = 0;
       // return Response::json(["status" => STATUS_FAILURE,"message"=>"Invalid Team","result"=>$Json]);
       // die;
   }


   // if(count($playersarray) != $playerLimit['maxplayers']){
   //      $Json['playerlimit'] = 0;
   //      return Response::json(["status" => STATUS_SUCCESS,"message"=>"Total player limit is ".$playerLimit['maxplayers'],"result"=>$Json]);
   //
   //      die;
   //  }

       $matchplayercount= DB :: table('matchplayers')->where('matchkey',$matchkey)->whereIn('playerid',$playersarray)->count();
       // echo $matchplayercount .'<'. $limitArr['maxplayers']; exit;


     if($matchplayercount < $limitArr['maxplayers']){
         $Json['playerlimit'] = 0;
         // return Response::json(["status" => STATUS_FAILURE,"message"=>"Invalid Players","result"=>$Json]);
         // die;
     }


    if(!in_array($vicecaptain, $playersarray)){
         $Json['playerlimit'] = 0;
         // return Response::json(["status" => STATUS_FAILURE,"message"=>"VC should be in selected player list","result"=>$Json]);

         // die;
     }
     if(!in_array($captain, $playersarray)){
          $Json['playerlimit'] = 0;
          // return Response::json(["status" => STATUS_FAILURE,"message"=>"Captain should be in selected players list","result"=>$Json]);

          // die;
      }



      $rolecheck =array();
      $rolecheck = DB :: table('matchplayers')->whereIn('playerid',$playersarray)
      ->groupBy('role')->select('role',DB::raw('count(role) as countrole'))->get();




      foreach ($rolecheck as $key => $roles) {


        if($sport_type=='CRICKET'){

        if($roles->role =='keeper'){
              if($roles->countrole>4){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<1){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
        if($roles->role =='bowler'){
              if($roles->countrole>6){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<3){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
        if($roles->role =='batsman'){

              if($roles->countrole>6){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                  // dd($Json['playerlimit']);
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<3){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
        if($roles->role =='allrounder'){
              if($roles->countrole>4){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<1){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }

      }

      elseif($sport_type=='FOOTBALL'){
        if($roles->role =='goalkeeper'){
              if($roles->countrole>1){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<1){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
        elseif($roles->role =='defender'){
              if($roles->countrole>5){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<3){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
        elseif($roles->role =='midfielder'){
              if($roles->countrole>5){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<3){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
        elseif($roles->role =='Forward'){
              if($roles->countrole>3){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<1){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
      }
      elseif($sport_type=='BASKETBALL'){
            if($roles->role =='Shooting guard'){
                  if($roles->countrole>4){
                    $Json['role'] = $roles->role;
                    $Json['playerlimit'] = $roles->countrole;
                    // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                    // die;
                  }
                  if($roles->countrole<1){
                    $Json['role'] = $roles->role;
                    $Json['playerlimit'] = $roles->countrole;
                    // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                    // die;
                  }
            }
            elseif($roles->role =='Point guard'){
                  if($roles->countrole>4){
                    $Json['role'] = $roles->role;
                    $Json['playerlimit'] = $roles->countrole;
                    // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                    // die;
                  }
                  if($roles->countrole<1){
                    $Json['role'] = $roles->role;
                    $Json['playerlimit'] = $roles->countrole;
                    // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                    // die;
                  }
            }
            elseif($roles->role =='Small forward'){
                  if($roles->countrole>4){
                    $Json['role'] = $roles->role;
                    $Json['playerlimit'] = $roles->countrole;
                    // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                    // die;
                  }
                  if($roles->countrole<1){
                    $Json['role'] = $roles->role;
                    $Json['playerlimit'] = $roles->countrole;
                    // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                    // die;
                  }
            }
            elseif($roles->role =='Power forward'){
                  if($roles->countrole>4){
                    $Json['role'] = $roles->role;
                    $Json['playerlimit'] = $roles->countrole;
                    // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                    // die;
                  }
                  if($roles->countrole<1){
                    $Json['role'] = $roles->role;
                    $Json['playerlimit'] = $roles->countrole;
                    // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                    // die;
                  }
            }
            elseif($roles->role =='Center'){
                  if($roles->countrole>4){
                    $Json['role'] = $roles->role;
                    $Json['playerlimit'] = $roles->countrole;
                    // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                    // die;
                  }
                  if($roles->countrole<1){
                    $Json['role'] = $roles->role;
                    $Json['playerlimit'] = $roles->countrole;
                    // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                    // die;
                  }
            }
      }
      elseif($sport_type=='BASEBALL'){
              if($roles->role =='catcher'){
                    if($roles->countrole>5){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                      // die;
                    }
                    if($roles->countrole<2){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                      // die;
                    }
              }
              elseif($roles->role =='pitcher'){
                    if($roles->countrole>1){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                      // die;
                    }
                    if($roles->countrole<1){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                      // die;
                    }
              }
              elseif($roles->role =='infielder'){
                    if($roles->countrole>5){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                      // die;
                    }
                    if($roles->countrole<2){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                      // die;
                    }
              }
              elseif($roles->role =='Catcher'){
                    if($roles->countrole>1){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                      // die;
                    }
                    if($roles->countrole<1){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                      // die;
                    }
              }


      }
      elseif($sport_type=='HOCKEY'){
        if($roles->role =='midfielder'){
              if($roles->countrole>5){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<3){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
        elseif($roles->role =='defender'){
              if($roles->countrole>5){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<3){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
        elseif($roles->role =='goalkeeper'){
              if($roles->countrole>1){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<1){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
        elseif($roles->role =='striker'){
              if($roles->countrole>3){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<1){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }


      }
      elseif($sport_type=='KABADDI'){
        if($roles->role =='raider'){
              if($roles->countrole>3){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<1){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
        elseif($roles->role =='defender'){
              if($roles->countrole>4){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<2){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }
        elseif($roles->role =='allrounder'){
              if($roles->countrole>2){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                // die;
              }
              if($roles->countrole<1){
                $Json['role'] = $roles->role;
                $Json['playerlimit'] = $roles->countrole;
                // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                // die;
              }
        }

      }
      elseif($sport_type=='HANDBALL'){
              if($roles->role =='goalkeeper'){
                    if($roles->countrole>1){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                      // die;
                    }
                    if($roles->countrole<1){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                      // die;
                    }
              }
              elseif($roles->role =='defender'){
                    if($roles->countrole>4){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                      // die;
                    }
                    if($roles->countrole<2){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                      // die;
                    }
              }
              elseif($roles->role =='forward'){
                    if($roles->countrole>4){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role maximum criteria","result"=>$Json]);
                      // die;
                    }
                    if($roles->countrole<2){
                      $Json['role'] = $roles->role;
                      $Json['playerlimit'] = $roles->countrole;
                      // return Response::json(["status" => STATUS_FAILURE,"message"=>"Selected player invalid role minimum criteria","result"=>$Json]);
                      // die;
                    }
              }
      }
    }



    //  if(count($playersarray)!=11) {
    //   $Json['creditstatus'] = 0;
    //   return Response::json(["status" => STATUS_FAILURE,"message"=>"Please select 11 players","result"=>$Json]);

    //     die;
    // }


    $findallplayerdetails = MatchPlayer::whereIn('playerid',$playersarray)->where('matchkey',$matchkey)->sum('credit');

    if(!empty($findallplayerdetails)){

      $allc = 0;

      // if($findallplayerdetails>100){

      //   $Json['creditstatus'] = 0;

      //   return Response::json(["status" => STATUS_SUCCESS,"message"=>"Credits more than 100","result"=>$Json]);

      //   die;

      // }

       if($findallplayerdetails > $playerLimit['total_credits']){

        $Json['creditstatus'] = 0;

        return Response::json(["status" => STATUS_SUCCESS,"message"=>"Players more than ".$playerLimit['total_credits'],"result"=>$Json]);

        // die;

      }


    }

    $findmatchdetails = ListMatch::where('matchkey',$matchkey)->where('sport_type',$sportType->id)->select('start_date','name','is_live_fantasy_enable')->first();

    if(!empty($findmatchdetails)){

      $getcurrentdate = $this->getDateCommon();
      $matchremainingdate = date('Y-m-d H:i:s', strtotime('-0 minutes', strtotime($findmatchdetails->start_date)));
// if($request->userid != 279907){
// if(){
// echo $getcurrentdate;
// echo $matchremainingdate;exit;
      if($getcurrentdate>$matchremainingdate){

        $Json['message'] = 'Match is closed';

        return Response::json(["status" => STATUS_SUCCESS,"message"=>"Match is closed","result"=>$Json]);

        // die;

      }
    // }

    } else {
      echo "Match not exist";
      exit;
    }

      $json['marathonstatus'] = 0;

      $data['userid'] = $userid;

      $data['matchkey'] = $matchkey;

      $data['teamnumber'] = $teamnumber;

      $data['players'] = $players;

      $data['vicecaptain'] = $vicecaptain;

      $data['captain'] = $captain;

      $data['sport_type'] =  $sportType->id;

      if(!empty($fantasy_type)){
          if($fantasy_type==1 && !empty($slotes_id)){
            $data['slotes_id'] = $slotes_id;
            $data['fantasy_type_id'] = 1;
          }else if($fantasy_type==2){
            $data['fantasy_type_id'] = $fantasy_type;
            $data['is_batting_fantasy_enable'] = 1;
          }else if($fantasy_type==3){
            $data['fantasy_type_id'] = $fantasy_type;
            $data['is_bowling_fantasy_enable'] = 1;
          }else if($fantasy_type==5){
            $data['fantasy_type_id'] = $fantasy_type;
              $data['is_reverse_fantasy_enable'] = 1;
          }
       }

      if(!empty($teamid_exist)){

        $get_team_row = JoinTeam::where('id',$teamid_exist->id)->where('userid', $userid)->first();
        if(!empty($get_team_row)) {
          $get_team_row->players = $players;

          $get_team_row->vicecaptain = $vicecaptain;

          $get_team_row->captain = $captain;

          $get_team_row->save();
        } else {
          $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");

      $txt = json_encode($request->all())."John Doe\n";

      fwrite($myfile, $txt);
      echo "Team not exist";
          exit;
        }
      }

      else{

        $findlastteam = JoinTeam::where('userid',$userid)->where('matchkey',$matchkey)->where('sport_type',$sportType->id)->where('fantasy_type_id',$fantasy_type)->orderBy('teamnumber','DESC')->select('teamnumber')->first();

        if(!empty($findlastteam)){

          $finnewteamnumber = $findlastteam->teamnumber+1;

          if($finnewteamnumber<NEW_TEAM_NUMBER_AFTER_MAX){

            $data['teamnumber'] = $finnewteamnumber;

          }

        }else{

          $data['teamnumber'] = 1;

        }

        if($data['teamnumber']<NEW_TEAM_NUMBER_AFTER_MAX){

          $getteamid = JoinTeam::insertGetId($data);

          // Helpers::update_user_team_count($matchkey,$fantasy_type,$userid);
        // check for marathon//

        /*if($teamnumber==1){

            $matchkey = $request->matchkey;

            $user_id = $request->userid;

            $teamid = $getteamid;

            $findmatchseries = ListMatch::where('matchkey',$matchkey)->where('sport_type',$sportType->id)->select('series')->first();

            if(!empty($findmatchseries)){

              $findmatchchallenges = array();
              // $findmatchchallenges = MatchChallenge::where('series_id',$findmatchseries->series)->where('marathon',1)->get();

              $mtchch=array();

              if(count($findmatchchallenges)){

                foreach($findmatchchallenges as $ch){

                  $mtchch[] = $ch->id;

                }

              }

              // $findmatchchallenge = MatchChallenge::where('series_id',$findmatchseries->series)->where('marathon',1)->where('matchkey',$matchkey)->first();
              $findmatchchallenge = array();

              if(!empty($findmatchchallenge)){

                $findjoinedleauges = JoinedLeague::whereIn('joinedleauges.challengeid',$mtchch)->where('userid',$userid)->where('challengeid','!=',$findmatchchallenge->id)->get();

                if(count($findjoinedleauges)){

                  $refercode = $characters = ALL_CHARS_STRING.SINGLE_NUMBERS_IN_STRING;

                  $refercode = '';

                  $max = strlen($characters) - 1;

                   for ($i = 0; $i < 6; $i++){

                      $refercode.= $characters[mt_rand(0, $max)];

                   }

                  $jdata['refercode'] = $refercode.rand(100,999);

                  $jdata['matchkey'] =  $request->matchkey;

                  $jdata['userid'] =  $request->userid;

                  $jdata['sport_type'] =  $sportType->id;

                  $teamid =  $jdata['teamid'] = $getteamid;

                  $challengeid =  $jdata['challengeid'] = $findmatchchallenge->id;

                  $getinsertid = JoinedLeague::insertGetId($jdata);



                  $json['marathonstatus'] = 1;

                }

              }

            }

          }*/


        // end for marathon//
        }

      }

      $json['status'] = 1;

      $json['teamid'] = $getteamid;

      $teamcount= JoinTeam::where('userid',$request->userid)
            ->where('matchkey',$request->matchkey)
            ->where('sport_type',$sportType->id)
            ->where('fantasy_type_id',$fantasy_type)
            ->where('slotes_id',$slotes_id)
            ->count();
            $json['teamcount'] = $teamcount;

      return Response::json(["status"=>STATUS_SUCCESS,"message"=>"Team created successfully.","result"=>$json]);


  }



    public function editProfile(Request $request){
      // $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
  //   $txt = json_encode($request->all())."John DoeP\n";
  //
  //   fwrite($myfile, $txt);
  //   exit;


            $this->validateLogin($request->user_id);
            $this->validate($request,[

              'user_id' => 'required',

            ]);

            $data=array();

            $id = $request->user_id;

            $data['id'] = $request->user_id;

            $pan_data = RegisterUser::where('id',$id)->first();

            $user = RegisterUser::where('id',$id)->first();

            if(isset($request->team)){

                if($request->team !== $user->team){

                    $request->team = str_replace(" ", "", $request->team);
                    $checkteam = RegisterUser::where('team','like',$request->team)->select('id')->first();

                    if(!empty($checkteam)){

                        return Response::json(["status" => STATUS_FAILURE,"message"=>"Team name already exist"]);

                        die;

                    }else{

                      if($user->is_team_updated === 1){
                          return Response::json(["status" => STATUS_FAILURE,"message"=>"You cannot change team name twice"]);
                          die;
                      }else{
                          $data['is_team_updated'] = 1;
                          $data['team'] = $teamname = str_replace(" ", "", $request->team);
                      }

                  }
              }
          }

          if(isset($request->email)){
              if($request->email !== $user->email){

                $checkEmail = RegisterUser::where('email','=',$request->email)->select('id')->first();

                    if(!empty($checkEmail)){

                      return Response::json(["status" => STATUS_FAILURE,"message"=>"Email already exist"]);

                      die;

                    }else{

                        $otp = rand(100000,999999);
                        $data['email_verify'] = 0;
                        $data['email'] = $request->email;
                        $data['email_code'] = $otp;

                        MailController::sendVerificationMailOnRegister($request->email,$otp);

                  }
              }
          }

          $data['dob'] = $request->dob;

          $data['gender'] = $request->gender;

          $data['address'] = $request->address;

          $data['city'] = $request->city;

          if (isset($request->mobile)) {

              // $data['mobile'] = $request->mobile;

          }

          $data['state'] = $request->state;

          $data['country'] = $request->country;

          $data['pincode'] = $request->pincode;

          $data['username'] = str_replace(' ', '', $request->username);

          $restrictarray = ['madar','bhosadi','bhosd','aand','jhaant','jhant','fuck','chut','chod','gand','gaand','choot','faad','loda','Lauda','maar','*fuck*','*chut*','*chod*','*gand*','*gaand*','*choot*','*faad*','*loda*','*Lauda*','*maar*'];

          if(in_array($data['username'],$restrictarray)){

              return Response::json(["status" => STATUS_FAILURE,"message"=>"You cannot use offensive/abusive words."]);

              die;

          }

          foreach($restrictarray as $raray){

              if (strpos(strtolower($data['username']), $raray) !== false) {

                  return Response::json(["status" => STATUS_FAILURE,"message"=>"You cannot use offensive/abusive words."]);

                  die;

              }

          }

          if (!is_null($pan_data)) {

              if ($pan_data->pan_verify != 1) {

                  $data['username'] = $request->username;

              }

          } else {

                $data['username'] = $request->username;

          }



          if (!is_null($user)) {

              $updateNew =  RegisterUser::where('id',$id)->update($data);
              return Response::json(["status" => STATUS_SUCCESS,"message"=>"Updated successfully."]);

          }

          return Response::json(["status" => STATUS_FAILURE,"message"=>"Could not Update."]);

          die;

      }



    public function editEmail(Request $request){

          $userOldDetails = DB::table('registerusers')->where('id',$request->user_id)->first();

          $this->validateLogin($request->user_id);
          $this->validate($request,[

            'user_id' => 'required',
            'email' => 'required'

          ]);

          $data=array();
  return Response::json(["status" => STATUS_FAILURE,"message" => "Verification mail sent."]);  die;
          $id = $request->user_id;
          if(isset($request->isEdit)){
            if($request->isEdit == 0){
try{
              // MailController::sendVerificationMailOnRegister($request->email);
   } catch (\Exception $exception) {

     }

              return Response::json(["status" => STATUS_FAILURE,"message" => "Verification mail sent."]);  die;

            }
          }

          $data['id'] = $request->user_id;




          $user = RegisterUser::where('id','=',$id)->first();
          if(isset($request->email)){
            // if($request->email !== $user->email){

              $checkEmail = RegisterUser::where('email','=',$request->email)
              // ->where('email_verify',1)
              ->select('id')->first();

              if(!empty($checkEmail)){

                return Response::json(["status" => STATUS_FAILURE,"message"=>"Email already exist"]);

                die;

              }else{


                  if(isset($request->type) && $request->type == 1){

                      $otp = rand(100000,999999);
                      if(isset($request->email_type)){
                          if($request->email_type == 1){
                              $data['email_code'] = $otp;
                          }else{
                              $data['old_email_code'] = $otp;
                          }
                          if(!empty($user)){
                              MailController::sendVerificationMailOnRegisterOTP($request->email,$otp);
                              RegisterUser::where('id',$id)->update($data);
                              return Response::json(["status" => STATUS_SUCCESS,"message"=>"Please Check your mail for otp"]);
                          }
                      }
                  }

                  $otp = rand(100000,999999);
                  $otp_old = rand(100000,999999);
                  // $data['email_verify'] = 0;
                  // $data['email'] = $request->email;

                  $datss['userid'] = $request->user_id;
                  $datss['email'] = $request->email;

                  $UserRequest = DB::table('registerusers')->where('id' , $request->user_id)->first();
                  if(empty($UserRequest)){
                      DB::table('registerusers')->insert($datss);
                  }else{
                      DB::table('registerusers')->where('id' , $UserRequest->id)->update(['email'=>$datss['email']]);

                      $userLogsData['user_id'] = $userOldDetails->id;
                      $userLogsData['update_type'] = 'email_update';
                      $userLogsData['old_details'] = json_encode($userOldDetails);
                      $userLogsData['new_details'] = json_encode($datss);
                      // dd($userLogsData);
                      $user_details_log = DB::table('users_details_log')->insert($userLogsData);
                  }

                  $data['email_code'] = $otp;
                  $data['old_email_code'] = $otp_old;


                  $user = RegisterUser::where('id',$id)->first();
                      if (!is_null($user)) {

                          MailController::sendVerificationMailOnRegisterOTP($request->email,$otp);
                          MailController::sendVerificationMailOnRegisterOTP($user->email,$otp_old);
                          RegisterUser::where('id',$id)->update($data);

                          return Response::json(["status" => STATUS_SUCCESS,"message"=>"Please Check your mail for otp"]);

                      }else{
                          return Response::json(["status" => STATUS_FAILURE,"message"=>"Could not Update."]);
                      }

                  }
              // }
              // else{
              //     return Response::json(["status" => STATUS_FAILURE,"message"=>"Email cannot be same!"]);
              // }
              }else{
                  return Response::json(["status" => STATUS_FAILURE,"message"=>"Please Enter Email!"]);
              }

          die;

      }

  public function verifyEmailOtp(Request $request) {

    $this->validate($request,[


      'email'=>'required',
      'otp' => 'required'

    ]);

    if(!$request->otp) {
        exit;
    }


      if (isset($request->email)) {

        $user = RegisterUser::where('email',$request->email)->first();

      }

      elseif (isset($request->user_id)) {

        $user = RegisterUser::where('id',$request->user_id)->first();

      }
      if (isset($request->user_id)) {

        $user = RegisterUser::where('id',$request->user_id)->first();

      }
      // print_r($user);die;

      if(isset($request->otp_new)){


    if ($user->old_email_code != $request->otp_new) {

      return Response::json(["status" => STATUS_FAILURE,"message"=>"Old Email Otp mismatch."]);  die;

    }

      }

      // if ($user->email_code == $request->otp) {
      if (123456 == $request->otp) {



        // $user->email_code = "";

$RequestedEmailDb = DB::table('users_email_request')->where('userid' , $request->user_id)->where('status' , 0)->first();
if(!empty($RequestedEmailDb)){

  $user->email = $RequestedEmailDb->email;

$user->email_verify = 1;

$upDat['status'] = 1;
DB::table('users_email_request')->where('id' , $RequestedEmailDb->id)->update($upDat);

}

        $user->save();



        return Response::json(["status" => STATUS_SUCCESS,"message" => "Email Verified.", "result"=> new LoginResource($user)]);  die;



      } else {

        return Response::json(["status" => STATUS_FAILURE,"message"=>"Otp mismatch."]);  die;

      }


  }

  public function sendNewMail(Request $request) {

      $this->validate($request,[

      'user_id' => 'required',

      'email' => 'required'

    ]);

      $user=RegisterUser::where('id',$request->user_id)->first();

      if ($user->mobile_verify != 1) {

        return Response::json(["status" => STATUS_SUCCESS,"message"=> "Please first verify your mobile!","result"=>"sent"]); die;

      }

      $user->email = $request->email;

      $user->save();

      MailController::sendVerificationMailOnRegister($request->email);

      return Response::json(["status" => STATUS_SUCCESS,"message"=> "Mail sent!","result"=>"sent"]);

  }



  public function sendNewOtp(Request $request) {

    $this->validate($request,[

      'user_id' => 'required',

      'mobile' => 'required|digits:10',

      'type' => 'required'

    ]);
    $type = $request->type;
    if ($type == 1) {
      // $otp = rand(100000,999999);
      $otp = "123456";
    $user = RegisterUserTemp::where('id',$request->user_id)->first();

    $mobile = RegisterUserTemp::where('mobile',$request->mobile)->orderBy('id','DESC')->first();

    if (!empty($mobile) || !is_null($mobile)) {

    $mobile = RegisterUserTemp::where('mobile',$request->mobile)->where('id','!=',$mobile->id)->orderBy('id','DESC')->first();

    }

    if ((!empty($mobile) || !is_null($mobile)) && $mobile->mobile_verify == 1) {

        return Response::json(["status"=>0,"message"=>"This mobile number already exist!","result"=>""]);

        die;

    }
    if ($request->user_id == 512342 || $request->user_id == 149801 || $request->mobile == 6351150035) {

        return Response::json(["status"=>0,"message"=>"Mobile Update disabled for this account","result"=>""]);

        die;

    }

    $user->code = $otp;

    $user->mobile = $request->mobile;

    $user->save();

     // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
// $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
$txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Never share it with anyone.';

     //////////      TO CHECK LIMIT TO SEND MAXIMUM OTP    /////////////////////////
     $otp = Otp::where('mobile',$request->mobile)->first();
     if (!empty($otp)) {
       if ($otp->count >= OTP_MAX_LIMIT) {
         return Response::json(["status" => STATUS_FAILURE,"message"=> "You have reached maximum limit to send otp on your mobile!"]);die;
       } else {
        $otp_count = $otp->count;
        $otp->count = $otp_count + 1;
        $otp->save();
       }
     } else {
        Otp::create([
          'mobile' => $request->mobile,
          'count'  => 0
        ]);
     }


    Helpers::sendTextSmsNew($txtmsg,$request->mobile);

    return Response::json(["status" => STATUS_SUCCESS,"message"=> "Otp sent!"]);
    } elseif ($type == 2) {
      $this->validateLogin($request->user_id);
      // $otp = rand(100000,999999);
      $otp = "123456";
      if ($request->user_id == 512342 || $request->user_id == 149801 || $request->mobile == 6351150035 ) {

          return Response::json(["status"=>0,"message"=>"Mobile Update disabled for this account","result"=>""]);

          die;

      }
    $mobile = RegisterUser::where('mobile',$request->mobile)
    ->where('mobile_verify',1)
    // ->orderBy('id','DESC')
    ->first();

    // if (!empty($mobile) || !is_null($mobile)) {

    // $mobile = RegisterUser::where('mobile',$request->mobile)
    // ->where('mobile_verify',1)
    // // ->where('id','!=',$mobile->id)
    // // ->orderBy('id','DESC')
    // ->first();

    // }



    if (!empty($mobile) || !is_null($mobile)) {

        return Response::json(["status"=>0,"message"=>"This mobile number already exist!","result"=>""]);

        die;

    }

    $mobile = RegisterUser::where('id',$request->user_id)->first();

    if (!empty($mobile)) {
      $mobile->code = $otp;

      $mobile->mobile = $request->mobile;

      $mobile->save();
    }

     // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
     // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
     $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Never share it with anyone.';

     $otp = Otp::where('mobile','=',$request->mobile)->first();

     if (!empty($otp)) {
       if ($otp->count >= OTP_MAX_LIMIT) {
         return Response::json(["status" => STATUS_FAILURE,"message"=> "You have reached maximum limit to send otp on your mobile!"]);die;
       } else {
        $otp_count = $otp->count;
        $otp->count = $otp_count + 1;
        $otp->save();
       }
     } else {
        Otp::create([
          'mobile' => $request->mobile,
          'count'  => 0
        ]);
     }

    Helpers::sendTextSmsNew($txtmsg,$request->mobile);

    return Response::json(["status" => STATUS_SUCCESS,"message"=> "Otp sent!"]);

    }

  }


  public function verifyOtpOnRegister(Request $request) {

     $this->validate($request,[

      // 'mobile' => 'required',

      'otp' => 'required',

      'user_id' => 'required'

    ]);

    $user_id = $request->user_id;
    $otp = $request->otp;
    $user = RegisterUserTemp::orderBY('id','DESC')->where('id',$request->user_id)->first();

    // if ($user->code == $request->otp) {
    if (123456 == $request->otp) {
        $user->mobile_verify = 1;
        $user->save();

        $new_user = new RegisterUser();
        // $new_user = $user;
        $user_info_return = RegisterUser::orderBY('id','DESC')->first();
        // $user->id = $user_info_return->id + 1;
        $user->id = '';
 $credentials = ["email"=>$user->email, "password"=>$user->pass_token];
 $new_user->fill(json_decode(json_encode($user), true))->save();

      $token = auth()->attempt($credentials);
      $new_user->jwt_token = $token;
      $new_user->save();
    $user_info_return = RegisterUser::orderBY('id','DESC')->first();
      Helpers::update_user_token($user_info_return->id,$token);
    $finduser = RegisterUser::where('id',$user_info_return->refer_id)->first();
    $bonus =  0;
    if(!empty($finduser) && $finduser->id==39639) {
      $bonus = 250;
    }
       $user_bal =  UserBalance::create([

          'user_id' => $new_user->id,

          'refer_id' => $new_user->refer_id,

          'balance' => INITIAL_BALANCE_ZERO,

          'winning' => INITIAL_BALANCE_ZERO,

          'bonus' => $bonus

        ]);

    if (!empty($finduser)) {
        /*$scratch = new ScratchCard();
        $scratch->refercode = $finduser->refercode;
        $scratch->user_id = $user_info_return->id;
        $scratch->active = 1;
        $scratch->refer_id = $finduser->id;
        $scratch->is_scratched = 0;*/
        // $scratch->save();
    }

    $user_bal_data = UserBalance::where('id',$user_bal->id)->first();
    $total_available_amt = $user_bal_data->balance+$user_bal_data->winning+$user_bal_data->bonus;



      $transaction = new Transaction();
      $transaction->userid = $user_info_return->id;
      $transaction->refer_id = DEFAULT_USER_ID;
      $transaction->type = SIGN_UP_BONUS_STMT;
      $transaction->transaction_id = 'Fanline11-SIGNUP-'.time();
      $transaction->transaction_by = 'Fanline11';
      $transaction->sport = SPORT_CRICKET_KEY;
      $transaction->amount = $bonus;
      $transaction->paymentstatus = CONFIRMED;
      $transaction->bonus_amt = $bonus;
      $transaction->bal_bonus_amt = $bonus;
      $transaction->bal_win_amt = INITIAL_BALANCE_ZERO;
      $transaction->bal_fund_amt = INITIAL_BALANCE_ZERO;
      $transaction->total_available_amt = $total_available_amt;
      // $transaction->save();

    MailController::sendVerificationMailOnRegister($user->email);

    return Response::json(["status" => STATUS_SUCCESS,"message" => "Mobile Number Verified.", "result"=> new LoginResource($user_info_return)]);  die;

    } else {

      return Response::json(["status" => STATUS_FAILURE,"message" => "Please Enter Correct Otp."]);  die;

    }

  }


  public function sendNewOtp_new(Request $request) {


    $this->validate($request,[

      'user_id' => 'required',

      'mobile' => '',

      'email'=> '',

      'verification_type' => 'required',

      'type' => 'required'

    ]);
    $type = $request->type;

    if($request->verification_type == 'email'){
        // $this->validateLogin($request->user_id);
    // $otp = rand(100000,999999);
   $otp = "123456";
    if($request->mobile == 8286998785){
      $otp = 828699;
    }
    $email_db_reg = RegisterUser::where('email',$request->email)->first();
    if(!empty($email_db_reg)){
  $email_db = RegisterUser::where('email',$request->email)
  ->where('email_verify',1)
  // ->orderBy('id','DESC')
  ->first();

  // if (!empty($mobile) || !is_null($mobile)) {

  // $mobile = RegisterUser::where('mobile',$request->mobile)
  // ->where('mobile_verify',1)
  // // ->where('id','!=',$mobile->id)
  // // ->orderBy('id','DESC')
  // ->first();

  // }



  if (!empty($email_db) || !is_null($email_db)) {

      return Response::json(["status"=>0,"message"=>"This email is already exist!","result"=>""]);

      die;

  }

  $email = RegisterUser::where('id',$request->user_id)->first();

  if (!empty($mobile)) {
    $email->email_code = $otp;

    // $email->email = $request->email;

    $email->save();
  }
  MailController::sendVerificationMailOnRegisterOTP($request->email,$otp);
}
  else{
    $user = RegisterUserTemp::where('id',$request->user_id)->first();
    // $otp = rand(100000,999999);
    $otp = 123456;
    if(!empty($user)){
    $user->email_code = $otp;

    $user->save();
    MailController::sendVerificationMailOnRegisterOTP($request->email,$otp);
  }
}

  return Response::json(["status" => STATUS_SUCCESS,"message"=> "Otp sent!"]);

  }else if($request->verification_type == 'mobile'){

  if ($type == 1) {
    // $otp = rand(100000,999999);
    $otp = "123456";
  $user = RegisterUserTemp::where('id',$request->user_id)->first();

  $mobile = RegisterUserTemp::where('mobile',$request->mobile)->orderBy('id','DESC')->first();

  if (empty($mobile) || is_null($mobile)) {

  $mobile = RegisterUserTemp::where('mobile',$request->mobile)->where('id','!=',$mobile->id)->orderBy('id','DESC')->first();

  }

  if ((!empty($mobile) || !is_null($mobile)) && $mobile->mobile_verify == 1) {

      return Response::json(["status"=>0,"message"=>"This mobile number already exist!","result"=>""]);

      die;

  }

  if($request->mobile == 8286998785){
    $otp = 828699;
  }
  $user->code = $otp;

  $user->mobile = $request->mobile;

  $user->save();

   // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
// $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
$txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Never share it with anyone.';

   //////////      TO CHECK LIMIT TO SEND MAXIMUM OTP    /////////////////////////
   $otp = Otp::where('mobile',$request->mobile)->first();
   if (!empty($otp)) {
     if ($otp->count >= OTP_MAX_LIMIT) {
       return Response::json(["status" => STATUS_FAILURE,"message"=> "You have reached maximum limit to send otp on your mobile!"]);die;
     } else {
      $otp_count = $otp->count;
      $otp->count = $otp_count + 1;
      $otp->save();
     }
   } else {
      Otp::create([
        'mobile' => $request->mobile,
        'count'  => 0
      ]);
   }

  Helpers::sendTextSmsNew($txtmsg,$request->mobile);

  return Response::json(["status" => STATUS_SUCCESS,"message"=> "Otp sent!"]);
  } elseif ($type == 2) {
    $this->validateLogin($request->user_id);
    // $otp = rand(100000,999999);
    $otp = "123456";
  $mobile = RegisterUser::where('mobile',$request->mobile)
  ->where('mobile_verify',1)
  // ->orderBy('id','DESC')
  ->first();

  // if (!empty($mobile) || !is_null($mobile)) {

  // $mobile = RegisterUser::where('mobile',$request->mobile)
  // ->where('mobile_verify',1)
  // // ->where('id','!=',$mobile->id)
  // // ->orderBy('id','DESC')
  // ->first();

  // }



  if (!empty($mobile) || !is_null($mobile)) {

      return Response::json(["status"=>0,"message"=>"This mobile number already exist!","result"=>""]);

      die;

  }

  $mobile = RegisterUser::where('id',$request->user_id)->first();

  if (!empty($mobile)) {

    if($request->mobile == 8286998785){
      $otp = 828699;
    }

    $mobile->code = $otp;

    $mobile->mobile = $request->mobile;

    $mobile->save();
  }

   // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
   // $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Never share it with anyone. Thank You For Choosing Fanline11.'."\n\n ".OTP_AUTO_VERIFY;
   $txtmsg='Dear Fanline11 User Your Mobile Verify OTP is: '.$otp.'. Never share it with anyone.';

   $otp = Otp::where('mobile','=',$request->mobile)->first();

   if (!empty($otp)) {
     if ($otp->count >= OTP_MAX_LIMIT) {
       return Response::json(["status" => STATUS_FAILURE,"message"=> "You have reached maximum limit to send otp on your mobile!"]);die;
     } else {
      $otp_count = $otp->count;
      $otp->count = $otp_count + 1;
      $otp->save();
     }
   } else {
      Otp::create([
        'mobile' => $request->mobile,
        'count'  => 0
      ]);
   }

  Helpers::sendTextSmsNew($txtmsg,$request->mobile);

  return Response::json(["status" => STATUS_SUCCESS,"message"=> "Otp sent!"]);

  }
}
return Response::json(["status" => STATUS_FAILURE,"message" => "Please Enter Valid Verification Type"]);  die;

  }

    public function verifyOtpOnRegister_new(Request $request) {

       $this->validate($request,[

        // 'mobile' => 'required',
        'type' => 'required',

        'otp' => 'required',

        'user_id' => 'required'

      ]);

      $user_id = $request->user_id;
      $otp = $request->otp;
      $input_type = $request->type;
      $user = RegisterUserTemp::orderBY('id','DESC')->where('id',$request->user_id)->first();
      if(!empty($user)){

    if($input_type == 'mobile'){

      // if ($user->code == $request->otp) {
      if (123456 == $request->otp) {
        //change to 1
          $user->mobile_verify = 1;
          $user->save();
          $user_info_return = RegisterUser::where('email',$request->email)->first();
          if(!empty($user_info_return)){
          $user->jwt_token = $user_info_return->jwt_token;
          $user->id = $user_info_return->id;
          }

if($user->email_verify == 1){

          $resExists = DB::table('registerusers')->where('email' , $user->email)->first();

      if(empty($resExists)){
          $new_user = new RegisterUser();
          // $new_user = $user;
          $user_info_return = RegisterUser::orderBY('id','DESC')->first();
          // $user->id = $user_info_return->id + 1;
          $user->id = '';


          $credentials = ["email"=>$user->email, "password"=>$user->pass_token];
          $new_user->fill(json_decode(json_encode($user), true))->save();

               $token = auth()->attempt($credentials);
               $new_user->jwt_token = $token;
               $new_user->save();

      $user_info_return = RegisterUser::orderBY('id','DESC')->first();
      Helpers::update_user_token($user_info_return->id,$token);
      $finduser = RegisterUser::where('id',$user_info_return->refer_id)->first();
      $bonus =  0;

         $user_bal =  UserBalance::create([

            'user_id' => $new_user->id,

            'refer_id' => $new_user->refer_id,

            'balance' => INITIAL_BALANCE_ZERO,

            'winning' => INITIAL_BALANCE_ZERO,

            'bonus' => $bonus

          ]);

      if (!empty($finduser)) {
          /*$scratch = new ScratchCard();
          $scratch->refercode = $finduser->refercode;
          $scratch->user_id = $user_info_return->id;
          $scratch->active = 1;
          $scratch->refer_id = $finduser->id;
          $scratch->is_scratched = 0;*/
          // $scratch->save();
      }

      $user_bal_data = UserBalance::where('id',$user_bal->id)->first();
      $total_available_amt = $user_bal_data->balance+$user_bal_data->winning+$user_bal_data->bonus;



        $transaction = new Transaction();
        $transaction->userid = $user_info_return->id;
        $transaction->refer_id = DEFAULT_USER_ID;
        $transaction->type = SIGN_UP_BONUS_STMT;
        $transaction->transaction_id = 'Fanline11-SIGNUP-'.time();
        $transaction->transaction_by = 'Fanline11';
        $transaction->sport = SPORT_CRICKET_KEY;
        $transaction->amount = $bonus;
        $transaction->paymentstatus = CONFIRMED;
        $transaction->bonus_amt = $bonus;
        $transaction->bal_bonus_amt = $bonus;
        $transaction->bal_win_amt = INITIAL_BALANCE_ZERO;
        $transaction->bal_fund_amt = INITIAL_BALANCE_ZERO;
        $transaction->total_available_amt = $total_available_amt;
        // $transaction->save();

      // MailController::sendVerificationMailOnRegister($user->email);

      $user = RegisterUser::where('id' , $new_user->id)->first();

      }else{
      $upData['mobile_verify'] = 1;
      DB::table('registerusers')->where('id' , $resExists->id)->update($upData);
      $user = RegisterUser::where('id' , $resExists->id)->first();


      }
    }



      return Response::json(["status" => STATUS_SUCCESS,"message" => "Mobile Number Verified.", "result"=> new LoginResource($user)]);  die;

      } else {

        return Response::json(["status" => STATUS_FAILURE,"message" => "Please Enter Correct Otp."]);  die;

      }
    }

    if($input_type == 'email'){

      // if ($user->email_code == $request->otp) {
     if ('123456' == $request->otp) {
          $user->email_verify = 1;
          $user->save();


 if($user->mobile_verify == 1){

          $resExists = DB::table('registerusers')->where('email' , $user->email)->first();

if(empty($resExists)){
          $new_user = new RegisterUser();
          // $new_user = $user;
          $user_info_return = RegisterUser::orderBY('id','DESC')->first();
          // $user->id = $user_info_return->id + 1;
          $user->id = '';


          $credentials = ["email"=>$user->email, "password"=>$user->pass_token];
          $new_user->fill(json_decode(json_encode($user), true))->save();

               $token = auth()->attempt($credentials);
               $new_user->jwt_token = $token;
               $new_user->save();

      $user_info_return = RegisterUser::orderBY('id','DESC')->first();
      Helpers::update_user_token($user_info_return->id,$token);
      $finduser = RegisterUser::where('id',$user_info_return->refer_id)->first();
      $bonus =  0;

         $user_bal =  UserBalance::create([

            'user_id' => $new_user->id,

            'refer_id' => $new_user->refer_id,

            'balance' => INITIAL_BALANCE_ZERO,

            'winning' => INITIAL_BALANCE_ZERO,

            'bonus' => $bonus

          ]);

      if (!empty($finduser)) {
          /*$scratch = new ScratchCard();
          $scratch->refercode = $finduser->refercode;
          $scratch->user_id = $user_info_return->id;
          $scratch->active = 1;
          $scratch->refer_id = $finduser->id;
          $scratch->is_scratched = 0;*/
          // $scratch->save();
      }

      $user_bal_data = UserBalance::where('id',$user_bal->id)->first();
      $total_available_amt = $user_bal_data->balance+$user_bal_data->winning+$user_bal_data->bonus;



        $transaction = new Transaction();
        $transaction->userid = $user_info_return->id;
        $transaction->refer_id = DEFAULT_USER_ID;
        $transaction->type = SIGN_UP_BONUS_STMT;
        $transaction->transaction_id = 'Fanline11-SIGNUP-'.time();
        $transaction->transaction_by = 'Fanline11';
        $transaction->sport = SPORT_CRICKET_KEY;
        $transaction->amount = $bonus;
        $transaction->paymentstatus = CONFIRMED;
        $transaction->bonus_amt = $bonus;
        $transaction->bal_bonus_amt = $bonus;
        $transaction->bal_win_amt = INITIAL_BALANCE_ZERO;
        $transaction->bal_fund_amt = INITIAL_BALANCE_ZERO;
        $transaction->total_available_amt = $total_available_amt;
        // $transaction->save();
        $user = RegisterUser::where('id' , $new_user->id)->first();

      // MailController::sendVerificationMailOnRegister($user->email);
}else{
  $upData['email_verify'] = 1;
  DB::table('registerusers')->where('id' , $resExists->id)->update($upData);
  $user_info_return = RegisterUser::where('id' , $resExists->id)->first();
  $user = RegisterUser::where('id' , $resExists->id)->first();


}
}
      return Response::json(["status" => STATUS_SUCCESS,"message" => "Email Verified.", "result"=> new LoginResource($user)]);  die;

      } else {

        return Response::json(["status" => STATUS_FAILURE,"message" => "Please Enter Correct Otp."]);  die;

      }
  }
  return Response::json(["status" => STATUS_FAILURE,"message" => "Please Enter Valid Type"]);  die;


}
return Response::json(["status" => STATUS_FAILURE,"message" => "User not found"]);  die;

    }


  public function verifyOtp(Request $request) {

    $this->validate($request,[

      'mobile' => 'required',

      'otp' => 'required'

    ]);

    if ($request->user_id == 512342 || $request->user_id == 149801 || $request->mobile == 6351150035) {

        // return Response::json(["status"=>0,"message"=>"Mobile Update disabled for this account","result"=>""]);
        return Response::json(["status" => STATUS_FAILURE,"message"=>"Mobile Update disabled for this account."]);  die;

        die;

    }
    if (isset($request->mobile)) {

      $user = RegisterUser::where('mobile',$request->mobile)->first();

    }

    elseif (isset($request->user_id)) {

      $user = RegisterUser::where('id',$request->user_id)->first();

    }
    if (isset($request->user_id)) {

      $user = RegisterUser::where('id',$request->user_id)->first();

    }
    // print_r($user);die;
    // if ($user->code == $request->otp) {
    if (123456 == $request->otp) {



      $user->code = "";

      $user->mobile_verify = 1;

      $user->save();



      //diposit in user self account

      $userbalance = UserBalance::where('user_id',$user->id)->first();

      if (!is_null($userbalance)) {

          $userbalance->bonus = $userbalance->bonus + 0;


        $userbalance->save();

      }

      $get_user_bal = UserBalance::where('user_id',$user->id)->first();



      $random = rand(1000000,999999999);

       //Entry for bonus to the new user account

      $trans = DB::table('transactions');

      $ins_tran['userid'] = $get_user_bal->user_id;

      $ins_tran['transaction_id'] = 'Fanline11-SIGNUP-'.$random;

      $ins_tran['type'] = SIGN_UP_BONUS_STMT;

      $ins_tran['transaction_by'] = 'Fanline11';

      $ins_tran['paymentstatus'] = CONFIRMED;

      $ins_tran['total_available_amt'] = $get_user_bal->winning+$get_user_bal->balance+$get_user_bal->bonus;

      $ins_tran['bal_bonus_amt'] = $get_user_bal->bonus;

      $ins_tran['bonus_amt'] = SIGN_UP_BONUS_AMOUNT;

      $ins_tran['amount'] = SIGN_UP_BONUS_AMOUNT;

      // $trans->insert($ins_tran);

      return Response::json(["status" => STATUS_SUCCESS,"message" => "Mobile Number Verified.", "result"=> new LoginResource($user)]);  die;



    } else {

      return Response::json(["status" => STATUS_FAILURE,"message"=>"Otp mismatch."]);  die;

    }

}



  public function verifyOtp_new(Request $request) {

    $this->validate($request,[

      'mobile' => '',
      'email'=>'',
      'type'=>'required',
      'otp' => 'required'

    ]);

    if($request->type == 'email'){
      if (isset($request->email)) {

        $user = RegisterUser::where('email',$request->email)->first();

      }

      elseif (isset($request->user_id)) {

        $user = RegisterUser::where('id',$request->user_id)->first();

      }
      if (isset($request->user_id)) {

        $user = RegisterUser::where('id',$request->user_id)->first();

      }
      // print_r($user);die;
      // if ($user->email_code == $request->otp) {
      if (123456 == $request->otp) {



        $user->email_code = "";

        $user->email_verify = 1;

        $user->save();

        //diposit in user self account

        $userbalance = UserBalance::where('user_id',$user->id)->first();

        if (!is_null($userbalance)) {

            $userbalance->bonus = $userbalance->bonus + 0;


          $userbalance->save();

        }

        $get_user_bal = UserBalance::where('user_id',$user->id)->first();



        $random = rand(1000000,999999999);

         //Entry for bonus to the new user account

        $trans = DB::table('transactions');

        $ins_tran['userid'] = $get_user_bal->user_id;

        $ins_tran['transaction_id'] = 'Fanline11-SIGNUP-'.$random;

        $ins_tran['type'] = SIGN_UP_BONUS_STMT;

        $ins_tran['transaction_by'] = 'Fanline11';

        $ins_tran['paymentstatus'] = CONFIRMED;

        $ins_tran['total_available_amt'] = $get_user_bal->winning+$get_user_bal->balance+$get_user_bal->bonus;

        $ins_tran['bal_bonus_amt'] = $get_user_bal->bonus;

        $ins_tran['bonus_amt'] = SIGN_UP_BONUS_AMOUNT;

        $ins_tran['amount'] = SIGN_UP_BONUS_AMOUNT;

        // $trans->insert($ins_tran);

        return Response::json(["status" => STATUS_SUCCESS,"message" => "Email Verified.", "result"=> new LoginResource($user)]);  die;



      } else {

        return Response::json(["status" => STATUS_FAILURE,"message"=>"Otp mismatch."]);  die;

      }
    }else if($request->type == 'mobile'){
      if (isset($request->mobile)) {

        $user = RegisterUser::where('mobile',$request->mobile)->first();

      }

      elseif (isset($request->user_id)) {

        $user = RegisterUser::where('id',$request->user_id)->first();

      }
      if (isset($request->user_id)) {

        $user = RegisterUser::where('id',$request->user_id)->first();

      }
      // print_r($user);die;
      // if ($user->code == $request->otp) {
      if (123456 == $request->otp) {



        $user->code = "";

        $user->mobile_verify = 1;

        $user->save();



        //diposit in user self account

        $userbalance = UserBalance::where('user_id',$user->id)->first();

        if (!is_null($userbalance)) {

            $userbalance->bonus = $userbalance->bonus + 0;


          $userbalance->save();

        }

        $get_user_bal = UserBalance::where('user_id',$user->id)->first();



        $random = rand(1000000,999999999);

         //Entry for bonus to the new user account

        $trans = DB::table('transactions');

        $ins_tran['userid'] = $get_user_bal->user_id;

        $ins_tran['transaction_id'] = 'Fanline11-SIGNUP-'.$random;

        $ins_tran['type'] = SIGN_UP_BONUS_STMT;

        $ins_tran['transaction_by'] = 'Fanline11';

        $ins_tran['paymentstatus'] = CONFIRMED;

        $ins_tran['total_available_amt'] = $get_user_bal->winning+$get_user_bal->balance+$get_user_bal->bonus;

        $ins_tran['bal_bonus_amt'] = $get_user_bal->bonus;

        $ins_tran['bonus_amt'] = SIGN_UP_BONUS_AMOUNT;

        $ins_tran['amount'] = SIGN_UP_BONUS_AMOUNT;

        // $trans->insert($ins_tran);

        return Response::json(["status" => STATUS_SUCCESS,"message" => "Mobile Number Verified.", "result"=> new LoginResource($user)]);  die;



      } else {

        return Response::json(["status" => STATUS_FAILURE,"message"=>"Otp mismatch."]);  die;

      }

    }
    return Response::json(["status" => STATUS_FAILURE,"message"=>"Please Enter Valid Type"]);  die;


  }

  public function multid_sort($arr, $index) {

      $b = array();

      $c = array();

      foreach ($arr as $key => $value) {

        $b[$key] = $value[$index];

      }

      arsort($b);

      foreach ($b as $key => $value) {

        $c[] = $arr[$key];

      }

      return $c;

    }

    public function searchByValue($products, $field, $value){

      foreach($products as $key => $product)

       {

        if ( $product[$field] === $value )

         return $key;

       }

       return false;

    }


  public function myTeam(Request $request){

    $this->validate($request,[

      'challenge_id' => 'required',

      'matchkey' => 'required',

      'userid' => 'required'

    ]);

    $matchkey = $request->matchkey;

    $userid = $request->userid;

    $challenge_id = $request->challenge_id;

    $findjointeam = JoinTeam::where('matchkey',$matchkey)->where('userid',$userid)->orderBy('teamnumber','ASC')->select('id','teamnumber','players','matchkey','vicecaptain','captain')->get();
    // dd($findjointeam);


    return Response::json(["status" => STATUS_SUCCESS,"result"=>["teams" => TeamResource::collection($findjointeam)]]);die;
    }


      public function referBonusList2(Request $request){
if(isset($request->page)){
  $request->page = $request->page + 1;
}


      $this->validate($request,[

        'user_id' => 'required'

      ]); //exit;

      $user_id = $request->user_id;
      $total_amount = 0;
       $userdata = array();
        // $data = DB::table('refer_bonus')->where('refered_by',$user_id)->get();

        $json = RegisterUser::where('refer_id',$user_id);

if(isset($request->search_text)){
  if(!empty($request->search_text)){
    $json = $json->where('team' , 'like' , '%'.$request->search_text.'%');
  }
}

        $json = $json->select('id','team as email','team as username')
        // ->where('team' , '!=' , '')
        ->orderBy('id' , 'DESC')->paginate(20,['*'],'page',$request->page)->toArray();

        $total_pages = $json['last_page'] - 1;
        $ids = array();

        if (count($json['data'])) {

          foreach ($json['data'] as $j) {

            $ids[] = $j['id'];

          }

        }




        if (!empty($ids)) {

          $userdata = Transaction::whereIn('refer_id',$ids)->select(DB::raw('SUM(amount) as amount'),'userid','refer_id')->groupBy('refer_id')->get();
        // exit();
          $users = array();

          if(count($userdata)){

            foreach ($userdata as $key => $value) {

              $users[$value->refer_id] = $value->amount;

            }

          }

        }
            $refer_ids = array();
         foreach ($userdata as $u) {

            $refer_ids[] = $u->refer_id;

          }

          $i=0;

          foreach($json['data'] as $user){


              // $userdata = Transaction::where('refer_id',$user->id)->sum('amount');
            if (!empty($refer_ids)) {

               if (in_array(@$json['data'][$i]->id,$refer_ids)) {
                $json['data'][$i]['name'] = $user['username'];

                // $json[$i]['email'] = $userdata->email;

                $amount = 0;

               if(isset($users) && isset($users[$user['id']])) {

                $amount = $users[$user['id']];

               }

            $json['data'][$i]['Amount'] = (int)(number_format((float)@$amount,2, '.', '') ? (int)number_format((float)@$amount,2, '.', '')  : "0");
            $total_amount += $json['data'][$i]['Amount'];

            } else {
              $json['data'][$i]['name'] = $user['username'];
              $json['data'][$i]['Amount'] = 0;
            }
            } else {
              $json['data'][$i]['name'] = $user['username'];
              $json['data'][$i]['Amount'] = 0;
            }

            // $json[$i]['userid'] = $userdata->id;

            $i++;

          }



          $total_user = RegisterUser::where('refer_id',$user_id)->count();


    //"total_user"=>1, "total_amount" => 1,

    // $items = $items instanceof Collection ? $items : Collection::make($items);

          return Response::json(["status" => STATUS_SUCCESS,"total_user"=>$total_user,"total_amount"=> $total_amount,"total_pages"=>$total_pages,"result"=>$json['data']]);

          die;

      }

  public function referBonusList(Request $request){

  $this->validate($request,[

    'user_id' => 'required'

  ]); //exit;

  $user_id = $request->user_id;
  $total_amount = 0;
   $userdata = array();
    // $data = DB::table('refer_bonus')->where('refered_by',$user_id)->get();

    $json = RegisterUser::where('refer_id',$user_id)->select('id','email','username')->limit(300)->get();
    // print_r($json); exit;
    $ids = array();

    if (count($json)) {

      foreach ($json as $j) {

        $ids[] = $j->id;

      }

    }



    if (!empty($ids)) {

      $userdata = Transaction::whereIn('refer_id',$ids)->select(DB::raw('SUM(amount) as amount'),'userid','refer_id')->groupBy('refer_id')->get();
    // exit();
      $users = array();

      if(count($userdata)){

        foreach ($userdata as $key => $value) {

          $users[$value->refer_id] = $value->amount;

        }

      }

    }
        $refer_ids = array();
     foreach ($userdata as $u) {

        $refer_ids[] = $u->refer_id;

      }

      $i=0;

      foreach($json as $user){

          // $userdata = Transaction::where('refer_id',$user->id)->sum('amount');
        if (!empty($refer_ids)) {

           if (in_array($json[$i]->id,$refer_ids)) {
            $json[$i]->name = $user->username;

            // $json[$i]['email'] = $userdata->email;

            $amount = 0;

           if(isset($users) && isset($users[$user->id])) {

            $amount = $users[$user->id];

           }

        $json[$i]->Amount = (int)(number_format((float)@$amount,2, '.', '') ? (int)number_format((float)@$amount,2, '.', '')  : "0");
        $total_amount += $json[$i]->Amount;

        } else {
          $json[$i]->name = $user->username;
          $json[$i]->Amount = 0;
        }
        } else {
          $json[$i]->name = $user->username;
          $json[$i]->Amount = 0;
        }

        // $json[$i]['userid'] = $userdata->id;

        $i++;

      }



      $total_user = RegisterUser::where('refer_id',$user_id)->count();


//"total_user"=>1, "total_amount" => 1,
      return Response::json(["status" => STATUS_SUCCESS,"total_user"=>$total_user,"total_amount"=> $total_amount,"result"=>$json]);

      die;

  }



  public function joinTeamList(Request $request){

    $this->validate($request,[

      'teamnumber' => 'required',

      'matchkey' => 'required',

      'teamid' => 'required',

    ]);

    if((isset($request->matchkey)) &&(isset($request->teamnumber))){

        $jointeam = JoinTeam::where('matchkey',$request->matchkey)->where('teamnumber',$request->teamnumber)->select('*')->get();

    }else{

        $matchkey = $request->teamid;

        $jointeam = JoinTeam::where('id',$request->teamid)->select('*')->get();

    }



    // $matchkey = $request->teamid'];

    // $jointeam = DB::table('jointeam')->where('id',$request->teamid'])->select('*')->get();

    $Json=array();

    $bowlers=array();

    $batsman=array();

    $keeper=array();

    $allrounder=array();

    if(count($jointeam)){

      foreach($jointeam as $team){

        $playersarr = explode(',',$team->players);

        $findmatch = ListMatch::where('matchkey',$team->matchkey)->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')->select('listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.team2display','t1.color as team1color','t2.color as team2color')->first();

        $boplayerdetails = MatchPlayer::whereIn('matchplayer.playerid',$playersarr)->where('matchplayers.role','bowler')->where('matchkey',$team->matchkey)->join('players','matchplayer.playerid','=','players.id')->select('players.team','matchplayers.role as playerrole','matchplayer.credit as playercredit','matchplayers.role','players.player_name as playername','matchplayer.playerid as pid','matchplayer.points as totalpoints')->get();

        $batplayerdetails = MatchPlayer::whereIn('matchplayer.playerid',$playersarr)->where('matchplayers.role','batsman')->where('matchkey',$team->matchkey)->join('players','matchplayer.playerid','=','players.id')->select('players.team','matchplayers.role as playerrole','matchplayer.credit as playercredit','matchplayers.role','players.player_name as playername','matchplayer.playerid as pid','matchplayer.points as totalpoints')->get();

        $keeprdetails = MatchPlayer::whereIn('matchplayer.playerid',$playersarr)->where('matchplayers.role','keeper')->where('matchkey',$team->matchkey)->join('players','matchplayer.playerid','=','players.id')->select('players.team','matchplayers.role as playerrole','matchplayer.credit as playercredit','matchplayers.role','players.player_name as playername','matchplayer.playerid as pid','matchplayer.points as totalpoints')->get();

        $allrundetails = MatchPlayer::whereIn('matchplayer.playerid',$playersarr)->where('matchplayers.role','allrounder')->where('matchkey',$team->matchkey)->join('players','matchplayer.playerid','=','players.id')->select('players.team','matchplayers.role as playerrole','matchplayer.credit as playercredit','matchplayers.role','players.player_name as playername','matchplayer.playerid as pid','matchplayer.points as totalpoints')->get();

        if(count($boplayerdetails)){

          $j=0;

          foreach($boplayerdetails as $bowler){

            $Json['bowler'][$j]['id'] = $bowler->pid;

            $Json['bowler'][$j]['player_name'] = $bowler->playername;

            $Json['bowler'][$j]['role'] = $bowler->playerrole;

            $Json['bowler'][$j]['credit'] = $bowler->playercredit;

            $Json['bowler'][$j]['points'] = $bowler->totalpoints;

            if($bowler->team==$findmatch->team1){

              $Json['bowler'][$j]['team'] = 'team1';

              $Json['bowler'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team1color));

            }

            if($bowler->team==$findmatch->team2){

              $Json['bowler'][$j]['team'] = 'team2';

              $Json['bowler'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team2color));

            }

            $vicecaptain=0;

            $captain=0;

            if($team->vicecaptain==$bowler->pid){

              $vicecaptain=1;

            }

            if($team->captain==$bowler->pid){

              $captain=1;

            }

            $Json['bowler'][$j]['vicecaptain'] = $vicecaptain;

            $Json['bowler'][$j]['captain'] = $captain;

            $j++;

          }

        }

      }

      if(count($batplayerdetails)){

          $j=0;

          foreach($batplayerdetails as $batman){

            $Json['batsman'][$j]['id'] = $batman->pid;

            $Json['batsman'][$j]['player_name'] = $batman->playername;

            $Json['batsman'][$j]['role'] = $batman->playerrole;

            $Json['batsman'][$j]['credit'] = $batman->playercredit;

            $Json['batsman'][$j]['points'] = $batman->totalpoints;

            if($batman->team==$findmatch->team1){

              $Json['batsman'][$j]['team'] = 'team1';

              $Json['batsman'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team1color));

            }

            if($batman->team==$findmatch->team2){

              $Json['batsman'][$j]['team'] = 'team2';

              $Json['batsman'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team2color));

            }

            $vicecaptain=0;

            $captain=0;

            if($team->vicecaptain==$batman->pid){

              $vicecaptain=1;

            }

            if($team->captain==$batman->pid){

              $captain=1;

            }

            $Json['batsman'][$j]['vicecaptain'] = $vicecaptain;

            $Json['batsman'][$j]['captain'] = $captain;

            $j++;

          }

        }

        if(count($keeprdetails)){

          $j=0;

          foreach($keeprdetails as $keeper){

            $Json['keeper'][$j]['id'] = $keeper->pid;

            $Json['keeper'][$j]['player_name'] = $keeper->playername;

            $Json['keeper'][$j]['role'] = $keeper->playerrole;

            $Json['keeper'][$j]['credit'] = $keeper->playercredit;

            $Json['keeper'][$j]['points'] = $keeper->totalpoints;



            if($keeper->team==$findmatch->team1){

              $Json['keeper'][$j]['team'] = 'team1';

              $Json['keeper'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team1color));

            }

            if($keeper->team==$findmatch->team2){

              $Json['keeper'][$j]['team'] = 'team2';

              $Json['keeper'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team2color));

            }

            $vicecaptain=0;

            $captain=0;

            if($team->vicecaptain==$keeper->pid){

              $vicecaptain=1;

            }

            if($team->captain==$keeper->pid){

              $captain=1;

            }

            $Json['keeper'][$j]['vicecaptain'] = $vicecaptain;

            $Json['keeper'][$j]['captain'] = $captain;

            $j++;

          }

        }

        if(count($allrundetails)){

          $j=0;

          foreach($allrundetails as $allrounder){

            $Json['allrounder'][$j]['id'] = $allrounder->pid;

            $Json['allrounder'][$j]['player_name'] = $allrounder->playername;

            $Json['allrounder'][$j]['role'] = $allrounder->playerrole;

            $Json['allrounder'][$j]['credit'] = $allrounder->playercredit;

            $Json['allrounder'][$j]['points'] = $allrounder->totalpoints;

            if($allrounder->team==$findmatch->team1){

              $Json['allrounder'][$j]['team'] = 'team1';

              $Json['allrounder'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team1color));



            }

            if($allrounder->team==$findmatch->team2){

              $Json['allrounder'][$j]['team'] = 'team2';

              $Json['allrounder'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team2color));

            }

            $vicecaptain=0;

            $captain=0;

            if($team->vicecaptain==$allrounder->pid){

              $vicecaptain=1;

            }

            if($team->captain==$allrounder->pid){

              $captain=1;

            }

            $Json['allrounder'][$j]['vicecaptain'] = $vicecaptain;

            $Json['allrounder'][$j]['captain'] = $captain;

            $j++;

          }

        }



      }

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

    die;

  }

  /********* This method will return new challenge id from old challenge id to join_league method *******/
  public function get_new_challenge($challenge_id) {
    $new_challenge = DB::table('matchchallenges')->where('matchkey', $matchkey)->where('real_challenge_id', $real_challenge_id)->where('status', '=', 'opened')->first();
    if(!empty($new_challenge)) {
      if($new_challenge->status=='closed') {
        $new_challenge = DB::connection('mysql-write')->table('matchchallenges')->where('challenge_id', $new_challenge->id)->first();
      }
      if(!empty($new_challenge)) {
        return $new_challenge->id;
      } else {
        return 0;
      }
    } else {
      // $new_challenge_id = $this->createNewChallenge($challenge_id);
      // return $new_challenge_id;
    }
  }

  public function get_new_challenge_new($matchkey , $realChallengeId, $fantasy_type, $sport_type){

  $checkisRealJoined = DB::table('matchchallenges')
  ->where('matchkey' , $matchkey)
  ->where('status' , 'opened')
  ->where('real_challenge_id' , $realChallengeId)
  ->where('fantasy_type_id', $fantasy_type)
  ->where('sport_type' , $sport_type)
  // ->where('status' , 'opened')
  ->first();
  // return $checkisRealJoined;
  if(empty($checkisRealJoined)){
    // \Log::info($matchkey."-".$realChallengeId."-".$fantasy_type."-".json_encode($checkisRealJoined));
    // $new_challenge_id = $this->createNewChallenge($challenge_id);
    // return $new_challenge_id;

  }else{
    return $checkisRealJoined->id;
  }

  return 0;

  }
  /*** Function close ***/

  /********* This method will create new challenge from old challenge id *******/
  public function createNewChallenge($challenge_id)
  {
      $findchallenge = DB::table('matchchallenges')->where('id',$challenge_id)->first();
      if( $findchallenge->challenge_type == 'money' && $findchallenge->loops==0){
          //new duplicate challenge//

          $newentry['matchkey'] = $findchallenge->matchkey;

          $newentry['name'] = $findchallenge->name;
          $newentry['real_challenge_id'] = $findchallenge->real_challenge_id;
          $newentry['challenge_id'] = $findchallenge->id;

          $newentry['entryfee'] = $findchallenge->entryfee;

          $newentry['challenge_type'] = $findchallenge->challenge_type;

          $newentry['win_amount'] = $findchallenge->win_amount;

          $newentry['sport_type'] = $findchallenge->sport_type;

          $newentry['maximum_user'] = $findchallenge->maximum_user;

          $newentry['bonus'] = $findchallenge->bonus;

          $newentry['bonus_precent'] = $findchallenge->bonus_precent;

          $newentry['multi_entry'] = $findchallenge->multi_entry;
          $newentry['max_team_limit'] = $findchallenge->max_team_limit;

          $newentry['confirmed_challenge'] = $findchallenge->confirmed_challenge;

          $newentry['is_running'] = $findchallenge->is_running;

          $newentry['challenge_category_id'] = $findchallenge->challenge_category_id;
          $newentry['fantasy_type_id'] = $findchallenge->fantasy_type_id;
          $newentry['fantasy_type'] = $findchallenge->fantasy_type;
          $newentry['slotes_id'] = $findchallenge->slotes_id;
          $newentry['is_batting_fantasy_enable'] = $findchallenge->is_batting_fantasy_enable;
          $newentry['is_bowling_fantasy_enable'] = $findchallenge->is_bowling_fantasy_enable;

          $findifexist = DB::connection('mysql-write')->table('matchchallenges')->where('challenge_id',$findchallenge->id)->get();

          if($findifexist->isEmpty()) {

          $getcid = DB::connection('mysql-write')->table('matchchallenges')->insertGetId($newentry);

          // print_r($getcid); exit;

            // $sql = "INSERT INTO `matchchallenges` (`matchkey`, name, challenge_id, entryfee, challenge_type, winning_percentage, win_amount, maximum_user, bonus, bonus_precent, multi_entry, confirmed_challenge, is_running, challenge_category_id) SELECT '".$newentry['matchkey']."', '', '".$newentry['challenge_id']."', ".$newentry['entryfee']." , 'money', ".$newentry['winning_percentage'].", ".$newentry['win_amount'].", ".$newentry['maximum_user'].", ".$newentry['bonus'].", ".$newentry['bonus_precent'].", ".$newentry['multi_entry'].", ".$newentry['confirmed_challenge'].", ".$newentry['is_running'].", ".$newentry['challenge_category_id']." FROM DUAL WHERE (SELECT COUNT(id) FROM matchchallenges WHERE challenge_id = ".$newentry['challenge_id']." AND matchkey = '".$newentry['matchkey']."') < 1";

            //      DB::insert($sql);

            //      $challenge_insert_id = DB::table('matchchallenges')->where('challenge_id',$newentry['challenge_id'])->where('matchkey',$newentry['matchkey'])->first();

            //      $getcid = $challenge_insert_id->id;

          $findpricecards = DB::table('matchpricecards')->where('challenge_id',$findchallenge->id)->where('matchkey',$findchallenge->matchkey)->get();

          if(!$findpricecards->isEmpty()){

            $findpricecardexist = DB::connection('mysql-write')->table('matchpricecards')->where('challenge_id',$getcid)->where('matchkey',$findchallenge->matchkey)->get();

                  if($findpricecardexist->isEmpty()) {

            foreach($findpricecards as $pricec){

                $pdata = array();

              $pdata['challenge_id'] = $getcid;

              $pdata['matchkey'] = $findchallenge->matchkey;

              $pdata['winners'] = $pricec->winners;

              $pdata['price'] = $pricec->price;

              $pdata['min_position'] = $pricec->min_position;

              $pdata['max_position'] = $pricec->max_position;

              $pdata['description'] = $pricec->description;

              $pdata['total'] = $pricec->total;

              DB::table('matchpricecards');

              DB::table('matchpricecards')->insert($pdata);

            }

          }

          }

          return $getcid;
          }

        }
        return 0;
  }
  /*** Function close ***/

   public function joinleague_new_v2(Request $request){
     // dd($request->all());
     // return "hi";

     // echo $request->all();exit;
    // \Log::info(json_encode($request->all()));

    // $this->validateLogin($request->user_id);

    $this->validate($request,[

      'user_id' => 'required',

      'challengeid' => 'required',

      'teamid' => 'required'

    ]);

    $matchkey_data =  DB::table('matchchallenges')->where('id',$request->challengeid)->first();
     // print_r($matchkey_data);exit;
    $sport_type = (isset($request->sport_key) ? $request->sport_key : 'cricket');
    $sportType = (object)array();
    $sportType->id = $matchkey_data->sport_type;
    $slotes_id = $matchkey_data->slotes_id;
    $fantasy_type = $matchkey_data->fantasy_type_id;

    if($fantasy_type == 4){
        $fantasy_type = 0;
      }
    $matchkey = $data['matchkey'] =  $matchkey_data->matchkey;


    $matchkey = $matchkey_data->matchkey;

    if(!empty($fantasy_type)){
        if(!empty($slotes_id) && $fantasy_type==1){
            $slotes_id=$slotes_id;
            $fantasy_type=$fantasy_type;
        }else{
          $fantasy_type = $fantasy_type;
        }

    }

    // $this->accessrules();

    $userid =  $data['userid'] =  $request->user_id;
    $new_challenge_id = 0;

    $listmatchestartdate = DB::table('listmatches')->where('matchkey',$matchkey)->where('sport_type',$sportType->id)->select('start_date' , 'is_live_fantasy_enable','team1display','team2display')->first();

    $getcurrentdate = date('Y-m-d H:i:s');

    $matchremainingdate = @$listmatchestartdate->start_date;

// if($request->user_id != 279907){

    $Json = array();
    if($getcurrentdate>$matchremainingdate && $listmatchestartdate->is_live_fantasy_enable == 0){
      $Json[0]['message'] = 'Match closed';

      return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);

      die;

      // echo json_encode($Json);die;

    }
  // }

    if($request->is_join_popup == 1) {
        $challenge_detail = $matchkey_data;
        if(@$challenge_detail->real_challenge_id > 0) {
            // $real_challenge = DB::connection('mysql-write')->table('matchchallenges')
            $real_challenge = DB::table('matchchallenges')
            ->where('real_challenge_id', $challenge_detail->real_challenge_id)
            ->where('matchkey', $challenge_detail->matchkey)
            ->where('sport_type', $challenge_detail->sport_type)
            ->where('fantasy_type_id', $fantasy_type)
            // ->where('slotes_id', $slotes_id)
            ->where('status', '=', 'opened')
            ->select('id')->first();
            if(@$real_challenge->id > 0) {
                $challengeid =  $data['challengeid'] = $real_challenge->id;
            } else {
                $challengeid =  $data['challengeid'] = $request->challengeid;
            }

        } else {
            $challengeid =  $data['challengeid'] = $request->challengeid;
        }

    } else {
        $challengeid =  $data['challengeid'] = $request->challengeid;
    }

    $teamids =  array_filter(explode(',',$request->teamid));
    // $teamid =  $data['teamid'] = $teamid[0];


    if(count($teamids)  < 1) {
      $Json[0]['message'] = 'There is some error, Please select team again';
      return Response::json(["status"=>3,"message"=>$Json[0]['message']]);
      die;
    }

    // $checkIsValidChallenge = DB::table('matchchallenges')->where('id', $challengeid)->where('fantasy_type_id', $fantasy_type)->count();

    if($matchkey_data->fantasy_type_id != $fantasy_type) {
      $Json[0]['message'] = 'There is some error, contest is not exist on system';
      return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);
      die;
    }
/*if(isset($request->teamid)){
    $checkIsValidTeam = DB::table('jointeam')->where('id', $request->teamid)->where('fantasy_type_id', $fantasy_type)->count();

    if($checkIsValidTeam < 1) {
      $Json[0]['message'] = 'There is some error, team is not exist on system';
      return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);
      die;
    }
  }*/

    $getJoinTeam = DB::table('jointeam')->where('matchkey', $matchkey)->where('userid', $userid)->whereIn('id', $teamids)->where('fantasy_type_id', $fantasy_type)->count();
    if(count($teamids) != $getJoinTeam) {
      $Json[0]['message'] = 'There is some error, some team is not exist on system';
      return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);
      die;
    }

    $userdetailsfind = DB::table('registerusers')->where('id',$userid)->where('activation_status','!=','deactivated')->first();

    if(empty($userdetailsfind)) {

      $Json[0]['message'] = 'There is some error please login again.';

      return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);

      die;

    }



    // $IP=self::getUserIpAddr();
    //
    // $playStore = 0;
    // if(isset($request->playstore)){
    //   if($request->playstore == 1){
    //     $playStore = 1;
    //   }
    // }
    // if($playStore==1){
    //
    //
    // $curl = curl_init();
    //
    // curl_setopt_array($curl, array(
    //   CURLOPT_URL => 'http://www.geoplugin.net/json.gp?ip='.$IP,
    //   CURLOPT_RETURNTRANSFER => true,
    //   CURLOPT_ENCODING => '',
    //   CURLOPT_MAXREDIRS => 10,
    //   CURLOPT_TIMEOUT => 0,
    //   CURLOPT_FOLLOWLOCATION => true,
    //   CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    //   CURLOPT_CUSTOMREQUEST => 'GET',
    // ));
    //
    // $response = curl_exec($curl);
    //
    // curl_close($curl);
    // $response = json_decode($response);
    // if($response->geoplugin_countryCode != "IN"){
    //   $Json[0]['message'] = 'Currently, You cannot add cash to your account or cannot play the cash contest, As we can see you are not satisfying our preconditions for play cash contest.';
    //
    //   return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => 0]);
    //
    //   die;
    //
    // }
    // if($response->geoplugin_countryCode == "IN"){
    //
    // if($userdetailsfind->pan_verify == 1 && $userdetailsfind->bank_verify == 1 && $userdetailsfind->adhar_verify == 1){
    //
    //
    // }else{
    //   $Json[0]['message'] = 'Currently, You cannot add cash to your account or cannot play the cash contest, As we can see you are not satisfying our preconditions for play cash contest';
    //
    //   return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => 0]);
    //
    //   die;
    //
    // }
    //
    // }
    //
    // }

    $refercode = $characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

    $refercode = '';

    $max = strlen($characters) - 1;

     for ($i = 0; $i < 6; $i++){

        $refercode.= $characters[mt_rand(0, $max)];

     }

     $data['refercode'] = $refercode;


     // $getJoinedTeams = DB::connection('mysql-write')->table('joinedleauges')->where('matchkey', $matchkey)->where('userid', $userid)->where('challengeid', $challengeid)->count();
     $getJoinedTeams = DB::table('joinedleauges')->where('userid',$userid)->where('sport_type',$sportType->id)->where('challengeid',$challengeid)->where('matchkey',$matchkey)->select('teamid')->get();;
     $findchallenge = DB::table('matchchallenges')->where('id',$challengeid)->first();
     // dd($findchallenge->sport_type);
     $totalTeamJoin = count($getJoinedTeams) + count($teamids);

     if($findchallenge->multi_entry == 1 && $findchallenge->max_team_limit < $totalTeamJoin){
         $Json[0]['message'] = 'Maximum join team limit for this contest is '.$findchallenge->max_team_limit;
         return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);
         die;
     } else if($findchallenge->multi_entry == 0 && $totalTeamJoin > 1) {
         $Json[0]['message'] = 'You have already joined this contest with some other team';
         return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);
         die;
     }


     if($findchallenge->status=='closed'){
        $Json[0]['message'] = 'League closed';

        if($findchallenge->loops==0){
          // $new_challenge_id = $this->get_new_challenge($findchallenge->id);
          $new_challenge_id = $this->get_new_challenge_new($matchkey , $findchallenge->real_challenge_id, $fantasy_type,$findchallenge->sport_type);
        }
        if($new_challenge_id) {

          return Response::json(["status"=>STATUS_FAILURE,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);
        } else {
          return Response::json(["status"=>3,"message"=>$Json[0]['message']]);
        }

        die;

        echo json_encode($Json);die;

      }

      if($findchallenge->win_amount>0){

        if($userdetailsfind->state=='Telangana' || $userdetailsfind->state=='Orissa' || $userdetailsfind->state=='Assam' || $userdetailsfind->state=='Nagaland' || $userdetailsfind->state=='Orissa' || $userdetailsfind->state=='Andhra Pradesh' || $userdetailsfind->state=='Karnataka'){

          $Json[0]['message'] = 'State ban for join contest.';

        return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);

        die;

          echo json_encode($Json);die;

        }

      }

      $cur_joined = $findchallenge->joinedusers;
      // $cur_joined =  DB::connection('mysql-write')->table('joinedleauges')->where('matchkey', $matchkey)->where('challengeid', $challengeid)->count();

      //find leauges already exist or not //

      $findexistornot = $getJoinedTeams;

      if(!$findexistornot->isEmpty()){

        if($findchallenge->multi_entry==0){

          $Json[0]['message'] = 'Already joined';

          return Response::json(["status"=>3,"message"=>$Json[0]['message']]);

        die;

          echo json_encode($Json);die;

        }else{

          foreach($findexistornot as $ff){

            if(in_array($ff->teamid,$teamids)){
               $teamData = DB::table('jointeam')->where('id',$ff->teamid)->first();
              $Json[0]['message'] = 'Team '.$teamData->teamnumber.' already joined';

              return Response::json(["status"=>3,"message"=>$Json[0]['message']]);

        die;
            }

          }

        }

      }

      //check for leauge closed or not //
      $teamCount  = count($teamids);
      $dataused = array();

      $dataleft = array();

      $updatedata['joinedusers'] = $findchallenge->joinedusers+1;
      // print_r($updatedata['joinedusers']); exit;

      if($findchallenge->challenge_type == 'money'){

        if($updatedata['joinedusers']>$findchallenge->maximum_user){

          $Json[0]['message'] = 'League closed';

          return Response::json(["status"=>3,"message"=>$Json[0]['message']]);

        die;

          echo json_encode($Json);die;

        }

      }



      //start deduct money code for join leauge//

      $finduserbalance = DB::connection('mysql-write')->table('userbalances')->where('user_id',$userid)->lockForUpdate()->first();

      $is_contest_free_team = 0;

      if(!empty($finduserbalance)){

        $findentryfee = $findchallenge->entryfee;
        $findentryfee = $findentryfee * $teamCount;

        //free team number joining
		if($findchallenge->multi_entry == 1 && $findchallenge->contest_free_team > 0) {
	      	$joined_freeteam_exists = DB::table("joined_freeteam")
	      		->where("user_id", $userid)
	      		->where("challenge_id", $challengeid)
	      		->doesntExist();
	      	if($joined_freeteam_exists) {
		      	if($totalTeamJoin >= $findchallenge->contest_free_team && count($getJoinedTeams) < $findchallenge->contest_free_team) {
		      		$findentryfee = $findchallenge->entryfee * ($teamCount-1);
		      		$is_contest_free_team = 1;
		      	}
	      	}
    	}
    	//end free team number joining


        $dataleft['bonus'] = $findbonusforuser = $finduserbalance->bonus;

        $dataleft['winning'] = $finduserbalance->winning;

        $dataleft['balance'] = $finduserbalance->balance;

        $totalbonus = $finduserbonus = $finduserbalance->bonus;

        $usedbonus = 0;

        $canusedbonus = 0;

        $totalwining = $canusedwining = $finduserbalance->winning;

        $totalbalance = $canusedbalance = $finduserbalance->balance;

        $totbalan = $finduserbalance->bonus + $finduserbalance->winning + $finduserbalance->balance;

        $findusablebalance = $finduserbalance->balance+$finduserbalance->winning;

        $reminingfee = $findentryfee;

        //find bonus//

$isBonusTeamExists = false;
$BonusteamId = 0;
$OfferTeambonusUsed = 0;
// var_dump($teamids[0]);exit;
if($findchallenge->is_offer_team == 1 && $findchallenge->contest_bonus_team != 0){


for($cc = 1; $cc <= count($teamids); $cc++){
  if($findchallenge->contest_bonus_team == (count($getJoinedTeams) + $cc)){
    $BonusteamId = $teamids[$cc-1];
    $isBonusTeamExists = true;
  }
}

}
// var_dump($isBonusTeamExists);
// var_dump($BonusteamId);
// var_dump($findentryfee);exit;
// echo " isBonusTeamExists-- ".$isBonusTeamExists;exit;
if($findchallenge->is_offer_team == 1 && $findchallenge->contest_bonus_team != 0 && $isBonusTeamExists == true){

   $findBonusOfferEntryFee = $findchallenge->entryfee * $findchallenge->offer_bonus_percent / 100;



   if($finduserbonus >= $findBonusOfferEntryFee){

     $remainingbonus = $finduserbonus-$findBonusOfferEntryFee;
     $OfferTeambonusUsed = $findBonusOfferEntryFee;
     $dataleft['bonus'] = $dataleft['bonus'] - $findBonusOfferEntryFee;

     $transactiondata['cons_bonus'] = $dataused['bonus'] = $findBonusOfferEntryFee;

     $reminingfee=$findentryfee - $findBonusOfferEntryFee;



   }else{

     $reminingfee = $findentryfee-$finduserbonus;
     $OfferTeambonusUsed = $finduserbonus;

     $remainingbonus = 0;

     $dataleft['bonus'] = $dataleft['bonus'] - $finduserbonus;

     $transactiondata['cons_bonus'] = $dataused['bonus'] = $finduserbonus;

   }
// var_dump($OfferTeambonusUsed);exit;
}
// exit;

        if($findchallenge->bonus == 1){

                $bonus_precent = $findchallenge->bonus_precent;

                $bonus_entry_fee = $findentryfee * $bonus_precent / 100;

                // if(($findusablebalance+($finduserbonus*$bonus_precent/100))<$findentryfee)

                $findusablebalance = $findusablebalance+ $finduserbonus;

                // $finduserbonus = ($finduserbonus * $bonus_precent) / 100;



                if(($finduserbalance->balance+$finduserbalance->winning) < ($findentryfee-$bonus_entry_fee)) {
                    $remainingAmount =  ($findentryfee-$bonus_entry_fee) - ($finduserbalance->balance+$finduserbalance->winning);
                      $Json[0]['message'] = 'Insufficient balance, please add '.$remainingAmount.' more on your wallet';
                  return Response::json(["status"=>3,"message"=>$Json[0]['message']]);

              die;

                  echo json_encode($Json);die;

                }

        }

        //start deduct money section//

        if($findusablebalance<$findentryfee){
            $remainingAmount =  $findentryfee - $findusablebalance;
            $Json[0]['message'] = 'Insufficient balance, please add '.$remainingAmount.' more on your wallet';

          return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);

        die;

          echo json_encode($Json);die;

        }



        if($findchallenge->bonus == 1){

          if($finduserbonus >= $bonus_entry_fee){

            $remainingbonus = $finduserbonus-$bonus_entry_fee;

            $dataleft['bonus'] = $dataleft['bonus'] - $bonus_entry_fee;

            $transactiondata['cons_bonus'] = $dataused['bonus'] = $bonus_entry_fee;

            $reminingfee=$findentryfee - $bonus_entry_fee;

          }else{

            $reminingfee = $findentryfee-$finduserbonus;

            $remainingbonus = 0;

            $dataleft['bonus'] = $dataleft['bonus'] - $finduserbonus;

            $transactiondata['cons_bonus'] = $dataused['bonus'] = $finduserbonus;

          }

        }





        if($totalbalance >= $reminingfee){

          $dataleft['balance'] = $totalbalance - $reminingfee;

          $transactiondata['cons_amount'] = $dataused['balance'] = $reminingfee;

          $reminingfee=0;

        }else{

          $reminingfee = $reminingfee-$totalbalance;

          $dataleft['balance'] = 0;

          $transactiondata['cons_amount'] = $dataused['balance'] = $totalbalance;

        }





        if($totalwining >= $reminingfee){

          $dataleft['winning'] = $totalwining - $reminingfee;

          $transactiondata['cons_win'] = $dataused['winning'] = $reminingfee;

          $reminingfee=0;

        }

        else{

          $reminingfee = $reminingfee-$totalwining;
          $dataleft['winning'] = 0;

          $transactiondata['cons_win'] = $dataused['winning'] = $totalwining;

        }

        // yha tk

        $tranid = time();

        // to enter in joined leauges table//

        $data['transaction_id'] = 'FANLINE11-JL-'.$tranid.'-'.$userid;



        $data['refercode'] = $refercode.'-'.time().''.$userid;



        try {

          if($findchallenge->challenge_type == 'percentage') {
            foreach($teamids as $teamid) {
                $leaguesData[] = ['sport_type' => $sportType->id, 'userid' => $userid, 'challengeid' => $challengeid, 'teamid' => $teamid, 'matchkey' => $matchkey, 'refercode' => $data['refercode'], 'transaction_id' => $data['transaction_id'],'fantasy_type_id' => $fantasy_type,'slotes_id' => $slotes_id, 'pdfcreate' => 0, 'pdfname' => ''];
            }
              DB::connection('mysql-write')->table("joinedleauges")->insert($leaguesData);
              if(count($getJoinedTeams) < 1) {

                // Helpers::update_user_joined_count($matchkey,$fantasy_type,$userid);
              }
              //$challenge_insert_id = DB::select('SELECT LAST_INSERT_ID()');
          } else {
            $joinedLeaguesCount = $cur_joined;
            if($joinedLeaguesCount < $findchallenge->maximum_user){
                $availableSlot = $findchallenge->maximum_user - $joinedLeaguesCount;
                if($availableSlot < $teamCount){
                    return Response::json(["status"=>3,"message"=>'This contest having '.$availableSlot.' left only.']);
                }
            } else {
              if($findchallenge->loops==0){
                // $new_challenge_id = $this->get_new_challenge($findchallenge->id);
                // dd('asfasdf');
                $new_challenge_id = $this->get_new_challenge_new($matchkey , $findchallenge->real_challenge_id, $fantasy_type,$findchallenge->sport_type);
              }
              if($new_challenge_id) {
                  // dd('sdfasd');
                return Response::json(["status"=>STATUS_FAILURE,"message"=>"This contest is full please join another contest","new_challenge_id" => $new_challenge_id]);
              } else {
                return Response::json(["status"=>3,"message"=>'This contest is full please join another contest',"new_challenge_id" => 0]);
              }
            }

                $ll = $looperr = 0;
                $unique_challenge_join_arr = $this->getUniqueChallengeJoin($challengeid, count($teamids), $looperr);
                if($unique_challenge_join_arr['status'] == false) {
                    if($unique_challenge_join_arr['new_challenge_id']) {
                      // dd('sdfs');
                        return Response::json(["status"=>STATUS_FAILURE,"message"=>"This contest is full please join another contest","new_challenge_id" => $unique_challenge_join_arr['new_challenge_id']]);
                    }
                    else {
                        return Response::json(["status"=>3,"message"=>'This contest is full please join another contest',"new_challenge_id" => 0]);
                    }
                }

                $unique_challenge_join = $unique_challenge_join_arr['count'];

                $u = 0;
                foreach($teamids as $teamid) {
                    $leaguesData[] = array(
                        'sport_type' => $sportType->id,
                        'userid' => $userid,
                        'challengeid' => $challengeid,
                        'teamid' => $teamid,
                        'matchkey' => $matchkey,
                        'refercode' => $data['refercode'],
                        'transaction_id' => $data['transaction_id'],
                        'fantasy_type_id' => $fantasy_type,
                        'slotes_id' => $slotes_id,
                        'pdfcreate' => 0,
                        'pdfname' => ''
                    );
                    if($findchallenge->maximum_user < 101) {
                        $leaguesData[$u]['unique_contest_key'] = $challengeid."_".( ($unique_challenge_join+$u) <= $findchallenge->maximum_user ? ($unique_challenge_join+$u) : $findchallenge->maximum_user);
                    }
                    $u++;
                }

                // dd($leaguesData);

                while ($ll < 2) {
                    try {
                        if($looperr > 0) {
                            $u = 0;
                            $unique_challenge_join_arr =  $this->getUniqueChallengeJoin($challengeid, count($teamids), $looperr);
                            if($unique_challenge_join_arr['status'] == false) {
                                if($unique_challenge_join_arr['new_challenge_id']) {
                                  // dd('sdfasdf');
                                    return Response::json(["status"=>STATUS_FAILURE,"message"=>"This contest is full please join another contest","new_challenge_id" => $unique_challenge_join_arr['new_challenge_id']]);
                                }
                                else {
                                    return Response::json(["status"=>3,"message"=>'This contest is full please join another contest',"new_challenge_id" => 0]);
                                }
                            }

                            if($findchallenge->maximum_user < 101) {
                            $unique_challenge_join = $unique_challenge_join_arr['count'];
                            foreach ($leaguesData as $ld_key => $ld_value) {
                                $leaguesData[$ld_key]["unique_contest_key"] = $challengeid."_".( ($unique_challenge_join+$u) <= $findchallenge->maximum_user ? ($unique_challenge_join+$u) : $findchallenge->maximum_user );
                                $u++;
                            }
                            }
                        }

                        DB::table("joinedleauges")->insert($leaguesData);
                        if(count($getJoinedTeams) < 1) {
                            // Helpers::update_user_joined_count($matchkey,$fantasy_type,$userid);
                        }
                        break;

                    } catch(\Illuminate\Database\QueryException $ex) {
                          // var_dump($ex->getMessage());exit;
                    	\Log::info($ex->getMessage());
                        $looperr++;
                        $ll++;
                    }
                }

                if($ll > 2) {
                    if($findchallenge->loops==0){
                        $new_challenge_id = $this->get_new_challenge_new($matchkey, $findchallenge->real_challenge_id, $fantasy_type,$findchallenge->sport_type);
                    }
                    if($new_challenge_id) {
                        return Response::json(["status"=>STATUS_FAILURE,"message"=>"This contest is full please join another contest","new_challenge_id" => $new_challenge_id]);
                    } else {
                        return Response::json(["status"=>3,"message"=>'This contest is full please join another contest',"new_challenge_id" => 0]);
                    }
                }

            }


            if($findchallenge->maximum_user < 5 && $getcurrentdate<date('Y-m-d H:i:s', strtotime('-30 minutes', strtotime($matchremainingdate)))) {
              $joinedleaguesData = DB::table('joinedleauges')->where('userid' , $userid)->where('matchkey' , $matchkey)->pluck('challengeid');
              $checkisRealJoined = DB::table('matchchallenges')->where('matchkey' , $matchkey)->where('real_challenge_id' , $findchallenge->real_challenge_id)
              ->where('status' , 'opened')
              ->where('fantasy_type_id' , $fantasy_type)
              // ->where('slotes_id' , $slotes_id)
              ->whereNotIn('id' , $joinedleaguesData)
              ->first();
              // var_dump($joinedleaguesData);
              // var_dump($checkisRealJoined);exit;
              if(empty($checkisRealJoined)){
                // var_dump("create new");
                $new_challenge_id = $this->createNewChallenge($findchallenge->id);
            }
            }

            } catch(\Illuminate\Database\QueryException $ex) {

              if($findchallenge->loops==0){
                // $new_challenge_id = $this->get_new_challenge($findchallenge->id);

                $new_challenge_id = $this->get_new_challenge_new($matchkey , $findchallenge->real_challenge_id, $fantasy_type,$findchallenge->sport_type);
              }
              if($new_challenge_id) {

                return Response::json(["status"=>STATUS_FAILURE,"message"=>"This contest is full please join another contest","new_challenge_id" => $new_challenge_id]);
              } else {
                return Response::json(["status"=>3,"message"=>'This contest is full please join another contest',"new_challenge_id" => 0]);
              }
              // return Response::json(["status"=>3,"message"=>"This contest is full please join another contest","err"=>$ex]);

        }



            // $getinsertid = @$challenge_insert_id->id ? $challenge_insert_id->id : 0; //echo $getinsertid; exit;





        try {
          // dd('ff');
            DB::beginTransaction();


            $joinedLeagues = DB::connection('mysql-write')->table('joinedleauges')->whereIn('teamid',$teamids)->where('challengeid',$challengeid)->where('matchkey',$matchkey)->where('sport_type',$sportType->id)->get();
            // dd($joinedLeagues);
            if($joinedLeagues->isEmpty()) {
                return Response::json(["status"=>3,"message"=>'Something went wrong!',"new_challenge_id" => 0]);
            }
            //entry in leauges transactions//


// var_dump($dataused);exit;
            $OfferTeamBalanceUsed = 0;
            $OfferTeamWinningUsed = 0;
            $remainingAmount_bonus_entry_balance = 0;
            $remainingAmount_bonus_entry_winning = 0;
            $remainingAmount_bonus_entry = $findchallenge->entryfee - $OfferTeambonusUsed;

            if(isset($dataused['bonus']) && $dataused['bonus'] > 0){
              // $dataused['bonus'] = $dataused['bonus'] / $teamCount;
              if($isBonusTeamExists == true && $is_contest_free_team == 1) {

                $used_bonus_new = $dataused['bonus'] - $OfferTeambonusUsed;
                // $dataused['bonus'] = round(($dataused['bonus'] / ($teamCount-1)),2);

                $dataused['bonus'] = $used_bonus_new > 0 ? round(($used_bonus_new / ($teamCount-2)),2) : 0;

                $dataused['bonus'] = is_nan($dataused['bonus']) ? 0 : $dataused['bonus'];

              }
            	else if($is_contest_free_team == 1) {

                $dataused['bonus'] = round(($dataused['bonus'] / ($teamCount-1)),2);
              }
            else if($isBonusTeamExists == true) {


                 $used_bonus_new = $dataused['bonus'] - $OfferTeambonusUsed;

               	 // $dataused['bonus'] = round(($dataused['bonus'] / ($teamCount-1)),2);
               	 $dataused['bonus'] = $used_bonus_new > 0 ? round(($used_bonus_new / ($teamCount-1)),2) : 0;
                 $dataused['bonus'] = is_nan($dataused['bonus']) ? 0 : $dataused['bonus'];

               }
          	else{

              $dataused['bonus'] = round(($dataused['bonus'] / $teamCount),2);
            }
          } else {
            $dataused['bonus'] = 0;
          }


            if(isset($dataused['balance']) && $dataused['balance'] > 0){
              // $dataused['balance'] = $dataused['balance'] / $teamCount;
              $used_balance_new = $dataused['balance'];
             if($is_contest_free_team == 1 && $isBonusTeamExists == true){

                if($remainingAmount_bonus_entry > 0) {
                   if($dataused['balance'] > $remainingAmount_bonus_entry) {

                     $used_balance_new = $dataused['balance'] - $remainingAmount_bonus_entry;
                     $remainingAmount_bonus_entry_balance = $remainingAmount_bonus_entry;
                   } else {
                     $used_balance_new = $remainingAmount_bonus_entry = $remainingAmount_bonus_entry - $dataused['balance'];
                     $remainingAmount_bonus_entry_balance = $dataused['balance'];
                   }
                 }

                 $dataused['balance'] = $used_balance_new > 0 ? round(($used_balance_new / ($teamCount-2)),2) : 0;
                $dataused['balance'] = is_nan($dataused['balance']) ? 0 : $dataused['balance'];

              }else if($is_contest_free_team == 1){
                    $dataused['balance'] = round(($dataused['balance'] / ($teamCount-1)),2);
              }else if($isBonusTeamExists == true){

                    if($remainingAmount_bonus_entry > 0) {
                    if($dataused['balance'] > $remainingAmount_bonus_entry) {
                      $used_balance_new = $dataused['balance'] - $remainingAmount_bonus_entry;
                       $remainingAmount_bonus_entry_balance =  $remainingAmount_bonus_entry;
                    } else {
                      $used_balance_new = 0;
                      $remainingAmount_bonus_entry = $remainingAmount_bonus_entry - $dataused['balance'];
                      $remainingAmount_bonus_entry_balance =   $dataused['balance'];
                    }
                  }

                    $dataused['balance'] = $used_balance_new > 0 ? round(($used_balance_new / ($teamCount-1)),2) : 0;

                    $dataused['balance'] = is_nan($dataused['balance']) ? 0 : $dataused['balance'];

              }else{
                    $dataused['balance'] = round(($dataused['balance'] / $teamCount),2);
                  }
            } else {
              $dataused['balance'] = 0;
            }



            if(isset($dataused['winning']) && $dataused['winning'] > 0){
              // $dataused['winning'] = $dataused['winning'] / $teamCount;

              $used_winning_new = $dataused['winning'];


              if($is_contest_free_team == 1 && $isBonusTeamExists == true){

                if($remainingAmount_bonus_entry > 0) {
                   if($dataused['winning'] > $remainingAmount_bonus_entry) {

                     $used_winning_new = $dataused['winning'] - $remainingAmount_bonus_entry;
                     $remainingAmount_bonus_entry_winning = $remainingAmount_bonus_entry;

                   } else {
                     $used_winning_new = 0;
                     $remainingAmount_bonus_entry = $remainingAmount_bonus_entry - $dataused['winning'];
                     $remainingAmount_bonus_entry_winning =  $dataused['winning'];
                   }
                 }


                $dataused['winning'] = $used_winning_new > 0 ? round(($used_winning_new / ($teamCount-2)),2) : 0;

                $dataused['winning'] = is_nan($dataused['winning']) ? 0 : $dataused['winning'];

              }else if($is_contest_free_team == 1){
                $dataused['winning'] = round(($dataused['winning'] / ($teamCount-1)),2);
              }else if($isBonusTeamExists == true){



                if($remainingAmount_bonus_entry > 0) {
                if($dataused['winning'] > $remainingAmount_bonus_entry) {

                  $used_winning_new = $dataused['winning'] - $remainingAmount_bonus_entry;
                  $remainingAmount_bonus_entry_winning = $remainingAmount_bonus_entry;
                } else {
                  $used_winning_new = $remainingAmount_bonus_entry = $remainingAmount_bonus_entry - $dataused['winning'];
                  $remainingAmount_bonus_entry_winning = $dataused['winning'];
                }
                }


                $dataused['winning'] = $used_winning_new > 0 ? round(($used_winning_new / ($teamCount-1)),2) : 0;
                $dataused['winning'] = is_nan($dataused['winning']) ? 0 : $dataused['winning'];

              }else{
                $dataused['winning'] = round(($dataused['winning'] / $teamCount),2);
              }
            } else {

              $dataused['winning'] = 0;
            }



            $ltc = 1;
            $deduct_bonus = @$dataused['bonus'] ?? 0;
            $deduct_balance = @$dataused['balance'] ?? 0;
            $deduct_winning = @$dataused['winning'] ?? 0;
            foreach($joinedLeagues as $joinedLeague){

              // $dataused['bonus'] = $dataused['bonus'];

                $dataused['matchkey'] = $matchkey;

                $dataused['user_id'] = $userid;

                $dataused['challengeid'] = $challengeid;

                $dataused['joinid'] = $joinedLeague->id;

                if($is_contest_free_team == 1) {

                  $dataused1['matchkey'] = $matchkey;
                  $dataused1['user_id'] = $userid;
                  $dataused1['challengeid'] = $challengeid;
                  $dataused1['joinid'] = $joinedLeague->id;

                	if($ltc+count($getJoinedTeams) == $findchallenge->contest_free_team) {

						$dataused1['bonus'] = 0;
						$dataused1['balance'] = 0;
                		$dataused1['winning'] = 0;
                	} else {

                		$dataused1['bonus'] = $deduct_bonus;
						$dataused1['balance'] = $deduct_balance;
                		$dataused1['winning'] = $deduct_winning;
                	}

                      DB::table('leaugestransactions')->insert($dataused1);

                }else if($isBonusTeamExists == true && $BonusteamId ==  $joinedLeague->teamid) {
                  $dataused2['matchkey'] = $matchkey;
                  $dataused2['user_id'] = $userid;
                  $dataused2['challengeid'] = $challengeid;
                  $dataused2['joinid'] = $joinedLeague->id;

                		$dataused2['bonus'] = $OfferTeambonusUsed;
						        $dataused2['balance'] = $remainingAmount_bonus_entry_balance;
                		$dataused2['winning'] = $remainingAmount_bonus_entry_winning;
                    DB::table('leaugestransactions')->insert($dataused2);
                }else{

                  DB::table('leaugestransactions')->insert($dataused);

                }





                $ltc++;

            }
            // exit;

              //updatewallet table//

              DB::connection('mysql-write')->table('userbalances')->where('user_id',$userid)->update($dataleft);



              DB::commit();
              // $this->UpdateUserLevel($userid,$findchallenge);



              $findnowamount = DB::connection('mysql-write')->table('userbalances')->where('user_id',$userid)->first();

              //end deduct money section//

              //start entry in transaction table//



              $transactiondata['type'] = 'Challenge Joining Fee';

              $transactiondata['amount'] = $findentryfee;

              $transactiondata['total_available_amt'] = $totbalan - $findentryfee;

              $transactiondata['transaction_by'] = 'wallet';

              $transactiondata['challengeid'] = $challengeid;

              $transactiondata['userid'] = $userid;

              $transactiondata['paymentstatus'] = 'confirmed';

              $transactiondata['bal_bonus_amt'] = $findnowamount->bonus;

              $transactiondata['bal_win_amt'] = $findnowamount->winning;

              $transactiondata['bal_fund_amt'] = $findnowamount->balance;

              $transactiondata['transaction_id'] = $data['transaction_id'];

              DB::connection('mysql-write')->table('transactions')->insert($transactiondata);


            if($is_contest_free_team == 1) {
            	$joined_freeteam_join_id = DB::table("joinedleauges")
            		->where("userid", $userid)
            		->where("challengeid", $challengeid)
            		->select("id")
            		->orderBy("id", "ASC")
            		->skip($findchallenge->contest_free_team-1)
            		->first();
            	DB::table("joined_freeteam")->insert([
            		'join_id' => @$joined_freeteam_join_id->id ?? 0,
            		'user_id' => $userid,
            		'challenge_id' => $challengeid
            	]);
            }




        } catch(\Illuminate\Database\QueryException $ex) {

          DB::rollback();

          $message = $ex->getCode();

          if($message==45000) {}

        }


        //end entry in transaction table//

        //entry in notification table//

        $notificationdata['userid'] = $userid;

        $notificationdata['title'] = 'Challenge entry fees Rs.'.$findentryfee;

        //DB::table('notifications')->insert($notificationdata);

        $titleget = 'Confirmation - joined challenge!';

        //Helpers::sendnotification($titleget,$notificationdata['title'],'',$userid);

      }

      $updatedata_new = array();



      if(($cur_joined+1)>=$findchallenge->maximum_user){

        //close challenge//

        //
        if($findchallenge->challenge_type == 'money') {
           $updatedata['status']='closed';
           $updatedata_new['status'] = 'closed';
        }
        if( $findchallenge->challenge_type == 'money' && $findchallenge->loops==0){

          $updatedata['status']='closed';

          $updatedata_new['status'] = 'closed';

          //new duplicate challenge//
          // $this->createNewChallenge($findchallenge->id);

        }

      }



      // $updatedata_new['joinedusers'] = $cur_joined+count($teamids);

      // DB::table('matchchallenges')->where('id',$challengeid)->update($updatedata_new);

      $upRegData['is_free_joined'] = 1;
      DB::table('registerusers')->where('id',$userid)->update($upRegData);


      $Json[0]['message'] = 'League joined';

      $Json[0]['status'] = true;

      $Json[0]['grand'] = $findchallenge->grand;

      $Json[0]['joinedusers'] = $cur_joined+count($teamids);

      if($findchallenge->is_private!="" || $findchallenge->is_private!=0){

        $Json[0]['is_private'] = true;

      }

      else{

        $Json[0]['is_private'] = false;

      }

      if($findchallenge->multi_entry!="" || $findchallenge->multi_entry!=0){

        $Json[0]['multi_entry'] = true;

      }

      else{

        $Json[0]['multi_entry'] = false;

      }

      $Json[0]['refercode'] = $data['refercode'];
      $Json[0]['isjoined'] = 1;



      return Response::json(["status"=>STATUS_SUCCESS,"message"=>$Json[0]['message'],"result"=>$Json,"new_challenge_id" => $new_challenge_id]);

        die;



      echo json_encode($Json);

      die;

   }

   public function getUniqueChallengeJoin($challengeid, $team_count, $looperr) {
        $getJoinedusers_q = DB::table('matchchallenges')
            ->where('id', $challengeid)
            ->select('id', 'joinedusers', 'maximum_user', 'real_challenge_id', 'matchkey', 'status', 'fantasy_type_id','sport_type')->first();

        $unique_challenge_join["count"] = 1;
        $unique_challenge_join["new_challenge_id"] = 0;
        $unique_challenge_join["status"] = true;
        if($getJoinedusers_q->status != 'opened') {
            $unique_challenge_join["status"] = false;
            $new_challenge_id = $this->get_new_challenge_new($getJoinedusers_q->matchkey, $getJoinedusers_q->real_challenge_id, $getJoinedusers_q->fantasy_type_id,$getJoinedusers_q->sport_type);
            if($new_challenge_id)
                $unique_challenge_join["new_challenge_id"] = $new_challenge_id;
        }
        else {

            if( $looperr > 0 && (($getJoinedusers_q->maximum_user)-($getJoinedusers_q->joinedusers+$team_count)) == 1 ) {
                $unique_challenge_join["status"] = false;
                // dd($getJoinedusers_q);
                $new_challenge_id = $this->get_new_challenge_new($getJoinedusers_q->matchkey, $getJoinedusers_q->real_challenge_id, $getJoinedusers_q->fantasy_type_id,$getJoinedusers_q->sport_type);
                if($new_challenge_id)
                    $unique_challenge_join["new_challenge_id"] = $new_challenge_id;
            }
            $unique_challenge_join["count"] = ($getJoinedusers_q->joinedusers+1);
        }

        return $unique_challenge_join;

    }

   public function UpdateUserLevel($user_id,$findchallenge)
   {

    //code for user level
     $entryfees= $findchallenge->entryfee;
     $cuser = DB::table('users_level_history')->where('user_id',$user_id)->first();
     if(empty($cuser)) {
        $users_level_historydata['user_id'] = $user_id;
        $users_level_historydata['level'] = 1;
        $users_level_historydata['cash'] = 0;
        $users_level_historydata['contest'] = 0;
        DB::table('users_level_history')->insert($users_level_historydata);
        $cuser = DB::connection('mysql-write')->table('users_level_history')->where('user_id',$user_id)->first();
     }

     if(!empty($cuser)) {
     $ucash= $cuser->cash+$entryfees;
     $cuser->cash = $cuser->cash+$entryfees;
     $ucontest= $cuser->contest+1;
     $cuser->contest = $cuser->contest+1;
     if($entryfees!=0)
     {
     DB::connection('mysql-write')->table('users_level_history')->where('user_id',$user_id)->update(["cash"=>$ucash,"contest"=>$ucontest]);
     }

      $cuserlevel=$cuser->level+1;
      $userlevel = DB::table('levels')->where('level',$cuserlevel)->first();
    //end code for user level
       //code for level
      $userlevelhistory = $cuser;
      $ulevel=$cuser->level;
          if(!empty($userlevel)) {
            if($userlevel->type == 'or')
            {
              if($userlevel->cash <= $userlevelhistory->cash || $userlevel->contest <= $userlevelhistory->contest)
              {
                $ulevel=$userlevelhistory->level+1;

                $currentlevel = DB::table('levels')->where('level',$ulevel)->first();

                if(!empty($currentlevel)){
                  if($currentlevel->reward_cash != 0 && $currentlevel->reward_cash_type){

                    $findcurrentbalance = DB::table('userbalances')->where('user_id',$user_id)->first();
                    $getbonus = $findcurrentbalance->bonus;
                    $getwinning = $findcurrentbalance->winning;
                    $getbalance = $findcurrentbalance->balance;

if($currentlevel->reward_cash_type == 'bonus'){
                      $dataupdate['bonus'] = $getbonus+$currentlevel->reward_cash;
}else if($currentlevel->reward_cash_type == 'winning'){
                      $dataupdate['winning'] = $getwinning+$currentlevel->reward_cash;
}else{
  $dataupdate['bonus'] = $getbonus;
  $dataupdate['winning'] = $getwinning;
}

$new_total_available_amt = $getbonus + $getwinning + $getbalance;
// $nowbalance = $dataupdate['bonus']+$findcurrentbalance->balance+$findcurrentbalance->winning;

$ntxnid = 'FANLINE11BONUS-'.time();
$newtransactionsdata['userid'] = $user_id;
$newtransactionsdata['type'] = 'Level up Reward Bonus';
$newtransactionsdata['transaction_id'] = $ntxnid;
$newtransactionsdata['transaction_by'] = 'Fanline11';
$newtransactionsdata['amount'] = $currentlevel->reward_cash;
$newtransactionsdata['paymentstatus'] = 'confirmed';
$newtransactionsdata['bal_fund_amt'] = $getbalance;
$newtransactionsdata['bal_win_amt'] = $getwinning;
$newtransactionsdata['bal_bonus_amt'] = $getbonus;
$newtransactionsdata['total_available_amt'] = $new_total_available_amt; //print_r($newtransactionsdata); exit;
DB::connection('mysql-write')->table('transactions')->insert($newtransactionsdata);


                      DB::connection('mysql-write')->table('userbalances')->where('user_id',$user_id)->update($dataupdate);

                  }
                }

              $ucash=0;
              $ucontest=0;

              DB::connection('mysql-write')->table('users_level_history')->where('user_id',$request->user_id)->update(["cash"=>$ucash,"contest"=>$ucontest,"level"=>$ulevel]);
              }

            }
            else if($userlevel->type == 'and')
            {
              if($userlevel->cash <= $userlevelhistory->cash && $userlevel->contest <= $userlevelhistory->contest)
              {

                $ulevel=$userlevelhistory->level+1;
              $ucash=0;
              $ucontest=0;

              $currentlevel = DB::table('levels')->where('level',$ulevel)->first();

              if(!empty($currentlevel)){
                if($currentlevel->reward_cash != 0 && $currentlevel->reward_cash_type){

                  $findcurrentbalance = DB::table('userbalances')->where('user_id',$user_id)->first();
                  $getbonus = $findcurrentbalance->bonus;
                  $getwinning = $findcurrentbalance->winning;
                  $getbalance = $findcurrentbalance->balance;

if($currentlevel->reward_cash_type == 'bonus'){
                    $dataupdate['bonus'] = $getbonus+$currentlevel->reward_cash;
}else if($currentlevel->reward_cash_type == 'winning'){
                    $dataupdate['winning'] = $getwinning+$currentlevel->reward_cash;
}else{
$dataupdate['bonus'] = $getbonus;
$dataupdate['winning'] = $getwinning;
}

$new_total_available_amt = $getbonus + $getwinning + $getbalance;
// $nowbalance = $dataupdate['bonus']+$findcurrentbalance->balance+$findcurrentbalance->winning;

$ntxnid = 'FANLINE11BONUS-'.time();
$newtransactionsdata['userid'] = $user_id;
$newtransactionsdata['type'] = 'Level up Reward Bonus';
$newtransactionsdata['transaction_id'] = $ntxnid;
$newtransactionsdata['transaction_by'] = 'Fanline11';
$newtransactionsdata['amount'] = $currentlevel->reward_cash;
$newtransactionsdata['paymentstatus'] = 'confirmed';
$newtransactionsdata['bal_fund_amt'] = $getbalance;
$newtransactionsdata['bal_win_amt'] = $getwinning;
$newtransactionsdata['bal_bonus_amt'] = $getbonus;
$newtransactionsdata['total_available_amt'] = $new_total_available_amt; //print_r($newtransactionsdata); exit;
DB::connection('mysql-write')->table('transactions')->insert($newtransactionsdata);


                    DB::connection('mysql-write')->table('userbalances')->where('user_id',$user_id)->update($dataupdate);

                }
              }

              DB::connection('mysql-write')->table('users_level_history')->where('user_id',$user_id)->update(["cash"=>$ucash,"contest"=>$ucontest,"level"=>$ulevel]);
              }
            }
          }
          //end code for level

      }
   }

  public function userinfo(Request $request){

    $this->validate($request,[

      'id' => 'required'

    ]);

    $geturl = BASE_URL;

    $getid = $request->id;

    $findlogin = RegisterUser::where('id',$getid)->first();

    $totalbalances=0;$verified=0;

    $findtotalbalanace = UserBalance::where('user_id',$findlogin->id)->first();

    if(!empty($findtotalbalanace)){

      $totalbalances = round($findtotalbalanace->balance+$findtotalbalanace->winning+$findtotalbalanace->bonus,2);

    }

    if($findlogin->mobile_verify==1 && $findlogin->mobile_verify==1 && $findlogin->pan_verify==1 && $findlogin->bank_verify==1){

      $verified=1;

    }

    if(!empty($findlogin)){

      $Json['name'] = $findlogin->username;

      if($findlogin->team==""){

        $Json['teamname'] = $findlogin->email;

      }else{

        $Json['teamname'] = $findlogin->team;

      }

      if($findlogin->image==""){

        $Json['image'] = USERS_DIRECTORY_URL.'images/defaultimage.png';

        // $Json['image'] = $geturl.'images/s_img_new.php?image='.$geturl.'images/';

      }else{

        $Json['image'] = $findlogin->image;

      }

      // if($findlogin->image==""){

        // $Json['image'] = $geturl.'images/s_img_new.php?image='.$geturl.'images/defaultimage.png&width=100&height=100&zc=1';

      // }else{

        // if (strpos($findlogin->image, $geturl) !== false) {

          // $Json['image'] = $geturl.'images/s_img_new.php?image='.$findlogin->image.'&width=100&height=100&zc=1';

        // }else{

          // $Json['image'] = $findlogin->image;

        // }

      // }

      $Json['email'] = $findlogin->email;

      $Json['mobile'] = $findlogin->mobile;

      $Json['walletamaount'] = $totalbalances;

      $Json['verified'] = $verified;

      $Json['created_at'] = date('d F Y',strtotime($findlogin->created_at));

      $findchallenge = JOinedLeague::where('userid',$getid)->count();

      $Json['totalchallenges'] = $findchallenge;

      $findwinchallenge = FinalResult::where('userid',$getid)->select(DB::raw('sum(amount) as totalwon'))->get();

      if(!empty($findwinchallenge)){

        if($findwinchallenge[0]->totalwon!=""){

          $Json['totalwon'] = $findwinchallenge[0]->totalwon;

        }else{

          $Json['totalwon'] = 0;

        }

      }else{

        $Json['totalwon'] = 0;

      }

      $JsonFinal[]=$Json;

      return Response::json(["status" => STATUS_SUCCESS,"result"=>["value"=>$JsonFinal]]);

      die;



    }

  }


  public function myjointeam(Request $request){
    // echo "ds";die;
    $this->validateLogin($request->user_id);
    $this->validate($request,[

      // 'challenge_id' => 'required',

      'matchkey' => 'required',

      'user_id' => 'required'

    ]);


    // echo "dsfds";die;
    $user_teams = '';

    $matchkey = $request->matchkey;
    $fantasy_type = (isset($request->fantasy_type) ? $request->fantasy_type : 0);
    if($fantasy_type == 4){
    $fantasy_type = 0;
  }
    $slote_id = (isset($request->slotes_id) ? $request->slotes_id : 0);

    $userid = $request->user_id;

    $sport_type = (isset($request->sport_key) ? $request->sport_key : CRICKET);
    if($sport_type === 'LIVE'){
      $sport_type = CRICKET;
    }

    // $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
    $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);

    $findmatch = ListMatch::where('listmatches.matchkey',$matchkey)->where('listmatches.sport_type',$sportType->id)->join('teams as t1','t1.id','=','listmatches.team1')
->join('teams as t2','t2.id','=','listmatches.team2')
->select('listmatches.team1','listmatches.series','listmatches.team2','t1.short_name as team1display','t2.short_name as team2display','t1.color as team1color','t2.color as team2color','listmatches.start_date')->first();
    if (isset($request->challenge_id)) {

       $challenge_id = $request->challenge_id;

    }else{

      $challenge_id = 0;

    }


    $playing11 = array();
    $getcurrentdate = $this->getDateCommon();
    $tosstime = date('Y-m-d H:i:s', strtotime('-100 minutes', strtotime($findmatch->start_date)));
    $playing11 = 0;
    // echo $getcurrentdate;
    //if($getcurrentdate>$tosstime){
    if($getcurrentdate>$tosstime){

    $find_playing_11 = DB::table('match_playing11')->where('match_key', $matchkey)->first();
    // print_r($find_playing_11); exit;
    if(empty($find_playing_11)) {
    $playing11 = array();
    } else {
    $playing11 = unserialize($find_playing_11->player_ids);
    }
    $playing11 = implode(',', $playing11);
    }



    $findjointeam = JoinTeam::where('jointeam.matchkey',$matchkey)
    ->where('jointeam.fantasy_type_id',$fantasy_type)
    ->where('jointeam.slotes_id',$slote_id)
    // ->join('matchplayers','matchplayer.matchkey','=','jointeam.matchkey')

    // ->whereRaw('FIND_IN_SET(match_players.playerid, jointeam.players)')

    // ->join('listmatches','listmatches.matchkey','=','jointeam.matchkey')
    ->join('listmatches', function($j) {
          $j->on('listmatches.matchkey','=','jointeam.matchkey')
            ->on('listmatches.sport_type','=','jointeam.sport_type');
        })

    ->join('teams as t1','t1.id','=','listmatches.team1')

    ->join('teams as t2','t2.id','=','listmatches.team2')

    // ->select(DB::raw(''))

    // ->join('matchplayers','matchplayer.playerid')

    ->where('userid',$userid)
    ->where('listmatches.sport_type',$sportType->id)
    // ->orderBy('teamnumber','ASC')

    ->select(

      // DB::raw('CASE WHEN listmatches.team2=t2.id THEN t2.id ELSE t1.id END AS team'),

      // DB::raw('CASE WHEN listmatches.team2=t2.id THEN t2.color ELSE t1.color END AS teamcolor'),

      // DB::raw('CASE WHEN listmatches.team2=t2.id THEN listmatches.team1display ELSE listmatches.team1display END AS teamcode'),

      // 't1.id as idofteam',
DB::raw('"'.$playing11.'" AS playing'),
'jointeam.id','jointeam.points','jointeam.players','jointeam.teamnumber','jointeam.matchkey','jointeam.vicecaptain','jointeam.captain','listmatches.team1display' , 'listmatches.team2display','jointeam.sport_type')->get()->sortBy('teamnumber');
      // 'jointeam.id','jointeam.players','jointeam.teamnumber','jointeam.matchkey','jointeam.vicecaptain','jointeam.captain')->get();


    $players_arr = array();
    $players = '';
    foreach ($findjointeam as $key => $value) {
      $players .= $value->players.',';
    }
    $players_arr = array_values(array_unique(array_filter(explode(',', $players))));
    // print_r($players_arr); exit;

    foreach ($findjointeam as $key => $value) {
      $findjointeam[$key]->players_arr = $players_arr;
    }

    // $c = JoinTeam::where('userid',$request->user_id)->where('sport_type',$sportType->id)->where('matchkey',$request->matchkey)->count();

      $countjoinedleagues = count(JoinedLeague::where('userid',$request->user_id)->where('sport_type',$sportType->id)->where('fantasy_type_id',$fantasy_type)->where('matchkey',$request->matchkey)->groupBy('challengeid')->get());
      // print_r($countjoinedleagues);exit;

      return Response::json(["status" => STATUS_SUCCESS,"result"=>["teams" => TeamResource::collection($findjointeam), "user_teams"=>count($findjointeam),
        "joined_leagues" => $countjoinedleagues
        // "joined_leagues" => Helpers::get_user_joined_count($request->matchkey,$request->user_id)
      ]]);

      die;




  }


  public function findIfBonus($findchallengedetails){

    $getbonus = 0;

    $getbonus = $findchallengedetails->bonus;

    return $getbonus;

    if($findchallengedetails->is_private==1 || $findchallengedetails->grand==1){

      $getbonus = 0;

    }

    else{

      if($findchallengedetails->marathon==1){

        $getbonus = 1;

      }

      else{

        if($findchallengedetails->maximum_user>=5){

          $getbonus = 1;

        }else{

          $getbonus = 0;

        }

      }

    }
    return $getbonus;

  }




  public function verifyPanRequest(Request $request){

    date_default_timezone_set('Asia/Kolkata');

    $this->validate($request,[

      'user_id' => 'required',

      'pan_name' => 'required',

      'pan_number' => 'required',

      'image' => 'required'

    ]);



    // if (!isset($request->state) || empty($request->state) || $request->state == 'Select State') {

    //   $msgg['status'] = 0;

    //   $msgg['message'] = 'please select state first.';

    //   return Response::json(["status"=>1,"message"=>"please select state first.","result"=> $msgg]); die;

    // }



    $id = $request->user_id;

    $data['userid'] = $request->user_id;

    $data['pan_name'] = strtoupper($request->pan_name);

    $data['pan_dob'] = date('Y-m-d',strtotime($request->pan_dob));

    $data['pan_number'] = strtoupper($request->pan_number);

    $data['status'] = 0;

    $data['comment'] = "";

    $findplannumber = PanCard::where('pan_number',$request->pan_number)->where('userid','!=',$id)->where('status','!=',2)->first();

    // print_r($findplannumber);die;

    if(!empty($findplannumber)){

      $msgg['status'] = 0;

      $msgg['message'] = 'This PAN CARD Number Is already Verified with Another Account.';

      return Response::json(["status"=>1,"message"=>"This PAN CARD Number Is already Verified with Another Account.","result"=>$msgg]); die;

    }



    if(!empty($findplannumber)){

      if ($findplannumber->status == -1 || $findplannumber->status != 2) {

        $msgg['status'] = 0;

      $msgg['message'] = 'This PAN CARD Number Is already Verified.';

      return Response::json(["status"=>1,"message"=>"This PAN CARD Number Is already Verified.","result"=>$msgg]); die;

      }

    }



    $state = $request->state;

    $findlastow = RegisterUser::where('id',$id)->first();

    $rand=rand(10000,1000000);

    $nm='pan-card';

    if(!empty($findlastow)){

      $nm = $findlastow->username;

    }

    $nm.=$rand;

    $data['image'] = $request->image;

    $req['pan_verify'] = '0';

    if(@$state) {

      $req['state'] = @$state ? $state : '';

    }

    DB::table('registerusers')->where('id',$data['userid'])->update($req);



    $findexist = PanCard::where('userid',$id)->first();

    if(!empty($findexist)){

    $pan_user = PanCard::where('id',$findexist->id)->first();

    $pan_user->userid = $request->user_id;

    $pan_user->pan_name = $request->pan_name;

    $pan_user->pan_dob = date('Y-m-d',strtotime($request->pan_dob));

    $pan_user->image = $request->image;

    $pan_user->pan_number = $request->pan_number;

    $pan_user->status = 0;

    $pan_user->save();



     if (!empty($findlastow)) {

       $findlastow->pan_verify = 0;

       $findlastow->save();

     }

    }else{

      PanCard::create([

        'userid' => $request->user_id,

        'pan_name' => $request->pan_name,

        'pan_dob' => date('Y-m-d',strtotime($request->pan_dob)),

        'pan_number' => $request->pan_number,

        'status' => 0,

        'image' => $request->image,

      ]);

      if (!empty($findlastow)) {

       $findlastow->pan_verify = 0;

       $findlastow->save();

     }

    }

    $email = $findlastow->email;

    $emailsubject = 'PAN Card Verification request submitted!';

    $content='<p><strong>Hello </strong></p>';

    $content.='<p>Your PAN card verification detail has been submitted successfully. Please wait for our approval.</p>';

    $msg = Helpers::mailheader();

    $msg.= Helpers::mailbody($content);

    $msg.= Helpers::mailfooter();

    Helpers::mailsentFormat($email,$emailsubject,$msg);

    $msgg['status'] = 1;

    $msgg['message'] = 'Pan request submitted and it will approve in 24 hours.';

    return Response::json(["status"=>1,"message"=>"Submitted.","result"=>$msgg]);

    die;

  }



  public function uploadPanImageAndroid(Request $request){

    $this->validate($request,[

      'user_id' => 'required',

      'file' => 'required'

    ]);

    $userid = $request->user_id;

    $geturl = SERVER_BASE;

    $nm="";

    $rand=rand(10000,1000000);

      $nm.=$rand.time();

    $destinationPath = 'uploads';

    $dir=UPLOAD_DIRECTORY;

    $max_file_size = 21*100;

    // $image_size = getimagesize($_POST['file']);

    // if($image_size > $max_file_size) {

    //  $Json['status']=2;

    //  $JsonFinal[]=$Json;

   //        echo json_encode($JsonFinal);die;

    // }

   $valid_formats = array("jpg","jpeg","png", "gif", "zip", "bmp","JPG","pdf");



    $findifimage = PanCard::where('userid',$userid)->first();

      //  echo '<pre>'; print_r($findifimage); die;

      $imageName = 'Fanline11-pancard-'.rand(1000,9999).''.time();

        $imsrc = base64_decode($request->file);

        //file_put_contents('./uploads/'.$imageName, $imsrc);

        $data['image'] = USERS_DIRECTORY.$imageName;

        if(!empty($findifimage)){

            if($findifimage->image!=""){

                $getimageonly = explode(USERS_DIRECTORY,$findifimage->image);

                    if(isset($getimageonly[1])){

                        $destinationPath.'/'.$getimageonly[1];

                        File::delete(($destinationPath.'/'.$getimageonly[1]));

                    }

            }

        }



    $fileName = $imageName;

    $filePath = UPLOAD_DIRECTORY;

    $uploadPath = UPLOAD_DIRECTORY.$imageName;

    // Helpers::awsImageUpload($fileName,$filePath,$uploadPath);

    $data['image'] = UPLOAD_DIRECTORY.$imageName;

    $Json['status']=1;

    $Json['image']=$data['image'];

    $JsonFinal[]=$Json;

    return Response::json(["status" => STATUS_SUCCESS,"result"=>$JsonFinal]); die;

  }



  public function uploadBankImageAndroid(Request $request){
    $this->validate($request,[

      'file' => 'required|file',

      'user_id' => 'required'

    ]);

    $nm="";

    $rand=rand(10000,1000000);

      $nm.=$rand.time();

    $file[] = $_FILES['file'];

    $max_file_size = 21020*100;

   $valid_formats = array("jpg","jpeg","png", "gif", "zip", "bmp","JPG","pdf");

    $file_size = $_FILES['file']['size'];

    $file_type = $_FILES['file']['type'];

    if($_FILES['file']['size'] > $max_file_size) {

      $Json['status']=2;

      $JsonFinal[]=$Json;

          return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]);

          die;

      }

    if(!in_array(pathinfo($_FILES['file']['name'],PATHINFO_EXTENSION), $valid_formats)) {

      $Json['status']=3;

      $JsonFinal[]=$Json;

      return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]);

          die;

      }



    foreach($file as $image){

      //  $findifimage = DB::table('pancard')->where('userid',$userid)->first();



      //  $imageName = 'FANLINE11-pancard-'.rand(1000,9999).''.time();

    //         $imsrc = base64_decode($request->get('imagefile'));

    //         file_put_contents('./uploads/'.$imageName, $imsrc);

    //         $data['image'] = $geturl.'uploads/'.$imageName;

    //         if($findifimage->image!=""){

    //             $getimageonly = explode("uploads/",$findifimage->image);

    //                 if(isset($getimageonly[1])){

    //                     $destinationPath.'/'.$getimageonly[1];

    //                     File::delete(($destinationPath.'/'.$getimageonly[1]));

    //                 }

    //         }





      $imageName='Fanline11-bank-'.$nm.'.'.pathinfo($_FILES['file']['name'],PATHINFO_EXTENSION);

      $tmpName = $image['tmp_name'];

      $array[]=$imageName;

      move_uploaded_file($image['tmp_name'], USERS_DIRECTORY.$imageName);

      Helpers::aws_upload_image(USERS_DIRECTORY.$imageName, "uploads/users/",$imageName);
      // unlink(USERS_DIRECTORY.$imageName);

      $resi = 'uploads/'.$imageName;

      $file_ext = pathinfo($imageName, PATHINFO_EXTENSION);

      if($file_ext!='pdf'){

        // Helpers::resize_image($resi);

        // Helpers::compress_image($resi,80);

      }

      $data['image'] = "https://fanline11.rglabs.net/uploads/users/".$imageName;

      $Json['status']=1;

      $Json['image']=$data['image'];

      $JsonFinal[]=$Json;

      return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]); die;

    }

    $Json['image']='';

    $Json['status']=0;

    $JsonFinal[]=$Json;

    return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]); die;

  }


  // hk

    public function uploadAdharImage(Request $request) {

      $this->validate($request,[

        'file' => 'required'

      ]);

      $nm="";

      $rand=rand(10000,1000000);

      $nm.=$rand.time();

      $file[] = $_FILES['file'];

      $max_file_size = 41020*100;

      $valid_formats = array("jpg","jpeg","png", "gif", "zip", "bmp","JPG","pdf");

      $file_size = $_FILES['file']['size'];

      $file_type = $_FILES['file']['type'];

      if($_FILES['file']['size'] > $max_file_size) {

        $Json['status']=2;

        $JsonFinal[]=$Json;

        return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]);

        die;

      }

      if(!in_array(pathinfo($_FILES['file']['name'],PATHINFO_EXTENSION), $valid_formats)) {

        $Json['status']=3;

        $JsonFinal[]=$Json;

        return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]);

        die;

      }



      foreach($file as $image){

        $imageName='Fanline11-adharcardfront-'.$nm.'.'.pathinfo($_FILES['file']['name'],PATHINFO_EXTENSION);

        $tmpName = $image['tmp_name'];

        $array[]=$imageName;

        move_uploaded_file($image['tmp_name'],USERS_DIRECTORY.$imageName);

        Helpers::aws_upload_image(USERS_DIRECTORY.$imageName, "uploads/users/",$imageName);
        unlink(USERS_DIRECTORY.$imageName);

        $resi = 'uploads/'.$imageName;

        // dd($resi);

        $file_ext = pathinfo($imageName, PATHINFO_EXTENSION);

        if($file_ext!='pdf'){

          // Helpers::resize_image($resi);

          // Helpers::compress_image($resi,80);

        }

          $data['image'] = CDN_URL2."uploads/users/".$imageName;

        $Json['status']=1;

        $Json['image']=$data['image'];

        $JsonFinal[]=$Json;

        return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]); die;

      }

      $Json['image']='';

      $Json['status']=0;

      $JsonFinal[]=$Json;

      return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]); die;



    }

    public function uploadBackAdharImage(Request $request) {

      $this->validate($request,[

        'file' => 'required'

      ]);

      $nm="";

      $rand=rand(10000,1000000);

      $nm.=$rand.time();

      $file[] = $_FILES['file'];

      $max_file_size = 41020*100;

      $valid_formats = array("jpg","jpeg","png", "gif", "zip", "bmp","JPG","pdf");

      $file_size = $_FILES['file']['size'];

      $file_type = $_FILES['file']['type'];

      if($_FILES['file']['size'] > $max_file_size) {

        $Json['status']=2;

        $JsonFinal[]=$Json;

        return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]);

        die;

      }

      if(!in_array(pathinfo($_FILES['file']['name'],PATHINFO_EXTENSION), $valid_formats)) {

        $Json['status']=3;

        $JsonFinal[]=$Json;

        return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]);

        die;

      }



      foreach($file as $image){

        $imageName='Fanline11-adharcardback-'.$nm.'.'.pathinfo($_FILES['file']['name'],PATHINFO_EXTENSION);

        $tmpName = $image['tmp_name'];

        $array[]=$imageName;
        move_uploaded_file($image['tmp_name'],USERS_DIRECTORY.$imageName);

        Helpers::aws_upload_image(USERS_DIRECTORY.$imageName, "uploads/users/",$imageName);
        unlink(USERS_DIRECTORY.$imageName);

        $resi = 'uploads/'.$imageName;

        $file_ext = pathinfo($imageName, PATHINFO_EXTENSION);

        if($file_ext!='pdf'){

          // Helpers::resize_image($resi);

          // Helpers::compress_image($resi,80);

        }

        $data['image'] = CDN_URL2."uploads/users/".$imageName;

        $Json['status']=1;

        $Json['image']=$data['image'];

        $JsonFinal[]=$Json;

        return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]); die;

      }

      $Json['image']='';

      $Json['status']=0;

      $JsonFinal[]=$Json;

      return Response::json(["status"=>1,"message"=>"Success","result"=>$JsonFinal]); die;



    }

    public function verifyAdharRequest(Request $request){
    // return "d";
// return $request->all();
    date_default_timezone_set('Asia/Kolkata');

    $this->validate($request,[

      'user_id' => 'required',

      'front_image' => 'required',

      'back_image' => 'required',

      'adhar_number' => 'required'

    ]);



    // if (!isset($request->state) || empty($request->state) || $request->state == 'Select State') {

    //   $msgg['status'] = 0;

    //   $msgg['message'] = 'please select state first.';

    //   return Response::json(["status"=>1,"message"=>"please select state first.","result"=> $msgg]); die;

    // }



    $id = $request->user_id;

    $data['userid'] = $request->user_id;

    $data['adhar_number'] = strtoupper($request->adhar_number);

    // $data['pan_dob'] = date('Y-m-d',strtotime($request->pan_dob));

    // $data['pan_number'] = strtoupper($request->pan_number);

    $data['status'] = 0;

    $data['comment'] = "";

    $findplannumber = AdharCard::where('adhar_number',$request->adhar_number)->where('userid','!=',$id)->where('status','!=',2)->first();

    // print_r($findplannumber);die;

    if(!empty($findplannumber)){

      $msgg['status'] = 0;

      $msgg['message'] = 'This Aadhaar CARD Number Is already Verified with Another Account.';

      return Response::json(["status"=>1,"message"=>"This Aadhaar CARD Number Is already Verified with Another Account.","result"=>$msgg]); die;

    }



    if(!empty($findplannumber)){
      // return "dd";

      if ($findplannumber->status == -1 || $findplannumber->status != 2) {

        $msgg['status'] = 0;

        $msgg['message'] = 'This Aadhaar CARD Number Is already Verified.';

        return Response::json(["status"=>1,"message"=>"This Aadhaar CARD Number Is already Verified.","result"=>$msgg]); die;

      }

    }
    // return "ddddd";



    // $state = $request->state;

    $findlastow = RegisterUser::where('id',$id)->first();

    $rand=rand(10000,1000000);

    $nm='adhar-card';

    if(!empty($findlastow)){

      $nm = $findlastow->username;

    }

    $nm.=$rand;

    $data['front_image'] = $request->front_image;
    $data['back_image'] = $request->back_image;


    if(!empty($request->virtual_adhar_id)){
      $data['virtual_adhar_id	'] = $request->virtual_adhar_id;
    }else{
      $data['virtual_adhar_id	'] = "NULL";
    }



    $req['adhar_verify'] = '0';

    // if(@$state) {
    //
    //   $req['state'] = @$state ? $state : '';
    //
    // }

    DB::table('registerusers')->where('id',$data['userid'])->update($req);



    $findexist = AdharCard::where('userid',$id)->first();

    if(!empty($findexist)){

      $pan_user = AdharCard::where('id',$findexist->id)->first();

      $pan_user->userid = $request->user_id;

      // $pan_user->pan_name = $request->pan_name;

      // $pan_user->pan_dob = date('Y-m-d',strtotime($request->pan_dob));

      $pan_user->front_image = $request->front_image;
      $pan_user->back_image = $request->back_image;

      if(!empty($request->virtual_adhar_id)){
        $pan_user->virtual_adhar_id	 = $request->virtual_adhar_id;
      }else{
        $pan_user->virtual_adhar_id	 = "NULL";
      }



      $pan_user->adhar_number = $request->adhar_number;

      $pan_user->status = 0;

      $pan_user->save();



      if (!empty($findlastow)) {

        $findlastow->adhar_verify = 0;

        $findlastow->save();

      }


    }else{
      AdharCard::create([

        'userid' => $request->user_id,

        // 'pan_name' => $request->pan_name,
        //
        // 'pan_dob' => date('Y-m-d',strtotime($request->pan_dob)),

        'adhar_number' => $request->adhar_number,

        'status' => 0,

        'front_image' => $request->front_image,
        'back_image' => $request->back_image,
        'virtual_adhar_id' => $request->virtual_adhar_id,

      ]);

      if (!empty($findlastow)) {

        $findlastow->adhar_verify = 0;

        $findlastow->save();

      }

    }

    $email = $findlastow->email;

    $emailsubject = 'Aadhaar Card Verification request submitted!';

    $content='<p><strong>Hello </strong></p>';

    $content.='<p>Your Aadhaar card verification detail has been submitted successfully. Please wait for our approval.</p>';

    $msg = Helpers::mailheader();

    $msg.= Helpers::mailbody($content);

    $msg.= Helpers::mailfooter();

    Helpers::mailsentFormat($email,$emailsubject,$msg);

    $msgg['status'] = 1;

    $msgg['message'] = 'Aadhaar request submitted and it will approve in 24 hours.';

    return Response::json(["status"=>1,"message"=>"Submitted.","result"=>$msgg]);

    die;

  }







  public function getChallengesByCategory(Request $request){
    // $user = auth()->user();
    // $app_off = Redis::hGet('app_setting','slow_app');
    // if(@$app_off==1) {
    //     exit;
    // }

$this->validateLogin($request->user_id);
  $this->validate($request,[

    'user_id' => 'required',

    'matchkey' => 'required'

  ]);

    $entryfee = isset($request->entryfee) ? $request->entryfee : 0;

    $winning = isset($request->winning) ? $request->winning : 0;

    $contest_type = isset($request->contest_type) ? $request->contest_type : 0;

    $contest_size = isset($request->contest_size) ? $request->contest_size : 0;

    $is_champion = isset($request->is_champion) ? $request->is_champion : 0;


    $sport_type = (isset($request->sport_key) ? $request->sport_key : CRICKET);
    // $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
    if($sport_type === 'LIVE'){
      $sport_type = CRICKET;
    }
    $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);

    $fantasy_type=isset($request->fantasy_type) ? $request->fantasy_type : 0;
    if($fantasy_type == 4){
  $fantasy_type = 0;
}
    $slotes_id = 0;
        if(!empty($fantasy_type) && $fantasy_type==1){
          $slotes_id=isset($request->slotes_id) ? $request->slotes_id : 0;
        }

    $url = BASE_URL;

    $matchkey="";

    if($request->get('matchkey')){

      $matchkey = $request->get('matchkey');

    }
    // $matchDetails = DB::table('listmatches')->where('matchkey',$matchkey)->first();

    $user_id = $request->user_id;

    $joinedleauges=DB::table('joinedleauges')->where('joinedleauges.matchkey',$matchkey)
    ->join('matchchallenges' , 'matchchallenges.id' , '=' , 'joinedleauges.challengeid')
    ->where('joinedleauges.userid',$user_id)
    ->where('joinedleauges.fantasy_type_id',$fantasy_type)
    ->where('joinedleauges.slotes_id',$slotes_id)
    ->where('joinedleauges.sport_type',$sportType->id)->select('joinedleauges.challengeid','joinedleauges.refercode','matchchallenges.challenge_category_id','matchchallenges.is_champion')
    ->groupBy('joinedleauges.challengeid')->get();

    $challenge_arr = array();
    $refercodes = array();
    $headToheadContestArr = array();

    $headToheadCategoryArr = [9 , 28 , 59 , 11];

    foreach ($joinedleauges as $key => $value) {

      $challenge_arr[] = $value->challengeid;
      if(in_array($value->challenge_category_id , $headToheadCategoryArr)){

        $headToheadContestArr[] = $value->challengeid;
      }
      $refercodes[$value->challengeid] = $value->refercode;
    }

    /*if(Cache::has('challenge_categories')){

      $return_data['categories'] = Cache::get('challenge_categories');

    } else {

      $return_data['categories'] = Cache::remember('challenge_categories',0, function() use ($matchkey, $sportType){

        $query_data = ChallengeCategory::where('status',1)->orderBY('sort_order','ASC')->get();
        return $query_data;

      });

    }*/
    Cache::forget('challenge_categories');
    $return_data['categories'] = Cache::remember('challenge_categories',15, function() use ($matchkey, $sportType){

        $query_data = ChallengeCategory::where('status',1)->get()->sortBy('sort_order');
        return $query_data;

      });

    // $return_data['categories'] = ChallengeCategory::where('status',1)->get()->sortBy('sort_order');

    $categories = array();

    foreach ($return_data['categories'] as $key => $value) {

$return_data['categories'][$key]->is_view_more = 1;
      $categories[] = $value->id;


    }


    // print_r($categories);die;
    /* Get Challenges */

$query = DB::table('matchchallenges');
    if(!empty($fantasy_type)){
          if($fantasy_type==1){
            $query->where('matchchallenges.matchkey',$matchkey)
              ->where('status',OPENED)
              ->where('sport_type',$sportType->id)
              ->where('fantasy_type_id',$fantasy_type)
              ->where('slotes_id',$slotes_id);
              // ->whereRaw('((SELECT COUNT(id) FROM joinedleauges WHERE challengeid = matchchallenges.id AND userid = "'.$user_id.'") = 0 OR matchchallenges.multi_entry = 1)');
            // $query->where('created_by','<','1');
          }else{
            $query->where('matchchallenges.matchkey',$matchkey)
              ->where('status',OPENED)
              ->where('sport_type',$sportType->id)
              ->where('fantasy_type_id',$fantasy_type);
              // ->whereRaw('((SELECT COUNT(id) FROM joinedleauges WHERE challengeid = matchchallenges.id AND userid = "'.$user_id.'") = 0 OR matchchallenges.multi_entry = 1)');
            // $query->where('created_by','<','1');

          }
      }else{
          $query->where('matchchallenges.matchkey',$matchkey)
            ->where('status',OPENED)
            ->where('sport_type',$sportType->id)
            ->where('fantasy_type_id',$fantasy_type);
            // ->where('slotes_id',$slotes_id);
            // ->whereRaw('((SELECT COUNT(id) FROM joinedleauges WHERE challengeid = matchchallenges.id AND userid = "'.$user_id.'") = 0 OR matchchallenges.multi_entry = 1)');
          // $query->where('created_by','<','1');
        // $query->where('grand','!=','1');
        // $query->where('marathon','!=','1');
        // $query->where('is_private',0);

      }

      // $userDb = DB::table('registerusers')->where('id' , $user_id)->select('is_free_joined')->first();
      // if($userDb->is_free_joined == 1){
        // $query = $query->where('is_first_time_free', 0);
      // }


        /*$query = DB::table('matchchallenges');

    $query->where('status',OPENED)
    ->where('matchchallenges.matchkey',$matchkey)
        ->where('sport_type',$sportType->id);*/

        $query->select(DB::raw('MAX(matchpricecards.max_position) as winners, MAX(matchpricecards.price) as first_rank_prize'),'matchchallenges.id','matchchallenges.is_champion','matchchallenges.champion_team_userid','matchchallenges.champion_team_id','matchchallenges.name','matchchallenges.challenge_id','matchchallenges.real_challenge_id','matchchallenges.challenge_type','winning_percentage','matchchallenges.entryfee','matchchallenges.win_amount','matchchallenges.maximum_user','matchchallenges.matchkey','matchchallenges.joinedusers','matchchallenges.multi_entry','confirmed_challenge','is_giveaway','dis_price','bonus','bonus_precent','max_team_limit','is_first_time_free','first_time_free_amount','giveaway_text','giveaway_color','is_flexible','challenge_category_id','matchchallenges.is_offer_team' ,'matchchallenges.contest_free_team', DB::raw('"1" as is_selected'), 'matchchallenges.percetage_type' , 'matchchallenges.champion_image','matchchallenges.is_gadget','matchchallenges.gadget_image');
        $query->leftJoin('matchpricecards','matchchallenges.id','=','matchpricecards.challenge_id');

        if(!empty($headToheadContestArr)) {
            // $headToheadContestArr = implode(',', $headToheadContestArr);
            // $query->havingRaw('matchchallenges.id NOT IN ('.$headToheadContestArr.')');
            // $query->whereNotIn('matchchallenges.id', $challenge_arr2);
        }

        $allchallenges = $query
        // ->groupBy('matchchallenges.id')
        // ->whereNotIn('matchchallenges.id' , $headToheadContestArr)
        ->groupBy('matchchallenges.id')
        // ->orderBY('joinedusers','DESC')
        // ->orderBY('sort_order','ASC')
        // ->orderBY('entryfee','DESC')
        ->get()
        ->unique('real_challenge_id')
        ->sortByDesc('joinedusers')
        ->sortBy('sort_order')
        ->sortByDesc('entryfee');
        // ->whereNotIn('matchchallenges.id', $headToheadContestArr);
        // exit;

    $Json = array();

    $i = 0;
    //Find User join contest
    $user_fav_contests_id = array();
    $user_fav_contests = DB::table('user_favourite_contest')->where('user_id', $user_id)->get();
    foreach ($user_fav_contests as $key => $value) {
        $user_fav_contests_id[] = $value->challenge_id;
    }
    // print_r($allchallenges);
    // die;
//var_dump($allchallenges);exit;
    foreach($allchallenges as $challenege) {

    //  if( $challenege->is_champion == 1 && $challenege->champion_team_id>0)      {

        $Json[$i]['id'] = $challenege->id;

        if($challenege->name==""){

          if($challenege->win_amount==0){

            $Json[$i]['name']  = 'Net practice';

          }else{

           $Json[$i]['name']  = 'Win Rs.'.$challenege->win_amount;
            // $Json[$i]['name']  = 'Win Rs.'.$winamount;

          }

        }else{

          $Json[$i]['name'] = ucwords($challenege->name);

        }

        $Json[$i]['is_selected'] = in_array($challenege->real_challenge_id, $user_fav_contests_id) ? 1 : 0;
        $Json[$i]['entryfee'] = round($challenege->entryfee);
        // $Json[$i]['announcement'] = !empty($matchDetails->announcement) ? $matchDetails->announcement : '';
        $Json[$i]['announcement'] = '';


        // $Json[$i]['win_amount'] = $winamount;
       $Json[$i]['win_amount'] = (string)$challenege->win_amount;

        $Json[$i]['is_champion'] = $challenege->is_champion;
        //$Json[$i]['is_champion'] =(int) $challenege->is_champion == 1 ?  ((int) $challenege->champion_team_id > 0 ? $challenege->is_champion:0): 0;
        // $Json[$i]['champion_player'] = PLAYERS_DIRECTORY_URL.'FANLINE11-player-7243.png';
        $Json[$i]['champion_player'] = !empty($challenege->champion_image)  ? BANNER_DIRECTORY_URL.$challenege->champion_image : "https://fanline11-admin.rglabs.net/uploads/categories/category-image-3233.png";

        $Json[$i]['champion_x'] = 'x2';

        if($challenege->challenge_type!='money') {
          if($challenege->joinedusers>1){
              $Json[$i]['win_amount'] = (int)(($challenege->win_amount*$challenege->joinedusers) * $challenege->winning_percentage)/100;
          }
        }

        if($challenege->challenge_type == 'percentage' && $challenege->percetage_type == 2) {
          if($challenege->joinedusers > $challenege->minimum_user) {
            $joinedMoney = $challenege->entryfee*$challenege->joinedusers;
            $Json[$i]['win_amount'] = floor($joinedMoney*80/100);
          }
        }

        // $Json[$i]['is_amount_show'] = 1;
        $Json[$i]['is_giveaway_text'] = $challenege->giveaway_text;
        $Json[$i]['is_giveaway_visible_text'] = $challenege->is_giveaway;
        $Json[$i]['giveaway_color'] = (!isset($challenege->giveaway_color) && empty($challenege->giveaway_color)) ? '' : $challenege->giveaway_color;

        $Json[$i]['maximum_user'] = $challenege->maximum_user;
        $Json[$i]['is_first_time_free'] = $challenege->is_first_time_free;
        $Json[$i]['first_time_free_amount'] = $challenege->first_time_free_amount;

        $Json[$i]['challenge_type'] = $challenege->challenge_type;

        $Json[$i]['winning_percentage'] = $challenege->winning_percentage;

        $Json[$i]['matchkey'] = $challenege->matchkey;

        $Json[$i]['is_free'] = $challenege->is_giveaway;

        $Json[$i]['dis_price'] = (string) $challenege->dis_price;

        $Json[$i]['status'] = 1;

        // $Json[$i]['first_rank_prize'] = Helpers::rankOneAmount($challenege->id,$challenege->matchkey);
        $Json[$i]['first_rank_prize']  = !empty($challenege->first_rank_prize) ? $challenege->first_rank_prize : 0;
        $Json[$i]['max_team_limit']  = $challenege->max_team_limit;
        $Json[$i]['is_flexible']  = $challenege->is_flexible;



        $Json[$i]['joinedusers'] = $challenege->joinedusers;

        $Json[$i]['bonus_percent'] = $challenege->bonus_precent."%";

        // $Json[$i]['multi_entry'] = $challenege->multi_entry;
        $Json[$i]['multi_entry'] = !empty($challenege->multi_entry) ? $challenege->multi_entry : 1;
        $Json[$i]['max_multi_entry_user'] = $challenege->max_team_limit;

        $Json[$i]['confirmed_challenge'] = $challenege->confirmed_challenge;

        // $Json[$i]['win_amount'] = '5 Lac';

        if ($Json[$i]['win_amount'] > 99999){
          $nums = $Json[$i]['win_amount'] / 100000;
          $Json[$i]['win_amount'] = '₹ '.$nums.' Lakh';
        }else{
            $Json[$i]['win_amount']= '₹ '.(string)$Json[$i]['win_amount'];
        }

        if ($challenege->maximum_user == 0) {

          $joinper = 0;

        } else {

          $joinper = ($challenege->joinedusers/$challenege->maximum_user)*100;

        }

        $Json[$i]['getjoinedpercentage'] = number_format($joinper,0);



        $Json[$i]['is_running'] = 1;

        $Json[$i]['is_bonus'] = $this->findIfBonus($challenege);

        //for fav contest display in categories api
        $Json[$i]['is_fav_contest']=in_array($challenege->real_challenge_id, $user_fav_contests_id) ? 1 : 0;
        // $Json[$i]['is_fav_contest']=0;
        $Json[$i]['is_fav_visible']=1;
        $Json[$i]['real_challenge_id']=$challenege->real_challenge_id;

        //end for fav contest display in categories api

        // $Json[$i]['bonus_precent'] = $challenege->bonus_precent;

        $Json[$i]['isselected'] = false;

        $Json[$i]['isselectedid'] = "";

        $Json[$i]['challenge_category_id'] = $challenege->challenge_category_id;

        //$joinedleauges=DB::table('joinedleauges')->where('challengeid',$challenege->id)->where('userid',$user_id)->get();

        if(!empty($challenge_arr)){

          $counted_val = array_count_values($challenge_arr);

          if($challenege->multi_entry==1 && isset($counted_val[$challenege->id])){



            $Json[$i]['isselected'] = false;
            $Json[$i]['isjoined'] = true;

            // $refercode = JoinedLeague::where('userid', $user_id)->where('challengeid', $challenege->id)->first();
            $refercode = @$refercodes[$challenege->id];

            if(!empty($refercode)) {

              $Json[$i]['refercode'] = $refercode;

            } else {

              $Json[$i]['refercode'] = "";

            }

          }
          else if($challenege->multi_entry==0 && isset($counted_val[$challenege->id])) {
            // $refercode = JoinedLeague::where('userid', $user_id)->where('challengeid', $challenege->id)->first();
            $refercode = @$refercodes[$challenege->id];
            $Json[$i]['isselected'] = true;
            $Json[$i]['isjoined'] = true;

            $Json[$i]['refercode'] = $refercode;
          }
          else{

            $Json[$i]['isselected'] = false;

            $Json[$i]['refercode'] = "";

          }

        }else{



        }

        $winners=0;

        if($challenege->challenge_type == 'money'){

          //$winners=DB::table('matchpricecards')->where('matchkey',$challenege->matchkey)->where('challenge_id',$challenege->id)->sum('winners');

          $Json[$i]['totalwinners'] = $challenege->winners ? $challenege->winners : "0";

        }else{

          $Json[$i]['price_card'] = array();

        }

        $Json[$i]['is_offer_team'] = $challenege->is_offer_team;
      // $Json[$i]['is_gadget'] = rand(0,1);
        // $Json[$i]['gadget_image'] = "https://admin.vision11.org/uploads/categories/category-image-7018.png";
        $Json[$i]['is_gadget'] = $challenege->is_gadget;
        //$Json[$i]['gadget_image'] = "https://fanline11-admin.rglabs.net/uploads/banners/Fanline11-match-challange3707.png";
        //$Json[$i]['gadget_image'] = (int) @$challenege->is_gadget == 1 ? "https://fanline11-admin.rglabs.net/uploads/banners/".@$challenege->gadget_image : '';
        $Json[$i]['gadget_image'] = (int) @$challenege->is_gadget == 1 ? "https://fanline11-admin.rglabs.net/uploads/banners/".@$challenege->gadget_image : '';



        $i++;
        //}

      }

// var_dump($allchallenges);exit;



$fav_contest_arr = array();
    $data = array();

    foreach ($Json as $challenge) {
if($challenge['is_selected'] == 0){
      $data[$challenge['challenge_category_id']][] = $challenge;
}else{
  array_push($fav_contest_arr, $challenge);
}
    }

// print_r($fav_contest_arr);exit;

      // print_r($return_data['categories']);exit;
  // var_dump($return_data['categories']);exit;


  // var_dump($return_data['categories']);
  // exit;
    foreach ($return_data['categories'] as $key2 => $value2) {
      // print_r($value2->id);



      $leagues = @$data[$value2->id] ? $data[$value2->id] : array();
      $return_data['categories'][$key2]->is_view_more = count($leagues) > 3 ? 1 : 0;
      // if($value2->id == 1000){
        // var_dump($data);exit;
      // }
      // print_r($leagues);exit;

      if(empty($leagues)) {

        unset($return_data['categories'][$key2]);

      } else {

        // var_dump($return_data['categories'][$key2]);exit;

        $return_data['categories'][$key2]->leagues = array_slice($leagues,0,3);



        $return_data['categories'][$key2]->total_category_leagues = count($leagues) - count($return_data['categories'][$key2]->leagues);



        $return_data['categories'][$key2]->contest_image_url = UPLOAD_DIRECTORY_URL.'categories/'.$value2->contest_type_image;

      }

    }

    /* Get Challenges */

// var_dump($return_data['categories']);exit;


    if(!empty($fav_contest_arr)){

    $fav_obj = array();
    $fav_obj['id']  = 1010101010;
    $fav_obj['name'] = 'Favourite Contest !';
    $fav_obj['sport_type'] = $sportType->id;
    $fav_obj['contest_sub_text'] = 'Users Fav Contest';
    $fav_obj['contest_image_url'] = 'https://vision11.sgp1.cdn.digitaloceanspaces.com/uploads/default-players/Favorite-icon.png';
    $fav_obj['sort_order'] = 0;
    $fav_obj['status'] = 1;
    $fav_obj['leagues'] = $fav_contest_arr;
  // foreach ($fav_contest_arr as $key => $value_arr) {
  //   print_r($value_arr);exit;
  // }
    // array_push($fav_obj->leagues , $fav_contest_arr);
    $data[0][] = $fav_contest_arr;

    $return_data['categories']->prepend($fav_obj);

  }
$teamid = 0;
  $return_data['categories'] = array_values(json_decode(json_encode($return_data['categories']), true));
    // $return_data['user_teams'] = JoinTeam::where('userid',$request->user_id)->where('fantasy_type_id',$fantasy_type)
    // ->where('slotes_id',$slotes_id)
    // ->where('sport_type',$sportType->id)->where('matchkey',$request->matchkey)->count();

    $return_data['user_teams'] = Helpers::get_user_team_count($matchkey,$fantasy_type,$user_id);


    if($return_data['user_teams'] == 1){
          $teamid_db = JoinTeam::where('userid',$request->user_id)->where('fantasy_type_id',$fantasy_type)->where('sport_type',$sportType->id)->where('matchkey',$request->matchkey)->first();
          $teamid = $teamid_db->id;
        }
        $return_data['team_id'] = $teamid;


    // $return_data['joined_leagues'] = JoinedLeague::where('userid',$request->user_id)->where('matchkey',$request->matchkey)->where('sport_type',$sportType->id)->groupBy('challengeid')->count();
    $return_data['joined_leagues'] = count($joinedleauges);

    $return_data['total_contest'] = count($allchallenges);

// var_dump($return_data);exit;

    return Response::json(["status" => STATUS_SUCCESS, "result" => $return_data]);

    }



  public function getChallengesNew(Request $request){
     // print_r($request->all()); exit;
    // $app_off = Redis::hGet('app_setting','slow_app');
    // if(@$app_off==1) {
    //     exit;
    // }
    $this->validateLogin($request->user_id);
    $this->validate($request,[

      'user_id' => 'required',

      'matchkey' => 'required',

    ]);

    $entryfee =  $request->entryfee ? $request->entryfee : 0;

    $winning =  $request->winning ? $request->winning : 0;

    $contest_type =  $request->contest_type ? $request->contest_type : 0;

    $contest_size =  $request->contest_size ? $request->contest_size : 0;

    $sport_type = (isset($request->sport_key) ? $request->sport_key : 'cricket');
    // $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
    $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);
    //Filter End

    $fantasy_type=isset($request->fantasy_type) ? $request->fantasy_type : 0;
    if($fantasy_type == 4){
      $fantasy_type = 0;
    }
        if(!empty($fantasy_type) && $fantasy_type==1){
          $slotes_id=isset($request->slotes_id) ? $request->slotes_id : 0;
        }

    //$geturl = BASE_URL;

    $matchkey="";

    if($request->matchkey){

      $matchkey = $request->matchkey;

    }

    $user_id = $request->user_id;

    $limit=10;$offset=0;

// $userDb = DB::table('registerusers')->where('id' , $user_id)->select('is_free_joined')->first();
// if($userDb->is_free_joined == 1){
  // $query = $query->where('is_first_time_free', 0);
// }
    $query = DB::table('matchchallenges')->where('matchchallenges.matchkey',$matchkey)->where('matchchallenges.status','opened')->where('matchchallenges.sport_type',$sportType->id);


    $query->where('fantasy_type_id', $fantasy_type);

    if($fantasy_type==1){
      $query->where('slotes_id',$slotes_id);
    }
    //Filter Conditon Start

    //Entry Fee Filter

    if($entryfee) {

      if(strpos($entryfee,',')!==false) { // Check Multiple Value

        $entryfee = explode(",", $entryfee);

        $entryfee1 = $entryfee[0];

        if($entryfee1) {

        $query->where(function ($query) use ($entryfee1, $entryfee) {

        if($entryfee1) {

          if($entryfee1==1) {

            $query->where(function ($query) {

              $query->where('entryfee','>',0);

              $query->where('entryfee','<',101);

            });

          } elseif ($entryfee1==2) {

            $query->where(function ($query) {

              $query->where('entryfee','>',100);

              $query->where('entryfee','<',1001);

            });

          } elseif ($entryfee1==3) {

            $query->where(function ($query) {

              $query->where('entryfee','>',1000);

              $query->where('entryfee','<',5001);

            });

          } elseif ($entryfee1==4) {

            $query->where(function ($query) {

              $query->where('entryfee','>',5000);

            });

          }

        }

        if(isset($entryfee[1]) && !empty($entryfee[1])) {

          $entryfee2 = $entryfee[1];

          if($entryfee2) {

            if($entryfee2==1) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',0);

                $query->where('entryfee','<',101);

              });

            } elseif ($entryfee2==2) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',100);

                $query->where('entryfee','<',1001);

              });

            } elseif ($entryfee2==3) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',1000);

                $query->where('entryfee','<',5001);

              });

            } elseif ($entryfee2==4) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',5000);

              });

            }

          }

        }

        if(isset($entryfee[2]) && !empty($entryfee[2])) {

          $entryfee3 = $entryfee[2];

          if($entryfee3) {

            if($entryfee3==1) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',0);

                $query->where('entryfee','<',101);

              });

            } elseif ($entryfee3==2) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',100);

                $query->where('entryfee','<',1001);

              });

            } elseif ($entryfee3==3) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',1000);

                $query->where('entryfee','<',5001);

              });

            } elseif ($entryfee3==4) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',5000);

              });

            }

          }

        }



        if(isset($entryfee[3]) && !empty($entryfee[3])) {

          $entryfee4 = $entryfee[3];

          if($entryfee4) {

            if($entryfee4==1) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',0);

                $query->where('entryfee','<',101);

              });

            } elseif ($entryfee4==2) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',100);

                $query->where('entryfee','<',1001);

              });

            } elseif ($entryfee4==3) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',1000);

                $query->where('entryfee','<',5001);

              });

            } elseif ($entryfee4==4) {

              $query->orWhere(function ($query) {

                $query->where('entryfee','>',5000);

              });

            }

          }

        }

        });

      }

      }



       else {

        if($entryfee==1) {

          $query->where('entryfee','>',0);

          $query->where('entryfee','<',101);

        } elseif ($entryfee==2) {

          $query->where('entryfee','>',100);

          $query->where('entryfee','<',1001);

        } elseif ($entryfee==3) {

          $query->where('entryfee','>',1000);

          $query->where('entryfee','<',5001);

        } elseif ($entryfee==4) {

          $query->where('entryfee','>',5000);

        }

      }

    }



    if($winning) {

      if(strpos($winning,',')!==false) { // Check Multiple Value

        $winning = explode(",", $winning);

        $winning1 = $winning[0];

        if($winning1) {

        $query->where(function ($query) use ($winning1, $winning) {

        if($winning1) {

          if($winning1==1) {

            $query->where(function ($query) {

              $query->where('win_amount','>',0);

              $query->where('win_amount','<',1001);

            });

          } elseif ($winning1==2) {

            $query->where(function ($query) {

              $query->where('win_amount','>',1000);

              $query->where('win_amount','<',10001);

            });

          } elseif ($winning1==3) {

            $query->where(function ($query) {

              $query->where('win_amount','>',10000);

              $query->where('win_amount','<',50001);

            });

          } elseif ($winning1==4) {

            $query->where(function ($query) {

              $query->where('win_amount','>',50000);

            });

          }

        }

        if(isset($winning[1]) && !empty($winning[1])) {

          $winning2 = $winning[1];

          if($winning2) {

            if($winning2==1) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',0);

                $query->where('win_amount','<',1001);

              });

            } elseif ($winning2==2) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',1000);

                $query->where('win_amount','<',10001);

              });

            } elseif ($winning2==3) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',10000);

                $query->where('win_amount','<',50001);

              });

            } elseif ($winning2==4) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',50000);

              });

            }

          }

        }

        if(isset($winning[2]) && !empty($winning[2])) {

          $winning3 = $winning[2];

          if($winning3) {

            if($winning3==1) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',0);

                $query->where('win_amount','<',1001);

              });

            } elseif ($winning3==2) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',1000);

                $query->where('win_amount','<',10001);

              });

            } elseif ($winning3==3) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',10000);

                $query->where('win_amount','<',50001);

              });

            } elseif ($winning3==4) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',50000);

              });

            }

          }

        }



        if(isset($winning[3]) && !empty($winning[3])) {

          $winning4 = $winning[3];

          if($winning4) {

            if($winning4==1) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',0);

                $query->where('win_amount','<',1001);

              });

            } elseif ($winning4==2) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',1000);

                $query->where('win_amount','<',10001);

              });

            } elseif ($winning4==3) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',10000);

                $query->where('win_amount','<',50001);

              });

            } elseif ($winning4==4) {

              $query->orWhere(function ($query) {

                $query->where('win_amount','>',50000);

              });

            }

          }

        }

        });

      }

      }



       else {

        if($winning==1) {

          $query->where('win_amount','>',0);

          $query->where('win_amount','<',1001);

        } elseif ($winning==2) {

          $query->where('win_amount','>',1000);

          $query->where('win_amount','<',10001);

        } elseif ($winning==3) {

          $query->where('win_amount','>',10000);

          $query->where('win_amount','<',50001);

        } elseif ($winning==4) {

          $query->where('win_amount','>',50000);

        }

      }

    }





    //Contest Type Filter

    if($contest_type) {

      if(isset($contest_type)) { // Check Multiple Value
      // if(strpos($contest_type,',')!==false) { // Check Multiple Value

        $contest_type = explode(",", $contest_type);

        $contest_type1 = $contest_type[0];

        if($contest_type1) {

        $query->where(function ($query) use ($contest_type1, $contest_type) {

        if($contest_type1) {

          if($contest_type1==1) {

            $query->where(function ($query) {

              $query->where('multi_entry',1);

            });

          } elseif ($contest_type1==2) {

            $query->where(function ($query) {

              $query->where('confirmed_challenge',1);

            });

          } elseif ($contest_type1==3) {

            $query->where(function ($query) {

              $query->where('bonus',1);
              $query->where('bonus_precent',100);

            });

          }

        }

        if(isset($contest_type[1]) && !empty($contest_type[1])) {

          $contest_type2 = $contest_type[1];

          if($contest_type2) {

            if($contest_type2==1) {

              $query->orWhere(function ($query) {

                $query->where('multi_entry',1);

              });

            } elseif ($contest_type2==2) {

              $query->orWhere(function ($query) {

                $query->where('confirmed_challenge',1);

              });

            }

          }

        }



      });

      }

      }

       else {

        if($contest_type==1) {

          $query->where('multi_entry',1);

        } elseif ($contest_type==2) {

          $query->where('confirmed_challenge',1);

        }
        elseif ($contest_type==3) {

          $query->where(function ($query) {

              $query->where('bonus',1);
              $query->where('bonus_precent',100);

            });

        }

      }



    }

    //Contest Size Filter

    if($contest_size) {

      if(strpos($contest_size,',')!==false) { // Check Multiple Value

        $contest_size = explode(",", $contest_size);

        $contest_size1 = $contest_size[0];

        if($contest_size1) {

        $query->where(function ($query) use ($contest_size1, $contest_size) {

        if($contest_size1) {

          if($contest_size1==1) {

            $query->where(function ($query) {

              $query->where('maximum_user',2);

            });

          } elseif ($contest_size1==2) {

            $query->where(function ($query) {

              $query->where('maximum_user','>',2);

              $query->where('maximum_user','<',11);

            });

          } elseif ($contest_size1==3) {

            $query->where(function ($query) {

              $query->where('maximum_user','>',10);

              $query->where('maximum_user','<',21);

            });

          } elseif ($contest_size1==4) {

            $query->where(function ($query) {

              $query->where('maximum_user','>',20);

              $query->where('maximum_user','<',100);

            });

          } elseif ($contest_size1==5) {

            $query->where(function ($query) {

              $query->where('maximum_user','>',100);

              $query->where('maximum_user','<',1001);

            });

          } elseif ($contest_size1==6) {

            $query->where(function ($query) {

              $query->where('maximum_user','>',1000);

              $query->where('maximum_user','<',10001);

            });

          } elseif ($contest_size1==7) {

            $query->where(function ($query) {

              $query->where('maximum_user','>',10000);

            });

          }

        }

        if(isset($contest_size[1]) && !empty($contest_size[1])) {

          $contest_size2 = $contest_size[1];

          if($contest_size2) {

            if($contest_size2==1) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user',2);

              });

            } elseif ($contest_size2==2) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',2);

                $query->where('maximum_user','<',11);

              });

            } elseif ($contest_size2==3) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10);

                $query->where('maximum_user','<',21);

              });

            } elseif ($contest_size2==4) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',20);

                $query->where('maximum_user','<',100);

              });

            } elseif ($contest_size2==5) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',100);

                $query->where('maximum_user','<',1001);

              });

            } elseif ($contest_size2==6) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',1000);

                $query->where('maximum_user','<',10001);

              });

            } elseif ($contest_size2==7) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10000);

              });

            }

          }

        }

        if(isset($contest_size[2]) && !empty($contest_size[2])) {

          $contest_size3 = $contest_size[2];

          if($contest_size3) {

            if($contest_size3==1) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user',2);

              });

            } elseif ($contest_size3==2) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',2);

                $query->where('maximum_user','<',11);

              });

            } elseif ($contest_size3==3) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10);

                $query->where('maximum_user','<',21);

              });

            } elseif ($contest_size3==4) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',20);

                $query->where('maximum_user','<',100);

              });

            } elseif ($contest_size3==5) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',100);

                $query->where('maximum_user','<',1001);

              });

            } elseif ($contest_size3==6) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',1000);

                $query->where('maximum_user','<',10001);

              });

            } elseif ($contest_size3==7) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10000);

              });

            }

          }

        }



        if(isset($contest_size[3]) && !empty($contest_size[3])) {

          $contest_size4 = $contest_size[3];

          if($contest_size4) {

            if($contest_size4==1) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user',2);

              });

            } elseif ($contest_size4==2) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',2);

                $query->where('maximum_user','<',11);

              });

            } elseif ($contest_size4==3) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10);

                $query->where('maximum_user','<',21);

              });

            } elseif ($contest_size4==4) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',20);

                $query->where('maximum_user','<',100);

              });

            } elseif ($contest_size4==5) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',100);

                $query->where('maximum_user','<',1001);

              });

            } elseif ($contest_size4==6) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',1000);

                $query->where('maximum_user','<',10001);

              });

            } elseif ($contest_size4==7) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10000);

              });

            }

          }

        }

        if(isset($contest_size[4]) && !empty($contest_size[4])) {

          $contest_size5 = $contest_size[4];

          if($contest_size5) {

            if($contest_size5==1) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user',2);

              });

            } elseif ($contest_size5==2) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',2);

                $query->where('maximum_user','<',11);

              });

            } elseif ($contest_size5==3) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10);

                $query->where('maximum_user','<',21);

              });

            } elseif ($contest_size5==4) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',20);

                $query->where('maximum_user','<',100);

              });

            } elseif ($contest_size5==5) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',100);

                $query->where('maximum_user','<',1001);

              });

            } elseif ($contest_size5==6) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',1000);

                $query->where('maximum_user','<',10001);

              });

            } elseif ($contest_size5==7) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10000);

              });

            }

          }

        }

        if(isset($contest_size[5]) && !empty($contest_size[5])) {

          $contest_size6 = $contest_size[5];

          if($contest_size6) {

            if($contest_size6==1) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user',2);

              });

            } elseif ($contest_size6==2) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',2);

                $query->where('maximum_user','<',11);

              });

            } elseif ($contest_size6==3) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10);

                $query->where('maximum_user','<',21);

              });

            } elseif ($contest_size6==4) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',20);

                $query->where('maximum_user','<',100);

              });

            } elseif ($contest_size6==5) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',100);

                $query->where('maximum_user','<',1001);

              });

            } elseif ($contest_size6==6) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',1000);

                $query->where('maximum_user','<',10001);

              });

            } elseif ($contest_size6==7) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10000);

              });

            }

          }

        }

        if(isset($contest_size[6]) && !empty($contest_size[6])) {

          $contest_size7 = $contest_size[6];

          if($contest_size7) {

            if($contest_size7==1) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user',2);

              });

            } elseif ($contest_size7==2) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',2);

                $query->where('maximum_user','<',11);

              });

            } elseif ($contest_size7==3) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10);

                $query->where('maximum_user','<',21);

              });

            } elseif ($contest_size7==4) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',20);

                $query->where('maximum_user','<',100);

              });

            } elseif ($contest_size7==5) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',100);

                $query->where('maximum_user','<',1001);

              });

            } elseif ($contest_size7==6) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',1000);

                $query->where('maximum_user','<',10001);

              });

            } elseif ($contest_size7==7) {

              $query->orWhere(function ($query) {

                $query->where('maximum_user','>',10000);

              });

            }

          }

        }

        });

      }

      }



       else {

        if($contest_size==1) {

          $query->where('maximum_user',2);

        } elseif ($contest_size==2) {

          $query->where('maximum_user','>',2);

          $query->where('maximum_user','<',11);

        } elseif ($contest_size==3) {

          $query->where('maximum_user','>',10);

          $query->where('maximum_user','<',21);

        } elseif ($contest_size==4) {

          $query->where('maximum_user','>',20);

          $query->where('maximum_user','<',100);

        } elseif ($contest_size==5) {

          $query->where('maximum_user','>',100);

          $query->where('maximum_user','<',1001);

        } elseif ($contest_size==6) {

          $query->where('maximum_user','>',1000);

          $query->where('maximum_user','<',10001);

        } elseif ($contest_size==7) {

          $query->where('maximum_user','>',10000);

        }

      }

    }



    //Filter Conditon End
    $joinedleauges = JoinedLeague::join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')->where('joinedleauges.matchkey',$matchkey)->where('joinedleauges.userid',$user_id)->where('joinedleauges.sport_type',$sportType->id)->select('joinedleauges.challengeid','matchchallenges.multi_entry','matchchallenges.is_champion')->get();
    // exit;
    // $joinedleauges = array();

    // print_r($joinedleauges); exit;

    $challenge_arr = array();
    $challenge_arr2 = array();

    foreach ($joinedleauges as $key => $value) {

      $challenge_arr[] = $value->challengeid;
      if($value->multi_entry==0) {

        $challenge_arr2[] = $value->challengeid;
      }
    }

    if(!empty($challenge_arr)) {
      $joined_challenge_ids = implode(',', $challenge_arr);
    } else {
      $joined_challenge_ids = '';
    }

    $user_fav_contests_ids = '';
    $user_fav_contests = DB::table('user_favourite_contest')->where('user_id', $user_id)->select(DB::raw('group_concat(challenge_id) as user_fav_contests_ids'))->groupBy('user_id')->first();
    if(!empty($user_fav_contests)) {

        $user_fav_contests_ids = $user_fav_contests->user_fav_contests_ids;
    }
    if(!empty($challenge_arr2)) {
    // $challenge_arr2 = implode(',',$challenge_arr2);

        // $query->havingRaw('matchchallenges.id NOT IN ('.$challenge_arr2.')');
        // $query->whereNotIn('matchchallenges.id', $challenge_arr2);
    }
    // exit;
    $allchallenges = $query->leftJoin('matchpricecards','matchchallenges.id','=','matchpricecards.challenge_id')
                    // ->whereRaw('((SELECT COUNT(id) FROM joinedleauges WHERE challengeid = matchchallenges.id AND userid = "'.$user_id.'") = 0 OR matchchallenges.multi_entry = 1)')
                    // ->orderBY('entryfee','ASC')
                    // ->orderBY('id','DESC')
                    // ->where('matchchallenges.real_challenge_id' , '!=' , '0')

                    ->groupBy('matchchallenges.id')
                    // ->having('matchchallenges.created_by','<',1)
                // ->groupBy('matchchallenges.real_challenge_id')
                    ->select('matchchallenges.id','matchchallenges.is_champion','matchchallenges.champion_team_userid','matchchallenges.champion_team_id','matchchallenges.created_by','matchchallenges.challenge_id','matchchallenges.challenge_category_id','matchchallenges.real_challenge_id','matchchallenges.challenge_type','winning_percentage','matchchallenges.entryfee','matchchallenges.win_amount','matchchallenges.maximum_user','matchchallenges.matchkey','matchchallenges.joinedusers','matchchallenges.multi_entry','confirmed_challenge','is_giveaway','dis_price','bonus','bonus_precent','max_team_limit','is_first_time_free','first_time_free_amount','giveaway_text','giveaway_color',DB::raw('MAX(matchpricecards.max_position) as winners, MAX(matchpricecards.price) as first_rank_prize,"'.$joined_challenge_ids.'" as joined_challenge_ids, "'.$user_fav_contests_ids.'" as user_fav_contests_ids,"1" as get_challenge_new'), 'contest_free_team' , 'matchchallenges.champion_image' , 'matchchallenges.is_offer_team','matchchallenges.is_gadget','matchchallenges.gadget_image')
                    // ->whereNotIn('matchchallenges.id', $challenge_arr2)
                    ->get()
                    ->unique('real_challenge_id')
                    ->whereNotIn('matchchallenges.id', $challenge_arr2)
                    ->where('challenge_category_id','!=',0)
                    // ->push('joinedleauges','joinedleauges')
                    ->sortBy('entryfee');
                    // exit;
    // $allchallenges = json_decode(json_encode($allchallenges));
    // print_r($allchallenges);die;
//    $allchallenges
  //print_r($allchallenges);die;
    return Response::json(["status" => STATUS_SUCCESS,"result"=> ["contest"=> array_values(array_filter(json_decode(json_encode(LeagueListResource_new::collection($allchallenges)), true))),

    /*"user_teams"=> JoinTeam::where('userid',$request->user_id)->where('fantasy_type_id',$fantasy_type)
    ->where('slotes_id',$request->slotes_id)
    ->where('sport_type',$sportType->id)->where('matchkey',$request->matchkey)->count(),*/
    "user_teams"=> Helpers::get_user_team_count($request->matchkey,$fantasy_type,$request->user_id),

        "joined_leagues"=> 0]

        ]);


  }
  public function getscorecards(Request $request){
    // dd('dfsf');
    // return "ssa";

        // $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
        // $txt = json_encode($request->all())."John Doe\nhkhkhkhk";
        //
        // fwrite($myfile, $txt); exit;

        $this->validate($request,[

          'matchkey' => 'required',

          'challenge_id' => 'required'

        ]);

        $geturl = BASE_URL;

        $matchkey="";

        if($request->matchkey != "") {



          $matchkey = $request->matchkey;

        }

        $challenege_id = $request->challenge_id;



        $allpricecard =  MatchPriceCard::where('matchkey',$matchkey)->where('challenge_id',$challenege_id)->get();

        $j=0;

        if(count($allpricecard)){

          $winners=0;

          // return Response::json(["status" => STATUS_SUCCESS,"result"=> PriceCardResource::collection($allpricecard)

          //     ]); die;

          foreach($allpricecard as $prc){


            $Json[$j]['id'] = $prc->id;

            $Json[$j]['totalwinners'] = $prc->winners;

            $winners+=$prc->winners;

            $Json[$j]['price'] = $prc->price;

            if($prc->min_position+1!=$prc->max_position){

              $Json[$j]['start_position'] = $prc->min_position+1 .'-'. $prc->max_position;

            }else{

              $Json[$j]['start_position'] = ''.$prc->max_position;

            }

            $Json[$j]['total'] = (int)$prc->total;

            $Json[$j]['description'] = $prc->description;

            if ($j == 0) {
              $Json[0]['first_rank_prize'] = $prc->price;
            }

            $Json[$j]['is_gadget'] = $prc->is_gadget;

            $Json[$j]['gadget_image'] = (int) @$prc->is_gadget == 1 ? "https://fanline11-admin.rglabs.net/uploads/banners/".@$prc->gadget_image : '';
            $j++;

          }

        }else{

          $Json=array();

        }

        return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

        die;

      }

    public function getscorecards_old(Request $request){

      $this->validate($request,[

        'matchkey' => 'required',

        'challenge_id' => 'required'

      ]);

    $geturl = BASE_URL;

    $matchkey="";

    if($request->matchkey != "") {

      $matchkey = $request->matchkey;

    }

    $challenege_id = $request->challenge_id;

    $challengeDetail = MatchChallenge::where('id',$challenege_id)->select('joinedusers','minimum_user','entryfee','challenge_type', 'percetage_type' , 'is_giveaway' , 'giveaway_text','is_gadget','gadget_text')->first();



    $allpricecard =  MatchPriceCard::where('matchkey',$matchkey)->where('challenge_id',$challenege_id)->get();

    if($challengeDetail->challenge_type == 'percentage' && $challengeDetail->percetage_type == 2) {
      if($challengeDetail->joinedusers < $challengeDetail->minimum_user) {
        $Json = array();
        return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);
        die;
      }
      else {
        $Json = array();
        if($allpricecard->isEmpty()){
          $allpricecard =  DB::table('matchpricecards_perct_flex')->where('matchkey',$matchkey)
                            ->where('challenge_id',$challenege_id)
                            ->get();

          if(!$allpricecard->isEmpty()){
            $j=0;
            $winners=0;
            $max_position=0;
            $totalWinAmount = floor(($challengeDetail->entryfee*$challengeDetail->joinedusers)*80/100);
            $maximum_users = $challengeDetail->joinedusers;
            foreach($allpricecard as $prc){
              if($prc->winners_type == 1) {
                $Json[$j]['id'] = $prc->id;
                $Json[$j]['winners'] = $prc->winners;
                $Json[$j]['price'] = ceil($totalWinAmount*$prc->price/100);
                if($prc->min_position+1!=$prc->max_position){
                  $Json[$j]['start_position'] = $prc->min_position+1 .'-'. $prc->max_position;
                }else{
                  $Json[$j]['start_position'] = ''.$prc->max_position;
                }
                $Json[$j]['total'] = $prc->total;
                $Json[$j]['description'] = '';
                if ($j == 0) {
                  $Json[0]['first_rank_prize'] = $Json[0]['price'];
                }
                $max_position += $Json[$j]['winners'];
                $Json[$j]['is_gadget'] = $prc->is_gadget;
                $Json[$i]['gadget_image'] = (int) @$prc->is_gadget == 1 ? "https://fanline11-admin.rglabs.net/uploads/banners/".@$prc->gadget_image : '';
              }
              elseif ($prc->winners_type == 2) {
                $winners = ceil($challengeDetail->joinedusers*$prc->winners/100);
                $Json[$j]['id'] = $prc->id;
                $Json[$j]['winners'] = $winners;
                $Json[$j]['price'] = floor((ceil($totalWinAmount*$prc->price/100)/$winners));
                $min_position = $max_position;
                if($min_position+1!=($min_position+$winners)){
                  $Json[$j]['start_position'] = ($min_position+1) .'-'. ($min_position+1+$winners);
                }else{
                  $Json[$j]['start_position'] = ''.$min_position+1;
                }
                $Json[$j]['total'] = $prc->total;
                $Json[$j]['description'] = '';
                if ($j == 0) {
                  $Json[0]['first_rank_prize'] = $Json[0]['price'];
                }
                $Json[$j]['is_gadget'] = $prc->is_gadget;
                $Json[$i]['gadget_image'] = (int) @$prc->is_gadget == 1 ? "https://fanline11-admin.rglabs.net/uploads/banners/".@$prc->gadget_image : '';

                $max_position += $winners;
              }
              $j++;
              if($max_position >= $maximum_users) {
                break;
              }
            }
          }
        }
        else {
          $winners = 0;
          $j=0;
          foreach($allpricecard as $prc){
            $Json[$j]['id'] = $prc->id;
            $Json[$j]['winners'] = $prc->winners;
            $winners+=$prc->winners;
            $Json[$j]['price'] = "₹ ".$prc->price;
            if($prc->min_position+1!=$prc->max_position){
              $Json[$j]['start_position'] = $prc->min_position+1 .'-'. $prc->max_position;
            }else{
              $Json[$j]['start_position'] = ''.$prc->max_position;
            }
            $Json[$j]['total'] = $prc->total;
            $Json[$j]['description'] = '';
            if ($j == 0) {
              $Json[0]['first_rank_prize'] = $prc->price;
            }
            $Json[$j]['is_gadget'] = $prc->is_gadget;
            $Json[$i]['gadget_image'] = (int) @$prc->is_gadget == 1 ? "https://fanline11-admin.rglabs.net/uploads/banners/".@$prc->gadget_image : '';

            $j++;
          }
        }
      }
      return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);
      die;
    }


    $j=0;

    if(count($allpricecard)){

      $winners=0;

      // return Response::json(["status" => STATUS_SUCCESS,"result"=> PriceCardResource::collection($allpricecard)

      //     ]); die;

      foreach($allpricecard as $prc){


        $Json[$j]['id'] = $prc->id;

        $Json[$j]['winners'] = $prc->winners;

        $winners+=$prc->winners;

        $Json[$j]['price'] = "₹ ".$prc->price;
        if($prc->win_percent > 0) {

            $Json[$j]['price'] = "₹ ".$prc->win_percent.'%';
        }

        if($prc->min_position+1!=$prc->max_position){

          $Json[$j]['start_position'] = $prc->min_position+1 .'-'. $prc->max_position;

        }else{

          $Json[$j]['start_position'] = ''.$prc->max_position;

        }
        if($challengeDetail->is_giveaway == 1){
          $Json[$j]['price'] = "₹ ".$challengeDetail->giveaway_text;

        }
        if($challengeDetail->is_gadget == 1){
          // $Json[$j]['price'] = $challengeDetail->giveaway_text;
           $Json[$j]['price'] = $challengeDetail->gadget_text;

        }
        $Json[$j]['is_giveaway_visible'] = $challengeDetail->is_giveaway;

        $Json[$j]['total'] = "₹ ".$prc->total;

        $Json[$j]['description'] = $prc->description;
        $Json[$j]['is_gadget'] = @$prc->is_gadget;
        $Json[$j]['gadget_image'] = (int) @$prc->is_gadget == 1 ? "https://fanline11-admin.rglabs.net/uploads/banners/".@$prc->gadget_image : '';


        if ($j == 0) {
        $Json[0]['first_rank_prize'] = $prc->price;
        }
        $j++;

      }

    }else{

      $Json=array();

    }

    return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

    die;

  }





    public function countNotification(Request $request){

      $this->validate($request,[

        'user_id' => 'required'

      ]);

      $userid = $request->user_id;

      $currentdate = $this->getDateCommon();

      $countnotifications = Notification::where('userid',$userid)->where('seen',0)->count();

      $json['status'] = $countnotifications;

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$json]);die;

    }



    public function usernotifications(Request $request){

      $this->validate($request,[

        'user_id' => 'required'

      ]);

      $userid = $request->user_id;

      $currentdate = $this->getDateCommon();





      $todaynotifications = Notification::

      select(DB::raw('CONCAT(UCASE(LEFT(title, 1)),LCASE(SUBSTRING(title, 2))) as title'))



      // ->whereDate('notifications.created_at','=',$currentdate)

      ->where('userid',$userid)->orderBy('id','DESC')->select('title','created_at')->get();


      Notification::where('userid',$userid)->where('seen',0)->update(['seen' => 1]);
      $countnotifications = Notification::where('seen',0)->where('userid',$userid)->count();



      if (is_null($todaynotifications)) {

        Notification::where('userid',$userid)->first()->fill([

        'seen' => 1

      ])->save();

      }



      $Json = array();

      if(!empty($todaynotifications)){

        $Json = $todaynotifications;

      }

      else{

        $Json = array();

      }

      $previousnotifications = Notification::

      // whereDate('notifications.created_at','<',$currentdate)->

      orderBy('id','DESC')->where('userid',$userid)->limit(100)->select('title','created_at')->get();

      // print_r($previousnotifications);die;

      if(!is_null($previousnotifications)){

        $Json = $previousnotifications;

      }else{

        $Json = array();

      }

      if (empty($Json)) {

        $return = array();

      } else {

        $return = json_decode(json_encode($Json),true);

      }



      return Response::json(["status" => STATUS_SUCCESS,"result"=>$return]);

      die;

    }



    public function seennotifications(Request $request){

      $this->validate($request,[

        'user_id' => 'required'

      ]);

      $userid = $request->user_id;

      $find = Notification::where('seen',0)->where('userid',$userid)->get();



      if(count($find)){

        foreach($find as $ff){

          $data['seen'] = 1;

          Notification::where('userid',$userid)->update($data);

          // Notification::where('userid',$userid)->fill([

          //   'seen' => 1

          // ])->save();

        }

      }

      $Json[0]['status'] = 1;

      //echo json_encode($Json);

      return Response::json(["status" => STATUS_SUCCESS,"result"=> $Json]);

      die;

    }

    public function addMatchAlerts(Request $request){

      $this->validate($request,[

        'user_id' => 'required',
        'matchkey' => 'required'

      ]);
      $userid = $request->user_id;
      if(isset($request->fcmToken)){
      $fcmToken = $request->fcmToken;
    }else{
            $reg_db = DB::table('registerusers')->where('id',$request->user_id)->first();
            $fcmToken = $reg_db->fcmToken;

    }

      $match_key = $request->matchkey;

      $insert_data = array(

        "user_id" => $userid,

        "match_key" => $match_key,

        "fcmToken" => $fcmToken,

      );
      $datacheck = DB::table('matchalerts')->where('user_id',$request->user_id)
      ->where('match_key',$request->matchkey)->first();
      if(!empty($datacheck)){
        return Response::json(["status" => STATUS_FAILURE,"message"=> 'Already Alert Added']);
        die;
      }
      DB::table('matchalerts')->insert($insert_data);
      return Response::json(["status" => STATUS_SUCCESS,"message"=> 'Alert Added']);
      die;

    }

    public function myUsableBalance(Request $request){
        $this->validateLogin($request->user_id);
         $this->validate($request,[

          'challengeid' => 'required',

          'user_id' => 'required'

        ]);

        $challengeid = $request->challengeid;

        $userid = $request->user_id;
        $teamid = @$request->teamid ? $request->teamid : "1";

        $teamCount = count(array_filter(explode(',', $teamid)));

        $userbalances = DB::table('userbalances')->where('user_id',$request->user_id)->first();

        $findchallengedetails = DB::table('matchchallenges')->where('id',$challengeid)->select('matchchallenges.entryfee','matchchallenges.maximum_user','matchchallenges.matchkey','matchchallenges.bonus','matchchallenges.bonus_precent','matchchallenges.marathon','matchchallenges.is_private','matchchallenges.grand', 'contest_free_team' , 'matchchallenges.is_offer_team', 'multi_entry', 'contest_bonus_team','offer_bonus_percent')->first();

        $is_bonus = @$findchallengedetails->bonus;
        $find_entry_fee = $findchallengedetails->entryfee * $teamCount;

    $isOfferTeamValid = false;
      if($findchallengedetails->multi_entry == 1 && $findchallengedetails->is_offer_team == 1) {
            $exists = DB::table("joined_freeteam")
              ->where("user_id", $userid)
              ->where("challenge_id", $challengeid)
              ->doesntExist();
            if($exists) {
              $joinedTeam = DB::table("joinedleauges")
                ->where("userid", $userid)
                ->where("challengeid", $challengeid)
                ->count();

              if(($joinedTeam+$teamCount) >= $findchallengedetails->contest_free_team && $joinedTeam < $findchallengedetails->contest_free_team) {
                $teamCount = $teamCount - 1;
                $isOfferTeamValid = true;
                $find_entry_fee = $findchallengedetails->entryfee * $teamCount;
              }
            }
        }


        $findusablebalance = ($find_entry_fee * $findchallengedetails->bonus_precent) / 100;

        if ($findchallengedetails->bonus == 1) {

            if ($findusablebalance > $userbalances->bonus) {

            $findusablebonus = $userbalances->bonus;

            } else {

              $findusablebonus = $findusablebalance;

            }

        } else {

              $findusablebonus = 0;

        }

    $isBonusTeamExists = false;
        if($findchallengedetails->contest_bonus_team != 0){
          $joinedTeam = DB::table("joinedleauges")
            ->where("userid", $userid)
            ->where("challengeid", $challengeid)
            ->count();
    // $findchallengedetails->contest_bonus_team >= ($joinedTeam + $teamCount)
    // echo $joinedTeam;
    for($cc = 1; $cc <= $teamCount; $cc++){
    if($findchallengedetails->contest_bonus_team == ($joinedTeam + $cc)){
      $isBonusTeamExists = true;
    }
    }

    // var_dump($isBonusTeamExists);exit;
    if($isBonusTeamExists == true){
    $findusablebalance = ($findchallengedetails->entryfee * $findchallengedetails->offer_bonus_percent) / 100;

      if ($findusablebalance > $userbalances->bonus) {

      $findusablebonus = $userbalances->bonus;

      } else {

        $findusablebonus = $findusablebalance;

      }

    }

        }



        $findtotalbalance =  $userbalances->winning + $userbalances->balance;



          $Json[0]['usertotalbalance'] = number_format((float)$findtotalbalance, 2, '.', '');

          $Json[0]['usablebalance'] = number_format((float)$findusablebonus, 2, '.', '');

          $Json[0]['marathon'] = intval($findchallengedetails->marathon);

          $Json[0]['is_bonus'] = intval($is_bonus);
    // $find_entry_fee = 999;
          $Json[0]['entry_fees'] = $find_entry_fee;

          $Json[0]['to_pay'] = $find_entry_fee - $findusablebonus;
          // $Json[0]['to_pay'] = "90090";




        return Response::json(["status" => 1,"result"=>$Json]);

        die;

      }

      Public function affilate_commission_adjustment(Request $request){
        $this->validateLogin($request->user_id);
         $this->validate($request,[
          'user_id' => 'required'
        ]);
        $amount = !empty($request->amount)? $request->amount : 0;
        $get_userbalances = DB::table('userbalances')->where('user_id',$request->user_id)->first();
        $affiliate_balance = !empty($get_userbalances->commission) ? $get_userbalances->commission : "1";
        // dd($affiliate_balance);
        $balance = $get_userbalances->balance;

        if(!empty($amount) && $amount < 1){
          return Response::json(["status" => 0,"message"=>"Insufficient Commission Amount into Wallet","result"=>""]);
          die;
        }
        if(!empty($affiliate_balance) && $affiliate_balance < 1){
          return Response::json(["status" => 0,"message"=>"Insufficient Commission Amount into Wallet","result"=>""]);
          die;
        }
        $rem_aff_comm = $affiliate_balance - $amount;
        $balance = $balance + $amount;

        $updateBalance = [
          "balance" => $balance,
          "commission" => $rem_aff_comm
        ];
        $return =   DB::table('userbalances')->where('user_id',$request->user_id)->update($updateBalance);
        // echo "<pre>";print_r($updateBalance);die;
        // dd($return);
        if($return){

          $getupdated_balance =   DB::table('userbalances')->where('user_id',$request->user_id)->first();
          $findtotalbalance =  $getupdated_balance->winning + $getupdated_balance->balance;
          $trans = DB :: table('transactions')->where('userid',$request->user_id)->orderBY('id','DESC')->first();

          $transactiondata['type'] = 'Transfer Affiliate Commission';

          $transactiondata['amount'] = $amount;

          // $transactiondata['total_available_amt'] = $findtotalbalance;

          $transactiondata['transaction_by'] = "FANLINE11";

          $transactiondata['userid'] = $request->user_id;

          $transactiondata['paymentstatus'] = CONFIRMED;

          $transactiondata['cons_bonus'] = 0;

          $transactiondata['bal_fund_amt'] = $amount;
          $transactiondata['total_available_amt'] = $amount + $trans->bal_win_amt+$trans->bal_bonus_amt;
          $transactiondata['bal_affilate_commission'] =$trans->bal_affilate_commission - $amount;

          $transactiondata['transaction_id'] = 'FANLINE11-Commission-Transfer-'.rand(1000,9999).''.time();

          Transaction::insert($transactiondata);


            $Json[0]['usertotalbalance'] = number_format((float)$findtotalbalance, 2, '.', '');
            $Json[0]['balance'] = number_format((float)$getupdated_balance->balance, 2, '.', '');
            $Json[0]['bonus'] = number_format((float)$getupdated_balance->bonus, 2, '.', '');
            $Json[0]['winning'] = number_format((float)$getupdated_balance->winning, 2, '.', '');
            $Json[0]['commission'] = number_format((float)$getupdated_balance->commission, 2, '.', '');
            return Response::json(["status" => 1,"result"=>$Json]);
            die;
        }
        else{
          return Response::json(["status" => 0,"message"=>"Commission Not Transfer","result"=>""]);
          die;
        }
    }


    public function myUsableBalance_old(Request $request){
      $this->validateLogin($request->user_id);
       $this->validate($request,[

        'challengeid' => 'required',

        'user_id' => 'required'

      ]);

      $challengeid = $request->challengeid;

      $userid = $request->user_id;
      $teamid = @$request->teamid ? $request->teamid : "1";

      $teamCount = count(array_filter(explode(',', $teamid)));

      $userbalances = DB::table('userbalances')->where('user_id',$request->user_id)->first();

      $findchallengedetails = DB::table('matchchallenges')->where('id',$challengeid)->select('matchchallenges.entryfee','matchchallenges.maximum_user','matchchallenges.matchkey','matchchallenges.bonus','matchchallenges.bonus_precent','matchchallenges.marathon','matchchallenges.is_private','matchchallenges.grand', 'contest_free_team' , 'matchchallenges.is_offer_team', 'multi_entry', 'contest_bonus_team','offer_bonus_percent')->first();

      $is_bonus = @$findchallengedetails->bonus;
      $find_entry_fee = $findchallengedetails->entryfee * $teamCount;

$isOfferTeamValid = false;
		if($findchallengedetails->multi_entry == 1 && $findchallengedetails->is_offer_team == 1) {
	      	$exists = DB::table("joined_freeteam")
	      		->where("user_id", $userid)
	      		->where("challenge_id", $challengeid)
	      		->doesntExist();
	      	if($exists) {
		      	$joinedTeam = DB::table("joinedleauges")
		      		->where("userid", $userid)
		      		->where("challengeid", $challengeid)
		      		->count();

		      	if(($joinedTeam+$teamCount) >= $findchallengedetails->contest_free_team && $joinedTeam < $findchallengedetails->contest_free_team) {
              $teamCount = $teamCount - 1;
              $isOfferTeamValid = true;
		      		$find_entry_fee = $findchallengedetails->entryfee * $teamCount;
		      	}
	      	}
    	}


      $findusablebalance = ($find_entry_fee * $findchallengedetails->bonus_precent) / 100;

      if ($findchallengedetails->bonus == 1) {

          if ($findusablebalance > $userbalances->bonus) {

          $findusablebonus = $userbalances->bonus;

          } else {

            $findusablebonus = $findusablebalance;

          }

      } else {

            $findusablebonus = 0;

      }

$isBonusTeamExists = false;
      if($findchallengedetails->contest_bonus_team != 0){
        $joinedTeam = DB::table("joinedleauges")
          ->where("userid", $userid)
          ->where("challengeid", $challengeid)
          ->count();
// $findchallengedetails->contest_bonus_team >= ($joinedTeam + $teamCount)
// echo $joinedTeam;
for($cc = 1; $cc <= $teamCount; $cc++){
  if($findchallengedetails->contest_bonus_team == ($joinedTeam + $cc)){
    $isBonusTeamExists = true;
  }
}

// var_dump($isBonusTeamExists);exit;
if($isBonusTeamExists == true){
  $findusablebalance = ($findchallengedetails->entryfee * $findchallengedetails->offer_bonus_percent) / 100;

    if ($findusablebalance > $userbalances->bonus) {

    $findusablebonus = $userbalances->bonus;

    } else {

      $findusablebonus = $findusablebalance;

    }

}

      }



      $findtotalbalance =  $userbalances->winning + $userbalances->balance;



        $Json[0]['usertotalbalance'] = number_format((float)$findtotalbalance, 2, '.', '');

        $Json[0]['usablebalance'] = number_format((float)$findusablebonus, 2, '.', '');

        $Json[0]['marathon'] = intval($findchallengedetails->marathon);

        $Json[0]['is_bonus'] = intval($is_bonus);
// $find_entry_fee = 999;
        $Json[0]['entry_fees'] = $find_entry_fee;

        $Json[0]['to_pay'] = $find_entry_fee - $findusablebonus;
        // $Json[0]['to_pay'] = "90090";




      return Response::json(["status" => 1,"result"=>$Json]);

      die;

    }



   public  function createpdfnew($matchdetails){
      date_default_timezone_set("Asia/Kolkata");
      $decodematchdetails = DB::table('listmatches')->where('matchkey',$matchdetails)->select('matchkey','title','short_name','start_date','format','name')->first();
      $matchkey = $decodematchdetails->matchkey;
      $findallchallenges = DB::table('matchchallenges')->where('matchkey',$matchkey)->where('pdf_created',0)->where('status','!=','canceled')->select('*')->get();
      $findmatchplayers = DB::table('matchplayers')->where('matchkey',$matchkey)->select('name','playerid')->get();
      $chid = array();
      if(!empty($findallchallenges)){
        foreach($findallchallenges as $chllenge){
          $chid[] = $chllenge->id;
        }
      }
        if(!empty($chid)){
        $findallusers = DB::table('joinedleauges')->whereIn('challengeid',$chid)->join('registerusers','registerusers.id','=','joinedleauges.userid')->join('jointeam','jointeam.id','=','joinedleauges.teamid')->select('registerusers.team','registerusers.email','jointeam.players','jointeam.captain','jointeam.vicecaptain','jointeam.teamnumber','joinedleauges.id as joinedid','pdfcreate','joinedleauges.challengeid')->get();

        $findallusers = json_decode(json_encode((array) $findallusers), true);

        foreach($findallusers as $val){
            $all_users_data[] = $val;
        }

        //$countusers = count($findallusers);
        if(!empty($all_users_data)){
          foreach($findallchallenges as $chllenge){
            $filterusers=array();
            //$filterBy = $chllenge->id;
            /*$filterusers = array_filter($findallusers, function ($var) use ($filterBy) {
                return ($var['challengeid'] == $filterBy);
            });*/
            $filterusers = array_filter($all_users_data[0]);
            if(!empty($filterusers)){
                $this->getPdfDownload($filterusers,$chllenge,$findmatchplayers,$decodematchdetails);
            }
            $challengepdf['pdf_created'] = 1;
            DB::table('matchchallenges')->where('id',$chllenge->id)->update($challengepdf);
          }
        }
        $pdfcreatedata['pdfstatus'] = 1;
        DB::table('listmatches')->where('matchkey',$matchkey)->update($pdfcreatedata);
      }
    }

    public function getPdfDownload($findjoinedleauges,$findchallenge,$findmatchplayers,$findmatchdetails){
        require_once(base_path()."/mpdf/mpdf.php");
      $mpdf = new mPDF();

      $mpdf->useSubstitutions = false;
      $mpdf->simpleTables = true;
      $mpdf->SetCompression(true);
      $content="";
      $content='<div class="col-md-12 col-sm-12" style="margin-top:20px;">

          <div class="col-md-12 col-sm-12 text-center" style="margin-top:20px;text-align:center">
            <div class="col-md-12 col-sm-12">
              <p> Fanline11 Fantasy Cricket </p>
            </div>';
            $content.='<div class="col-md-12 col-sm-12">
              <p> <strong>Pdf Generated On: </strong>'.date('Y-m-d H:i:s a').'</p>
            </div>
          </div>
        </div>';
        $content.='<div class="col-md-12 col-sm-12" style="margin-top:20px;">
              <table style="width:100%" border="1">
               <tr style="background:#3C7CC4;color:#fff;text-align:center">';
                $challengename = "";
                  if($findchallenge->name==""){
                    if($findchallenge->win_amount==0){
                      $challengename = 'Net Practice';
                    }else{
                      $challengename = 'Win-'.$findchallenge->win_amount;
                    }
                  }else{
                    $challengename = $findchallenge->name;
                  }
                $content.='<th style="color:#fff !important;" colspan="'.(count($findmatchplayers)+1).'">'.$challengename.'( '.$findmatchdetails->short_name.' '.$findmatchdetails->format.' '.$findmatchdetails->start_date.')</th>

                </tr>
                <tr style="background:#ccc;color:#333;text-align:center">
                <th>Display User Name</th>';
                if(!empty($findmatchplayers)){
                    $pn = 1;
                    foreach($findmatchplayers as $player1){
                      if($pn < 12) {
                        //$content.='<th>'.ucwords($player1->name).'</th>';
                        $content.='<th>Player '.$pn.'</th>';
                      }
                      $pn++;
                  }
                }
        $content.='</tr>';

        if(!empty($findjoinedleauges)){
          foreach($findjoinedleauges as $joinleauge){
            $content.='<tr>
              <td style="text-align:center">';
              if($joinleauge['team']!=""){
                $content.=ucwords($joinleauge['team']).'<br> ( '.$joinleauge['teamnumber'].' )';
              }
              else{
                 $content.= ucwords($joinleauge['email']).'<br> ( '.$joinleauge['teamnumber'].' )';
              }
              $content.='</td>';
              $jointeam = $joinleauge['players'];
              $explodeplayers = explode(',',$jointeam);
              //print_r($explodeplayers);die();
              foreach($findmatchplayers as $player2){
                //echo "ds";print_r($player2);die();

                if(in_array($player2->playerid,$explodeplayers)){
                  $content.='<td class="text-center" style="text-align:center;">';
                  $content.= $player2->name;

                  if($player2->playerid==$joinleauge['vicecaptain']){
                    $content.= '(VC)';
                  }
                  if($player2->playerid==$joinleauge['captain']){
                    $content.= '(C)';
                  }
                  $content.='</td>';
                }

              }
              $content.='</tr>';
          }
        }
        $content.='</table>
        </div>';
        //echo $content; exit;
        $mpdf->WriteHTML($content);
        $filename = $findchallenge->id;
        if(file_exists(base_path().'/pdffolders/join-leauges-'.$filename.'.pdf')){
          unlink(base_path().'/pdffolders/join-leauges-'.$filename.'.pdf');
        }

        //$mpdf->Output();
        $mpdf->Output(base_path().'/pdffolders/join-leauges-'.$filename.'.pdf');
        // echo 'join-challenges-'.$filename.'.pdf';
        return 'join-leauges'.$filename.'.pdf';
    }





    public function get_category_challenges($category_id, $matchkey, $user_id,$challenge_arr=array(), $entryfee=0, $winning=0, $contest_type=0, $contest_size=0, $fantasy_type = 0,$slotes_id= 0 , $sport_type = 1) {
        $user_selected_challenge_ids = array();

      if($category_id==1010101010) {
        $user_selected_challenges = DB::table('user_favourite_contest')->where('user_id',$user_id)->get();
        foreach ($user_selected_challenges as $key => $value) {
          $user_selected_challenge_ids[] = $value->challenge_id;
        }
      }

    $joinedleauges = JoinedLeague::where('matchkey',$matchkey)->where('userid',$user_id)->where('sport_type',$sport_type)->select('challengeid')->get();

    $challenge_arr = array();

    foreach ($joinedleauges as $key => $value) {

      $challenge_arr[] = $value->challengeid;

    }

    if(!empty($challenge_arr)) {
      $joined_challenge_ids = implode(',', $challenge_arr);
    } else {
      $joined_challenge_ids = '';
    }

    $user_fav_contests_ids = '';
    $user_fav_contests = DB::table('user_favourite_contest')->where('user_id', $user_id)->select(DB::raw('group_concat(challenge_id) as user_fav_contests_ids'))->groupBy('user_id')->first();
    if(!empty($user_fav_contests)) {

        $user_fav_contests_ids = $user_fav_contests->user_fav_contests_ids;
    }

    $limit=10;$offset=0;

    $query = DB::table('matchchallenges');
    // ->where('is_private',0);

    // $query->where('grand','!=','1');
    // $query->where('slotes_id',$slotes_id);

    // $query->where('marathon','!=','1');
    // $query->whereNotIn('matchchallenges.id',$challenge_arr);
    if(!empty($challenge_arr2)) {

        // $query->havingRaw('matchchallenges.id NOT IN ('.$joined_challenge_ids.')');
        // $query->whereNotIn('matchchallenges.id', $challenge_arr);
    }
    // $query->where('status','=','opened');
    if($matchkey!=""){

      $query->where('matchchallenges.matchkey',$matchkey);
      $query->where('matchchallenges.sport_type',$sport_type);
    $query->where('fantasy_type_id',$fantasy_type);
    $query->where('status','opened');

    }
    if(!empty($user_selected_challenge_ids)) {

      $query->whereIn('matchchallenges.real_challenge_id',$user_selected_challenge_ids);
    } else {

      $query->having('challenge_category_id', $category_id);
    }




    //Filter Conditon Start

    //Entry Fee Filter





    if($entryfee) {

      if($entryfee=1) {

        $query->where('entryfee','>',0);

        $query->where('entryfee','<',101);

      } elseif ($entryfee=2) {

        $query->where('entryfee','>',100);

        $query->where('entryfee','<',1001);

      } elseif ($entryfee=3) {

        $query->where('entryfee','>',1000);

        $query->where('entryfee','<',5001);

      } elseif ($entryfee=4) {

        $query->where('entryfee','>',5000);

      }

    }



    //Win Amount Filter

    if($winning) {

      if($winning=1) {

        $query->where('win_amount','>',0);

        $query->where('win_amount','<',1001);

      } elseif ($winning=2) {

        $query->where('win_amount','>',1000);

        $query->where('win_amount','<',10001);

      } elseif ($winning=3) {

        $query->where('win_amount','>',10000);

        $query->where('win_amount','<',50001);

      } elseif ($winning=4) {

        $query->where('win_amount','>',50000);

      }

    }



    //Contest Type Filter

    if($contest_type) {

      if($contest_type=1) {

        $query->where('multi_entry',1);

      } elseif ($contest_type=2) {

        $query->where('confirmed_challenge',1);

      }

    }



    //Contest Size Filter

    if($contest_size) {

      if($contest_size=1) {

        $query->where('maximum_user',2);

      } elseif ($contest_size=2) {

        $query->where('maximum_user','>',2);

        $query->where('maximum_user','<',11);

      } elseif ($contest_size=3) {

        $query->where('maximum_user','>',10);

        $query->where('maximum_user','<',21);

      } elseif ($contest_size=4) {

        $query->where('maximum_user','>',20);

        $query->where('maximum_user','<',100);

      } elseif ($contest_size=5) {

        $query->where('maximum_user','>',100);

        $query->where('maximum_user','<',1001);

      } elseif ($contest_size=6) {

        $query->where('maximum_user','>',1000);

        $query->where('maximum_user','<',10001);

      } elseif ($contest_size=7) {

        $query->where('maximum_user','>',10000);

      }

    }



    //Filter Conditon End



    $query->select(DB::raw('MAX(matchpricecards.max_position) as winners,MAX(matchpricecards.price) as first_rank_prize'),'matchchallenges.*',DB::raw('"'.$joined_challenge_ids.'" as joined_challenge_ids,"'.$user_fav_contests_ids.'" as user_fav_contests_ids,"1" as get_challenge_new'));

    $query->leftJoin('matchpricecards','matchchallenges.id','=','matchpricecards.challenge_id');

    $allchallenges = $query->groupBy('matchchallenges.id')
    // ->orderBy('joinedusers','DESC')
    ->get()
    // ->where('matchchallenges.id', '10492909');
    ->whereNotIn('matchchallenges.id', $challenge_arr)
    ->unique('real_challenge_id')
    ->sortByDesc('win_amount');
    // echo $category_id; exit;
    // print_r($allchallenges); exit;
    return $allchallenges;die;


  }



    public function verifyPromoCode(Request $request){

      $this->validate($request,[

        'promo' => 'required',

        'user_id' => 'required'

      ]);

      $promocode = $request->promo;

      $userid = $request->user_id;



      $used = UsedOffer::where('offer_id',$promocode)->where('user_id',$userid)->get();

      // if($used->isEmpty()){

      $offers= Offer::where('code', $promocode)->first();
      if(!empty($offers)) {
      $promo_insert_data = array(

              "user_id" => $userid,

              "promo_code" => $promocode,

              "status" => 0,

            );

            $getId = DB::table('user_promo')->insertGetId($promo_insert_data);

            return Response::json([

              "status" => 1,

              "message" => "Valid Promo code",

              "promo_id" => $getId,
              "amount" => @$offers->maxamount ? $offers->maxamount : 0,

              "result" => ""

            ]);

          }



        /*foreach($offers as $o){

          if($promocode == $o->code){



          }

        }*/

        return Response::json([

          "status" => 0,

          "message" => "Invalid Promo code",

          "result" => ""

        ]);

      /*}else{

        return Response::json([

          "status" => 0,

          "message" => "Promo code Already Used",

          "result" => ""

        ]);

      }*/

  }





    public function categoryLeagues(Request $request) {
        // $app_off = Redis::hGet('app_setting_new','slow_app');
    if(@$app_off==1) {
        exit;
    }
    // Helpers::check_request($request->user_id, $_SERVER);

    $category_id = $request->category_id;

    $matchkey = $request->matchkey;

    $user_id = $request->user_id;



    $entryfee = $request->entryfee;

    $winning = $request->winning;

    $contest_type = $request->contest_type;

    $contest_size = $request->contest_size;

    $sport_type = (isset($request->sport_key) ? $request->sport_key : CRICKET);
    $fantasy_type = (isset($request->fantasy_type) ? $request->fantasy_type : 0);
    if($fantasy_type == 4){
  $fantasy_type = 0;
}
    $slotes_id = (isset($request->slotes_id) ? $request->slotes_id : 0);

    $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
    $sportId = $sportType->id;

    // $sportType = (object)array();


    // $findMatchesAll = DB::table('listmatches')->where('matchkey' , $matchkey)->get();
    // var_dump(count($findMatchesAll));exit;
// $sportId = 0;
// if(count($findMatchesAll) == 1){
  // $sportId = $findMatchesAll[0]->sport_type;
// }
    $joinedleauges=JoinedLeague::where('matchkey',$matchkey)->where('userid',$user_id)->where('sport_type',$sportId)->select('challengeid')->get();

    $challenge_arr = array();

    foreach ($joinedleauges as $key => $value) {

      $challenge_arr[] = $value->challengeid;

    }



    $leagues = $this->get_category_challenges($category_id, $matchkey, $user_id, $challenge_arr,$entryfee,$winning,$contest_type,$contest_size,$fantasy_type , $slotes_id,$sportId);

    // print_r($leagues);die;

    // $contest_resource = LeagueListResource_new::collection($leagues)->all();
    // $filtered = $contest_resource->where('id', 10492909);
    // $filtered->all();
    // print_r($contest_resource); exit;
    return Response::json(["status" => STATUS_SUCCESS,"result"=> ["contest"=> array_values(array_filter(json_decode(json_encode(LeagueListResource::collection($leagues)), true))),

        "user_teams"=> 0,

        "joinedleauges"=> 0]

        ]);   die;

    echo json_encode($leagues); exit;

  }


    public function refercodechallenge(Request $request){

      $this->validate($request,[

        'userid' => 'required',

        'matchkey' => 'required',

        'challengeid' => 'required',

      ]);

      $matchkey = $data['matchkey'] =  $request->matchkey;

      $userid =  $data['userid'] =  $request->userid;

      $challengeid =  $data['challengeid'] =  $request->challengeid;

      $finjoinleauge = JoinedLeague::where('joinedleauges.matchkey',$matchkey)->where('joinedleauges.userid',$userid)->where('challengeid',$challengeid)->select('joinedleauges.refercode','joinedleauges.id')->first();

      if(!empty($finjoinleauge)){

        $refercode = $finjoinleauge->refercode;

        $Json[0]['refercode'] = $refercode;

        $Json[0]['id'] = $finjoinleauge->id;

      }else{

        $Json[0]['refercode'] = 0;

        $Json[0]['id'] = 0;

      }

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

      die;

    }

    public function aboutToExpire(){

      date_default_timezone_set("Asia/Kolkata");

      $currentdate = $this->getDateCommon();

      $prevdate = date('Y-m-d',strtotime(Carbon::now()->subDays(45)));

      //364 days

      // $prevdate = date('Y-m-d',strtotime(Carbon::now()->subDays(59)));

      $findallusers = RegisterUser::select('id')->get();

      foreach($findallusers as $fusers){

        $userid = $fusers->id;

        $balancebnuss = array();

        $balancebnuss = Transaction::where('created','<',$prevdate)->where('userid',$userid)->orderBy('id','DESC')->select('bal_bonus_amt','userid','created')->first();

        if(!empty($balancebnuss)){

            $totalbonus = 0;

            $consumedbnus = 0;

            $expireamount = 0;

            $totalbonus = $balancebnuss->bal_bonus_amt;

            $findconsumedbonus = Transaction::whereDate('created','>=',$prevdate)->whereDate('created','<',$currentdate)->where('userid',$userid)->orderBy('id','DESC')->select('cons_bonus','created')->get();

            if(!is_null($findconsumedbonus)){

              foreach($findconsumedbonus as $bnfind){

                $consumedbnus+=$bnfind->cons_bonus;

              }

            }

            if($consumedbnus<$totalbonus){

              $expireamount = $totalbonus-$consumedbnus;

            }

            if($expireamount>0){

              $findcurrentbalance = UserBalance::where('user_id',$userid)->first();

              $getbonus = $findcurrentbalance->bonus;

              if($getbonus>=$expireamount){

                $dataupdate['bonus'] = $getbonus-$expireamount;

                $nowbalance = $dataupdate['bonus']+$findcurrentbalance->balance+$findcurrentbalance->winning;

                // echo "<pre>";

                // print_r($dataupdate);

                UserBalance::where('user_id',$userid)->update($dataupdate);



                //start entry in transaction table//

                $findlasttransactionid= Transaction::orderBy('id','DESC')->select('id')->first();

                $tranid = 1;

                if(!empty($findlasttransactionid)){

                  $tranid = $findlasttransactionid->id+1;

                }else{

                  $tranid = 1;

                }

                $transactiondata['type'] = 'Bonus Expired';

                $transactiondata['amount'] = $expireamount;

                $transactiondata['total_available_amt'] = $nowbalance;

                $transactiondata['transaction_by'] = WALLET;

                $transactiondata['userid'] = $userid;

                $transactiondata['paymentstatus'] = CONFIRMED;

                $transactiondata['cons_bonus'] = $expireamount;

                $transactiondata['bal_bonus_amt'] = $dataupdate['bonus'];

                $transactiondata['bal_win_amt'] = $findcurrentbalance->winning;

                $transactiondata['bal_fund_amt'] = $findcurrentbalance->balance;

                $transactiondata['bal_fund_amt'] = $findcurrentbalance->balance;

                $transactiondata['transaction_id'] = 'BBF-EX-'.$tranid.'-'.$userid;

                // to enter in joined leauges table//

                $data['transaction_id'] = 'BBF-JL-'.$tranid.'-'.$userid;

                Transaction::insert($transactiondata);

                //end entry in transaction table//

              }

           }

        }

      }

      die;

    }


    public function joinByCode(Request $request){

       $this->validate($request,[

        'getcode' => 'required',

        // 'matchkey' => 'required',

        'user_id' => 'required'

      ]);

      $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
  $sportType = DB::table('sport_types')->where('sport_key' , $sport_key)->first();
      $invitecode = $request->getcode;

      $user_id = $request->user_id;

      $get_match_key = JoinedLeague::where('refercode',$invitecode)->where('matchkey' , $request->matchkey)->first();



      if (isset($get_match_key)) {

        $matchkey = $get_match_key->matchkey;

      } else {


        $Json[0]['message'] = 'Contest Code does not exist on this match.';

      return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['message'],"result"=>$Json]);


      die;

      }

      $findchallenge = JoinedLeague::join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')->where('joinedleauges.matchkey',$matchkey)->where('joinedleauges.refercode',$invitecode)->select('matchchallenges.status','matchchallenges.entryfee','matchchallenges.marathon','matchchallenges.series_id','joinedleauges.*')->first();

      if(!empty($findchallenge)){

          $joinedchll = JoinedLeague::where('challengeid',$findchallenge->challengeid)->where('userid',$user_id)->select('id')->first();

          if(!empty($joinedchll)){

            $Json[0]['message'] = 'Already used';

            $Json[0]['marathon'] = 0;

      return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['message'],"result"=>$Json]);



          }

          else{

            if($findchallenge->status=='closed'){

              $Json[0]['message'] = 'Challenge closed';

              // $Json[0]['challengeid'] = 938521;

              // $Json[0]['entryfee'] = 0;

              $Json[0]['marathon'] = 0;

      return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['message'],"result"=>$Json]);



            }

            else{

              $Json[0]['message'] = 'Challenge opened';

              $Json[0]['challengeid'] = $findchallenge->challengeid;

              $Json[0]['entryfee'] = $findchallenge->entryfee;

              $Json[0]['marathon'] = 0;



              //Filter Conditon End
              $joinedleauges = JoinedLeague::where('matchkey',$matchkey)->where('userid',$user_id)->where('sport_type',$sportType->id)->select('challengeid')->get();

              $challenge_arr = array();

              foreach ($joinedleauges as $key => $value) {

                $challenge_arr[] = $value->challengeid;

              }

              if(!empty($challenge_arr)) {
                $joined_challenge_ids = implode(',', $challenge_arr);
              } else {
                $joined_challenge_ids = '';
              }

              $query = MatchChallenge::where('matchchallenges.matchkey',$matchkey)->where('matchchallenges.status','=','opened')->where('matchchallenges.sport_type',$sportType->id);

              $contestdb = $query->leftJoin('matchpricecards','matchchallenges.id','=','matchpricecards.challenge_id')
                              ->whereRaw('((SELECT COUNT(id) FROM joinedleauges WHERE challengeid = matchchallenges.id AND userid = "'.$user_id.'") = 0 OR matchchallenges.multi_entry = 1)')
                              ->where('matchchallenges.id' , $findchallenge->challengeid)
                              ->select('matchchallenges.*',DB::raw('(SELECT IF(COUNT(*) > 0, 1, 0) FROM user_favourite_contest WHERE user_id = '.$user_id.' and challenge_id = matchchallenges.real_challenge_id) as is_selected,SUM(matchpricecards.winners) as winners, MAX(matchpricecards.price) as first_rank_prize,"'.$joined_challenge_ids.'" as joined_challenge_ids'))->first();

              $Json[0]['contest'] = new LeagueListResource($contestdb);


      return Response::json(["status" => STATUS_SUCCESS,"message"=>$Json[0]['message'],"result"=>$Json]);



            }

          }

      }else{

        $Json[0]['message'] = 'Invalid code';

      return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['message'],"result"=>$Json]);



      }

      return Response::json(["status" => STATUS_SUCCESS,"message"=>$Json[0]['message'],"result"=>$Json]);

      die;

    }



    public function getteamtoshow(Request $request){
      // dd('dfsadf');

      //       $myfile = fopen("test.txt", "w") or die("Unable to open file!");
      //
      //       $txt = json_encode($request->all());
      //
      //       fwrite($myfile, $txt);
      //
      //
      //       fclose($myfile);
      //
      // $this->validateLogin($request->user_id);
      $this->validate($request,[

        'user_id' => 'required',

      ]);

      $challenge = $data['challenge'] =  $request->challenge;

      $userid =  $data['userid'] =  $request->user_id;
      $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
      $slotes_id = (isset($request->slotes_id) ? $request->slotes_id : 0);
      $fantasy_type = (isset($request->fantasy_type) ? $request->fantasy_type : 0);
      if($fantasy_type == 4){
        $fantasy_type = 0;
      }
      // $sportType = DB::table('sport_types')->where('sport_key' , $sport_key)->first();
      $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);

      if(isset($request->joinid)){

        $joinid =  $data['joinid'] =  $request->joinid;


        if(!empty($challenge)){
        $finduserteam = $team = JoinedLeague::where('joinedleauges.challengeid',$challenge)->where('joinedleauges.userid',$userid)->where('joinedleauges.sport_type',$sportType->id)->where('joinedleauges.id',$joinid)->join('jointeam','jointeam.id','=','joinedleauges.teamid')->join('registerusers','registerusers.id','=','joinedleauges.userid')->select('jointeam.*','registerusers.email','registerusers.team as userteam')->first();



        }

      }

      else{

        $teamid =  $data['teamid'] =  $request->teamid;

        $finduserteam = $team = JoinTeam::where('jointeam.id',$teamid)->join('registerusers','registerusers.id','=','jointeam.userid')->select('jointeam.*','registerusers.email','registerusers.team as userteam')->first();



      }

      $findmatch = ListMatch::where('matchkey',$finduserteam->matchkey)->where('listmatches.sport_type',$sportType->id)->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')->select('listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.team2display','t1.color as team1color','t2.color as team2color','listmatches.start_date')->first();

      if($finduserteam->userid != $userid) {
          $matchkey = $finduserteam->matchkey;
          $sport_type = $finduserteam->sport_type;
          // $match = ListMatch::where('matchkey', $matchkey)->where('sport_type', $sport_type)->first();
          if(!empty($findmatch)) {
            $getcurrentdate = date('Y-m-d H:i:s');

            $matchremainingdate = @$findmatch->start_date;

            if($getcurrentdate<$matchremainingdate){

              $Json[0]['message'] = 'Cannot see teams before match start';

              // return Response::json(["status"=>STATUS_FAILURE,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);

              // die;

              // echo json_encode($Json);die;

            }
          }
        }



      $Json=array();

      $bowlers=array();

      $batsman=array();

      $keeper=array();

      $allrounder=array();



      if(!is_null($finduserteam)){

        if($finduserteam->userteam!=""){

          $Json['teamname'] = ucwords($finduserteam->userteam);

        }else{

          $Json['teamname'] = $finduserteam->email;

        }

        $Json['teamnumber'] = $finduserteam->teamnumber;

        $Json['points'] = $finduserteam->points;

        $Json['status'] = 1;


        $playersget = $finduserteam->players;


        if($playersget!=""){

          $playersarr = explode(',',$finduserteam->players);

          // $findmatch = ListMatch::where('matchkey',$finduserteam->matchkey)->where('listmatches.sport_type',$sportType->id)->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')->select('listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.team2display','t1.color as team1color','t2.color as team2color')->first();

        $Json['lineup'] = !empty($findmatch->player_ids) ? 1 : 0;
        $Json['lineup'] = 1;

        $boplayerdetails=$batplayerdetails=$keeprdetails=$allrundetails=[];

        $resplayerdetails = MatchPlayer::whereIn('matchplayers.playerid',$playersarr)->where('matchkey',$finduserteam->matchkey)->where('matchplayers.sport_type',$sportType->id)

        ->join('players','matchplayers.playerid','=','players.id')
        ->where('players.sport_type',$sportType->id)
        ->join('playerdetails','playerdetails.player_key','=','players.player_key')
        ->where('playerdetails.sport_type',$sportType->id)
        ->select('players.team','matchplayers.role as playerrole','matchplayers.credit as playercredit','matchplayers.role','matchplayers.points as playerpoints','matchplayers.name as playername','matchplayers.playerid as pid','playerdetails.image as image')->groupBy('matchplayers.playerid')->get();

if($fantasy_type == 1 && $slotes_id != 0){
  $resplayerdetails = MatchPlayer::whereIn('matchplayers.playerid',$playersarr)->where('matchkey',$finduserteam->matchkey)->where('matchplayers.sport_type',$sportType->id)
    ->leftJoin('live_fantasy_player_points AS l', function($join){
              $join->on('l.match_key', '=', 'matchplayers.matchkey');
              $join->on('l.player_id', '=', 'matchplayers.playerid');
          })
  ->join('players','matchplayers.playerid','=','players.id')
  ->where('players.sport_type',$sportType->id)
  ->join('playerdetails','playerdetails.player_key','=','players.player_key')
  ->where('playerdetails.sport_type',$sportType->id)
  ->select('players.team','matchplayers.role as playerrole','matchplayers.credit as playercredit','matchplayers.role','l.points as playerpoints','matchplayers.name as playername','matchplayers.playerid as pid','playerdetails.image as image')->groupBy('matchplayers.playerid')->get();


}

if($fantasy_type == 2){

  $resplayerdetails = MatchPlayer::whereIn('matchplayers.playerid',$playersarr)->where('matchkey',$finduserteam->matchkey)->where('matchplayers.sport_type',$sportType->id)

  ->join('players','matchplayers.playerid','=','players.id')
  ->where('players.sport_type',$sportType->id)
  ->join('playerdetails','playerdetails.player_key','=','players.player_key')
  ->where('playerdetails.sport_type',$sportType->id)
  ->select('players.team','matchplayers.role as playerrole','matchplayers.credit as playercredit','matchplayers.role','matchplayers.batting_points as playerpoints','matchplayers.name as playername','matchplayers.playerid as pid','playerdetails.image as image')->groupBy('matchplayers.playerid')->get();


}

if($fantasy_type == 3){

  $resplayerdetails = MatchPlayer::whereIn('matchplayers.playerid',$playersarr)->where('matchkey',$finduserteam->matchkey)->where('matchplayers.sport_type',$sportType->id)

  ->join('players','matchplayers.playerid','=','players.id')
  ->where('players.sport_type',$sportType->id)
  ->join('playerdetails','playerdetails.player_key','=','players.player_key')
  ->where('playerdetails.sport_type',$sportType->id)
  ->select('players.team','matchplayers.role as playerrole','matchplayers.credit as playercredit','matchplayers.role','matchplayers.bowling_points as playerpoints','matchplayers.name as playername','matchplayers.playerid as pid','playerdetails.image as image')->groupBy('matchplayers.playerid')->get();


}



if($fantasy_type == 5){

  $resplayerdetails = MatchPlayer::whereIn('matchplayers.playerid',$playersarr)->where('matchkey',$finduserteam->matchkey)->where('matchplayers.sport_type',$sportType->id)

  ->join('players','matchplayers.playerid','=','players.id')
  ->where('players.sport_type',$sportType->id)
  ->join('playerdetails','playerdetails.player_key','=','players.player_key')
  ->where('playerdetails.sport_type',$sportType->id)
  ->select('players.team','matchplayers.role as playerrole','matchplayers.credit as playercredit','matchplayers.role','matchplayers.reverse_points as playerpoints','matchplayers.name as playername','matchplayers.playerid as pid','playerdetails.image as image')->groupBy('matchplayers.playerid')->get();


}

         foreach($resplayerdetails as $row){
          /*if(!empty($findmatch->player_ids)) {
            if(in_array($row->pid, unserialize($findmatch->player_ids))) {
                $row->is_playing = 1;
            } else {
              $row->is_playing = 0;
            }
          } else {
            $row->is_playing = 0;
          }
          $row->is_playing = rand(0,1);
          $row->is_playing_show = rand(1);*/

          if(is_null($row->playerpoints)){ $row->playerpoints = 0;}
             if($row->role=="bowler"){

               $boplayerdetails[]=$row;

             } elseif($row->role=="batsman") {

               $batplayerdetails[]=$row;

             } elseif($row->role=="keeper") {

               $keeprdetails[]=$row;

             } elseif($row->role=="allrounder" && $sportType->id!=7) {

               $allrundetails[]=$row;

             } else {
         $row->id = $row->pid;
         $row->name = $row->playername;
         $row->credit = $row->playercredit;
        if($row->team == $findmatch->team1){
          $row->team = 'team1';
          $row->teamcolor = ucwords(str_replace(' ','-',$findmatch->team1color));
        } else if($row->team == $findmatch->team2){
          $row->team = 'team2';
          $row->teamcolor = ucwords(str_replace(' ','-',$findmatch->team2color));
        }
        $row->vicecaptain = 0;
          $row->captain = 0;
          $row->totalpoints = $row->playerpoints;
          $row->points = $row->playerpoints;
        if($team->vicecaptain == $row->pid){
          $row->vicecaptain = 1;
          $row->totalpoints = 1.5*$row->playerpoints;
          $row->points = 1.5*$row->playerpoints;
        }
        if($team->captain == $row->pid){
          $row->captain = 1;
          $row->totalpoints = 2*$row->playerpoints;
          $row->points = 2*$row->playerpoints;
        }
        $row->image = PLAYERS_DIRECTORY_URL.$row->image;
        if($sportType->id==7) {
            if($row->role=='allrounder') {
                $row->role='Defender';
            }
            else if($row->role=='defender') {
                $row->role='Goalkeeper';
            }
            else if($row->role=='raider') {
                $row->role='Forward';
            }
            $Json[ucfirst($row->role)][] = $row;
        } else {

            $Json[ucfirst($row->role)][] = $row;
        }
             }

         }
         $resultmatchesarr=[];


         $resultset = array();
          foreach($resultset as $row){

            $resultmatchesarr[$row->playerid][]=$row;

          }



          if(!empty($boplayerdetails)){
            if($request->fantasy_type != 5 AND $request->fantasy_type != 0){
              $Json['batsman'] = [];
              $Json['keeper'] = [];
              $Json['allrounder'] = [];
            }

            $j=0;

            foreach($boplayerdetails as $bowler){

              $Json['bowler'][$j]['id'] = $bowler->pid;

              $Json['bowler'][$j]['name'] = $bowler->playername;

              $Json['bowler'][$j]['role'] = $bowler->playerrole;

              $Json['bowler'][$j]['credit'] = $bowler->playercredit;

              if($bowler->team==$findmatch->team1){

                $Json['bowler'][$j]['team'] = 'team1';

                $Json['bowler'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team1color));

              }

              if($bowler->team==$findmatch->team2){

                $Json['bowler'][$j]['team'] = 'team2';

                $Json['bowler'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team2color));

              }

              $vicecaptain=0;

              $captain=0;

              if($team->vicecaptain==$bowler->pid){

                $vicecaptain=1;

              }

              if($team->captain==$bowler->pid){

                $captain=1;

              }

              $Json['bowler'][$j]['vicecaptain'] = $vicecaptain;

              $Json['bowler'][$j]['image'] = $bowler->image;



              $Json['bowler'][$j]['captain'] = $captain;

              if($vicecaptain==1){

                $Json['bowler'][$j]['totalpoints'] = 1.5*$bowler->playerpoints;

                $Json['bowler'][$j]['points'] = 1.5*$bowler->playerpoints;



              }

              else if($captain==1){

                $Json['bowler'][$j]['totalpoints'] = 2*$bowler->playerpoints;

                $Json['bowler'][$j]['points'] = 2*$bowler->playerpoints;



              }else{

                $Json['bowler'][$j]['totalpoints'] = $bowler->playerpoints;

                $Json['bowler'][$j]['points'] = $bowler->playerpoints;



              }

              $Json['bowler'][$j]['image'] = PLAYERS_DIRECTORY_URL.$bowler->image;



               $calculatepoints=(isset($resultmatchesarr[$bowler->pid]))?$resultmatchesarr[$bowler->pid]:[];

              //$calculatepoints= DB::table('resultmatches')->where('match_key',$finduserteam->matchkey)->where('player_id',$bowler->pid)->select('starting11','batting_points','bowling_points','fielding_points','negative_points','extra_points')->get();

        //      echo '<pre>'; print_r($calculatepoints); die;

              if(!empty($calculatepoints)){

                foreach($calculatepoints as $cal){

                  $Json['bowler'][$j]['startingpoints'] = $cal->startingpoints;

                  $Json['bowler'][$j]['runs'] = $cal->runs;

                  $Json['bowler'][$j]['fours'] = $cal->fours;

                  $Json['bowler'][$j]['sixs'] = $cal->sixs;

                  $Json['bowler'][$j]['strike_rate'] = $cal->strike_rate;

                  $Json['bowler'][$j]['halfcenturyPoints'] = $cal->halcentury;

                  $Json['bowler'][$j]['point150'] = $cal->point150;

                  $Json['bowler'][$j]['point200'] = $cal->point200;

                  $Json['bowler'][$j]['not_out'] = $cal->not_out;

                  $Json['bowler'][$j]['winner_point'] = $cal->winner_point;

                  $Json['bowler'][$j]['negative'] = $cal->duck;

                  $Json['bowler'][$j]['century'] = $cal->century;

                  $Json['bowler'][$j]['wickets'] = $cal->wickets;

                  $Json['bowler'][$j]['maidens'] = $cal->maidens;

                  $Json['bowler'][$j]['duck'] = $cal->duck;

                  $Json['bowler'][$j]['economy_rate'] = $cal->economy_rate;

                  $Json['bowler'][$j]['runouts'] = $cal->runouts;

                  $Json['bowler'][$j]['catch_pt'] = $cal->catch_point;

                  $Json['bowler'][$j]['stumping'] = $cal->stumping;

                  $Json['bowler'][$j]['total'] = $cal->total;

                  $Json['bowler'][$j]['pointss'] = $cal->total;

                  $Json['bowler'][$j]['playerkey'] = 'playerkey';

                  $Json['bowler'][$j]['isSelected'] = true;

                  $Json['bowler'][$j]['playing_11'] = 1;

                  $Json['bowler'][$j]['selected_by'] = "";

                  $Json['bowler'][$j]['image'] = isset($cal->image) || !is_null($cal->image) ? PLAYERS_DIRECTORY_URL.$cal->image : PLAYERS_DIRECTORY_URL.'FANLINE11-player-7243.png';

                }

              }

              $j++;

            }

          }

        }




        if(!empty($batplayerdetails)){

          if($request->fantasy_type != 5  AND $request->fantasy_type != 0){
            $Json['allrounder'] = [];
            $Json['bowler'] = [];
            $Json['keeper'] = [];
          }
            $j=0;

            foreach($batplayerdetails as $batman){

              $Json['batsman'][$j]['id'] = $batman->pid;

              $Json['batsman'][$j]['name'] = $batman->playername;

              $Json['batsman'][$j]['role'] = $batman->playerrole;

              $Json['batsman'][$j]['credit'] = $batman->playercredit;

              if($batman->team==$findmatch->team1){

                $Json['batsman'][$j]['team'] = 'team1';

                $Json['batsman'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team1color));

              }

              if($batman->team==$findmatch->team2){

                $Json['batsman'][$j]['team'] = 'team2';

                $Json['batsman'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team2color));

              }

              $vicecaptain=0;

              $captain=0;

              if($team->vicecaptain==$batman->pid){

                $vicecaptain=1;

              }

              if($team->captain==$batman->pid){

                $captain=1;

              }

              if($vicecaptain==1){

                $Json['batsman'][$j]['totalpoints'] = 1.5*$batman->playerpoints;

                $Json['batsman'][$j]['points'] = 1.5*$batman->playerpoints;



              }

              else if($captain==1){

                $Json['batsman'][$j]['totalpoints'] = 2*$batman->playerpoints;

                $Json['batsman'][$j]['points'] = 2*$batman->playerpoints;



              }else{

                $Json['batsman'][$j]['totalpoints'] = $batman->playerpoints;

                $Json['batsman'][$j]['points'] = $batman->playerpoints;



              }
              $Json['batsman'][$j]['image'] = isset($batman->image) || !is_null($batman->image) ? PLAYERS_DIRECTORY_URL.$batman->image : PLAYERS_DIRECTORY_URL.'FANLINE11-player-7243.png';

              if($batman->pid==9008) {

                // print_r($Json); exit;

              }

              $Json['batsman'][$j]['vicecaptain'] = $vicecaptain;

              $Json['batsman'][$j]['captain'] = $captain;



                                                   $calculatepoints=(isset($resultmatchesarr[$batman->pid]))?$resultmatchesarr[$batman->pid]:[];

              //$calculatepoints= DB::table('resultmatches')->where('match_key',$finduserteam->matchkey)->where('player_id',$batman->pid)->select('starting11','batting_points','bowling_points','fielding_points','negative_points','extra_points')->get();

              if(!empty($calculatepoints)){

                 foreach($calculatepoints as $cal){

                  $Json['batsman'][$j]['startingpoints'] = $cal->startingpoints;

                  $Json['batsman'][$j]['runs'] = $cal->runs;

                  $Json['batsman'][$j]['fours'] = $cal->fours;

                  $Json['batsman'][$j]['sixs'] = $cal->sixs;

                  $Json['batsman'][$j]['strike_rate'] = $cal->strike_rate;

                  $Json['batsman'][$j]['halfcenturyPoints'] = $cal->halcentury;

                  $Json['batsman'][$j]['century'] = $cal->century;

                  $Json['batsman'][$j]['not_out'] = $cal->not_out;

                  $Json['batsman'][$j]['winner_point'] = $cal->winner_point;

                  $Json['batsman'][$j]['negative'] = $cal->duck;

                  $Json['batsman'][$j]['point150'] = $cal->point150;

                  $Json['batsman'][$j]['point200'] = $cal->point200;

                  $Json['batsman'][$j]['wickets'] = $cal->wickets;

                  $Json['batsman'][$j]['maidens'] = $cal->maidens;

                  $Json['batsman'][$j]['economy_rate'] = $cal->economy_rate;

                  $Json['batsman'][$j]['runouts'] = $cal->runouts;

                  $Json['batsman'][$j]['catch_pt'] = $cal->catch_point;

                  $Json['batsman'][$j]['stumping'] = $cal->stumping;

                  $Json['batsman'][$j]['total'] = $cal->total;

                  $Json['batsman'][$j]['pointss'] = $cal->total;

                  $Json['batsman'][$j]['negative'] = $cal->negative;

                  $Json['batsman'][$j]['playerkey'] = 'playerkey';

                  $Json['batsman'][$j]['isSelected'] = true;

                  $Json['batsman'][$j]['playing_11'] = 1;

                  $Json['batsman'][$j]['selected_by'] = "";

                  $Json['batsman'][$j]['image'] = isset($cal->image) || !is_null($cal->image) ? PLAYERS_DIRECTORY_URL.$cal->image : PLAYERS_DIRECTORY_URL.'FANLINE11-player-7243.png';



                 }

              }

              $j++;

            }

          }

          if(!empty($keeprdetails)){
            $j=0;

            foreach($keeprdetails as $keeper){

              $Json['keeper'][$j]['id'] = $keeper->pid;

              $Json['keeper'][$j]['name'] = $keeper->playername;

              $Json['keeper'][$j]['role'] = $keeper->playerrole;

              $Json['keeper'][$j]['credit'] = $keeper->playercredit;

              if($keeper->team==$findmatch->team1){

                $Json['keeper'][$j]['team'] = 'team1';

                $Json['keeper'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team1color));

              }

              if($keeper->team==$findmatch->team2){

                $Json['keeper'][$j]['team'] = 'team2';

                $Json['keeper'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team2color));

              }

              $vicecaptain=0;

              $captain=0;

              if($team->vicecaptain==$keeper->pid){

                $vicecaptain=1;

              }

              if($team->captain==$keeper->pid){

                $captain=1;

              }

              if($vicecaptain==1){

                $Json['keeper'][$j]['totalpoints'] = 1.5*$keeper->playerpoints;

                $Json['keeper'][$j]['points'] = 1.5*$keeper->playerpoints;



              }

              else if($captain==1){

                $Json['keeper'][$j]['totalpoints'] = 2*$keeper->playerpoints;

                $Json['keeper'][$j]['points'] = 2*$keeper->playerpoints;



              }else{

                $Json['keeper'][$j]['totalpoints'] = $keeper->playerpoints;

                $Json['keeper'][$j]['points'] = $keeper->playerpoints;



              }

              $Json['keeper'][$j]['image'] = PLAYERS_DIRECTORY_URL.$keeper->image;



              $Json['keeper'][$j]['vicecaptain'] = $vicecaptain;

              $Json['keeper'][$j]['captain'] = $captain;

                          $calculatepoints=(isset($resultmatchesarr[$keeper->pid]))?$resultmatchesarr[$keeper->pid]:[];

              //$calculatepoints= DB::table('resultmatches')->where('match_key',$finduserteam->matchkey)->where('player_id',$keeper->pid)->select('starting11','batting_points','bowling_points','fielding_points','negative_points','extra_points')->get();

              if(!empty($calculatepoints)){

                foreach($calculatepoints as $cal){

                  $Json['keeper'][$j]['startingpoints'] = $cal->startingpoints;

                  $Json['keeper'][$j]['runs'] = $cal->runs;

                  $Json['keeper'][$j]['fours'] = $cal->fours;

                  $Json['keeper'][$j]['sixs'] = $cal->sixs;

                  $Json['keeper'][$j]['strike_rate'] = $cal->strike_rate;

                  $Json['keeper'][$j]['halfcenturyPoints'] = $cal->halcentury;

                  $Json['keeper'][$j]['century'] = $cal->century;

                  $Json['keeper'][$j]['point150'] = $cal->point150;

                  $Json['keeper'][$j]['point200'] = $cal->point200;

                    $Json['keeper'][$j]['not_out'] = $cal->not_out;

                  $Json['keeper'][$j]['winner_point'] = $cal->winner_point;

                  $Json['keeper'][$j]['negative'] = $cal->duck;

                  $Json['keeper'][$j]['wickets'] = $cal->wickets;

                  $Json['keeper'][$j]['maidens'] = $cal->maidens;

                  $Json['keeper'][$j]['economy_rate'] = $cal->economy_rate;

                  $Json['keeper'][$j]['runouts'] = $cal->runouts;

                  $Json['keeper'][$j]['catch_pt'] = $cal->catch_point;

                  $Json['keeper'][$j]['stumping'] = $cal->stumping;

                  $Json['keeper'][$j]['total'] = $cal->total;

                  $Json['keeper'][$j]['pointss'] = $cal->total;

                  $Json['keeper'][$j]['negative'] = $cal->negative;

                  $Json['keeper'][$j]['playerkey'] = 'playerkey';

                  $Json['keeper'][$j]['isSelected'] = true;

                  $Json['keeper'][$j]['playing_11'] = 1;

                  $Json['keeper'][$j]['selected_by'] = "";

                  $Json['keeper'][$j]['image'] = isset($cal->image) || !is_null($cal->image) ? PLAYERS_DIRECTORY_URL.$cal->image : PLAYERS_DIRECTORY_URL.'FANLINE11-player-7243.png';



                }

              }

              $j++;

            }

          }

          if(!empty($allrundetails)){

            $j=0;

            foreach($allrundetails as $allrounder){

              $Json['allrounder'][$j]['id'] = $allrounder->pid;

              $Json['allrounder'][$j]['name'] = $allrounder->playername;

              $Json['allrounder'][$j]['role'] = $allrounder->playerrole;

              $Json['allrounder'][$j]['credit'] = $allrounder->playercredit;

              if($allrounder->team==$findmatch->team1){

                $Json['allrounder'][$j]['team'] = 'team1';

                $Json['allrounder'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team1color));



              }

              if($allrounder->team==$findmatch->team2){

                $Json['allrounder'][$j]['team'] = 'team2';

                $Json['allrounder'][$j]['teamcolor'] = ucwords(str_replace(' ','-',$findmatch->team2color));

              }

              $vicecaptain=0;

              $captain=0;

              if($team->vicecaptain==$allrounder->pid){

                $vicecaptain=1;

              }

              if($team->captain==$allrounder->pid){

                $captain=1;

              }

              if($vicecaptain==1){

                $Json['allrounder'][$j]['totalpoints'] = 1.5*$allrounder->playerpoints;

                $Json['allrounder'][$j]['points'] = 1.5*$allrounder->playerpoints;



              }

              else if($captain==1){

                $Json['allrounder'][$j]['totalpoints'] =2*$allrounder->playerpoints;

                $Json['allrounder'][$j]['points'] = 2*$allrounder->playerpoints;



              }else{

                $Json['allrounder'][$j]['totalpoints'] = $allrounder->playerpoints;

                $Json['allrounder'][$j]['points'] = $allrounder->playerpoints;



              }

              $Json['allrounder'][$j]['vicecaptain'] = $vicecaptain;

              $Json['allrounder'][$j]['image'] = PLAYERS_DIRECTORY_URL.$allrounder->image;



              $Json['allrounder'][$j]['captain'] = $captain;

                          $calculatepoints=(isset($resultmatchesarr[$allrounder->pid]))?$resultmatchesarr[$allrounder->pid]:[];

              //$calculatepoints= DB::table('resultmatches')->where('match_key',$finduserteam->matchkey)->where('player_id',$allrounder->pid)->select('starting11','batting_points','bowling_points','fielding_points','negative_points','extra_points')->get();

              if(!empty($calculatepoints)){

                foreach($calculatepoints as $cal){

                  $Json['allrounder'][$j]['startingpoints'] = $cal->startingpoints;

                  $Json['allrounder'][$j]['runs'] = $cal->runs;

                  $Json['allrounder'][$j]['fours'] = $cal->fours;

                  $Json['allrounder'][$j]['sixs'] = $cal->sixs;

                  $Json['allrounder'][$j]['strike_rate'] = $cal->strike_rate;

                  $Json['allrounder'][$j]['halfcenturyPoints'] = $cal->halcentury;

                  $Json['allrounder'][$j]['century'] = $cal->century;

                  $Json['allrounder'][$j]['point150'] = $cal->point150;

                  $Json['allrounder'][$j]['point200'] = $cal->point200;

                  $Json['allrounder'][$j]['not_out'] = $cal->not_out;

                  $Json['allrounder'][$j]['winner_point'] = $cal->winner_point;

                  $Json['allrounder'][$j]['negative'] = $cal->duck;

                  $Json['allrounder'][$j]['wickets'] = $cal->wickets;

                  $Json['allrounder'][$j]['maidens'] = $cal->maidens;

                  $Json['allrounder'][$j]['economy_rate'] = $cal->economy_rate;

                  $Json['allrounder'][$j]['runouts'] = $cal->runouts;

                  $Json['allrounder'][$j]['catch_pt'] = $cal->catch_point;

                  $Json['allrounder'][$j]['stumping'] = $cal->stumping;

                  $Json['allrounder'][$j]['total'] = $cal->total;

                  $Json['allrounder'][$j]['pointss'] = $cal->total;

                  $Json['allrounder'][$j]['negative'] = $cal->negative;

                  $Json['allrounder'][$j]['playerkey'] = 'playerkey';

                  $Json['allrounder'][$j]['isSelected'] = true;

                  $Json['allrounder'][$j]['playing_11'] = 1;

                  $Json['allrounder'][$j]['selected_by'] = "";

                  $Json['allrounder'][$j]['image'] = isset($cal->image) || !is_null($cal->image) ? PLAYERS_DIRECTORY_URL.$cal->image : PLAYERS_DIRECTORY_URL.'FANLINE11-player-7243.png';

                }

              }

              $j++;

            }

          }

        }else{

          $Json['status'] = 0;

        }



        return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

        die;

      }

    public function leaderboard_old(Request $request) {
        date_default_timezone_set("Asia/Kolkata");
        $date = $this->getDateCommon();
        // $this->validateLogin($request->user_id);
        $this->validate($request,[

          'user_id' => 'required',

          'matchkey' => 'required',

          // 'page' => 'required',

          'challenge_id' => 'required'

        ]);


        $sport_type = (isset($request->sport_key) ? $request->sport_key : 'cricket');
        $sportType = (object)array();
        $sportType->id = Helpers::get_sport_type($request->sport_key);
        $matchkey="";

        $page_limit = 300;

        if(!empty($request->matchkey)){

            $matchkey = $request->matchkey;

        }

        $page_offset = 0;

        if(!empty($request->page)){

            $page = $request->page;

            $page_offset = (($page - 1) * $page_limit);

        }

        $listmatchestartdate = DB::table('listmatches')->where('matchkey',$matchkey)->where('sport_type',$sportType->id)->select('start_date' , 'is_live_fantasy_enable','final_status')->first();

        $userid = $request->user_id;

        $challenge_id = $request->challenge_id;
        $fantasy_type = $request->fantasy_type;
        if($date < $listmatchestartdate->start_date) {
            return $this->league_detail2($matchkey, $challenge_id, $userid);
        }

        if($listmatchestartdate->start_date < '2021-09-29 11:00:00' || $listmatchestartdate->final_status=='winnerdeclared' || $fantasy_type==5) {
            return $this->leaderboard3($request);
        }

        $leaderboard_user_count = Redis::zCount($challenge_id, 0, 30000);

        if($leaderboard_user_count == 0) {
            return $this->league_detail2($matchkey, $challenge_id, $userid);
        }

        $updatedData = Redis::zRevRangeByScore($challenge_id, 10000,0, ['withscores' => true,'limit' => ['offset' => $page_offset, 'count'=>$page_limit]]);
        $user_redis_data = array();
        $ret = Redis::pipeline();
        foreach ($updatedData as $key => $value) {
             $ids = explode(':',$key);
            Redis::hGetAll('team_'.$ids[0].'_'.$ids[1]);
        }
        $red_data = $ret->exec();
        foreach($red_data as $key => $value) {
            $user_redis_data[$value['team_id']] = $value;
        }
        /* If count is greater then 300 then we will get user data from database */
        $user_data = array();
        if($leaderboard_user_count > 300 && $page==1) {

            $leaderboard_user = DB::table('leaderboard')->where('challenge_id', $challenge_id)->where('user_id',$userid)->get();
            foreach ($leaderboard_user as $key => $value) {
                if(!isset($data_user)) {
                    $data_user = Redis::hGetAll('team_'.$value->user_id.'_'.$value->team_id);
                }
                $user_data[$key]['userrank'] = $value->rank;
                $user_data[$key]['team_id'] = $value->team_id;
                $user_data[$key]['join_id'] = $value->team_id;
                $user_data[$key]['user_image'] = $data_user['user_image'];
                $user_data[$key]['name'] = $value->team_name;
                $user_data[$key]['teamnumber'] = $value->team_number;
                $user_data[$key]['userid'] = $value->user_id;
                $user_data[$key]['isjoined'] = true;
                $user_data[$key]['isselected'] = true;
                $user_data[$key]['points'] = number_format((float)$value->points, 2, '.', '');
            }
        }
        /* If count is greater then 300 then we will get user data from database functionality ends here */


        $json = array();
        $json2 = array();
        $i = 0;
        $rank = 1;
        $org = 1;
        $lastscore = 0;
        foreach($updatedData as $key=>$value) {
            $ids = explode(':',$key);
            if($leaderboard_user_count > 300) {
                if($ids[0]==$userid) {
                    continue;
                }
            }
            else {
                if($ids[0]==$userid) {
                    // $data = Redis::hGetAll('team_'.$ids[0].'_'.$ids[1]);
                    $data = $user_redis_data[$ids[1]];
                    $json2[$i]['score'] = $value;
                    if($value==$lastscore) {
                        $rank--;
                    } else {
                        $rank = $org;
                    }
                    $json2[$i]['userrank'] = $rank;
                    $json2[$i]['team_id'] = $ids[1];
                    $json2[$i]['join_id'] = $ids[1];
                    $json2[$i]['user_image'] = $data['user_image'];
                    $json2[$i]['name'] = $data['teamname'];
                    $json2[$i]['teamnumber'] = $data['teamnumber'];
                    $json2[$i]['userid'] = $data['user_id'];
                    $json2[$i]['isjoined'] = true;
                    $json2[$i]['isselected'] = true;
                    $json2[$i]['points'] = number_format((float)$value, 2, '.', '');
                    $lastscore = $value;
                    $i++;
                    $rank++;
                    $org++;
                    continue;
                }
            }
            // $data = Redis::hGetAll('team_'.$ids[0].'_'.$ids[1]);
            $data = $user_redis_data[$ids[1]];
            $json[$i]['score'] = $value;
            if($value==$lastscore) {
                $rank--;
            } else {
                $rank = $org;
            }
            $json[$i]['userrank'] = $rank;
            $json[$i]['team_id'] = $ids[1];
            $json[$i]['join_id'] = $ids[1];
            $json[$i]['user_image'] = $data['user_image'];
            $json[$i]['name'] = $data['teamname'];
            $json[$i]['teamnumber'] = $data['teamnumber'];
            $json[$i]['userid'] = $data['user_id'];
            $json[$i]['isjoined'] = false;
            $json[$i]['points'] = number_format((float)$value, 2, '.', '');
            $lastscore = $value;
            $i++;
            $rank++;
            $org++;
        }
        $return_data = array_merge($user_data,$json2, $json);
        return Response::json(["status" => STATUS_SUCCESS,"result"=> ["contest"=> $return_data,
        "user_teams"=> 0,
        "joinedleauges"=> 0]
    ]);
    }

    public function leaderboard_redis(Request $request) {
        date_default_timezone_set("Asia/Kolkata");
        $date = $this->getDateCommon();
        // echo $date; exit;
        // $this->validateLogin($request->user_id);
        $this->validate($request,[

          'user_id' => 'required',

          'matchkey' => 'required',

          // 'page' => 'required',

          'challenge_id' => 'required'

        ]);


        $sport_type = (isset($request->sport_key) ? $request->sport_key : 'cricket');
        $sportType = (object)array();
        $sportType->id = Helpers::get_sport_type($request->sport_key);
        $matchkey="";

        $page_limit = 300;

        if(!empty($request->matchkey)){

            $matchkey = $request->matchkey;

        }

        $page_offset = 0;
        $page =1;

        if(!empty($request->page)){

            $page = $request->page;

            $page_offset = (($page - 1) * $page_limit);

        }
        $list_match_detail = Redis::hGetAll($matchkey.'_'.$sportType->id.'_detail');
        if(!empty($list_match_detail)) {
            $listmatchestartdate = (object)array();
            $listmatchestartdate->start_date =  $list_match_detail['start_date'];
            $listmatchestartdate->is_live_fantasy_enable =  $list_match_detail['is_live_fantasy_enable'];
            $listmatchestartdate->final_status =  $list_match_detail['final_status'];
        } else {

            $listmatchestartdate = DB::table('listmatches')->where('matchkey',$matchkey)->where('sport_type',$sportType->id)->select('start_date' , 'is_live_fantasy_enable','final_status')->first();
        }

        // Get Match Champion Team Points

        $userid = $request->user_id;

        $challenge_id = $request->challenge_id;
        $fantasy_type = $request->fantasy_type;
        if($date < $listmatchestartdate->start_date) {
            return $this->league_detail2($matchkey, $challenge_id, $userid);
        }

        if($listmatchestartdate->start_date < '2021-09-29 11:00:00' || $listmatchestartdate->final_status=='winnerdeclared' || $fantasy_type==5) {
          // var_dump("sa");exit;
            return $this->leaderboard3($request);
        }

        $leaderboard_user_count = Redis::zCount($challenge_id, 0, 30000);

        if($leaderboard_user_count == 0) {
            return $this->league_detail2($matchkey, $challenge_id, $userid);
        }

        $updatedData = Redis::zRevRangeByScore($challenge_id, 10000,0, ['withscores' => true,'limit' => ['offset' => $page_offset, 'count'=>$page_limit]]);
        $user_redis_data = array();
        $ret = Redis::pipeline();
        foreach ($updatedData as $key => $value) {
             $ids = explode(':',$key);
            Redis::hGetAll('team_'.$ids[0].'_'.$ids[1]);
        }
        $red_data = $ret->exec();
        foreach($red_data as $key => $value) {
            if(!empty($value)) {

                $user_redis_data[$value['team_id']] = $value;
            }
        }
        /* If count is greater then 300 then we will get user data from database */
        $user_data = array();
        $findChallengesDB = DB::table('matchchallenges')->where('id' , $challenge_id)->first();
        if($leaderboard_user_count > 300 && $page==1) {

            $leaderboard_user = DB::table('joinedleauges')->where('challengeid', $challenge_id)->where('userid',$userid)->get();
            foreach ($leaderboard_user as $key => $value) {
                    $data_user = Redis::hGetAll('team_'.$value->userid.'_'.$value->teamid);
                $data_score = Redis::zScore($challenge_id,$value->userid.':'.$value->teamid);
                $data_rank = Redis::hGet($challenge_id.'_rank',$value->teamid);
                $user_data[$key]['userrank'] = (string)$data_rank;
                $user_data[$key]['team_id'] = (int)$value->teamid;
                // $user_data[$key]['win_amount'] = 0;
                $user_data[$key]['win_amount'] = "0";
                $user_data[$key]['join_id'] = (int)$value->teamid;
                $user_data[$key]['user_image'] = $data_user['user_image'];
                if($findChallengesDB->is_champion == 1 && $findChallengesDB->champion_team_userid == $value->userid){

                  $user_data[$key]['name'] = $data_user['teamname'];
                }else{
                  $user_data[$key]['name'] = $data_user['teamname'].'(T-'.$data_user['teamnumber'].')';
                }
                $user_data[$key]['teamnumber'] = $data_user['teamnumber'];
                $user_data[$key]['userid'] = (int)$value->userid;
                $user_data[$key]['isjoined'] = true;
                $user_data[$key]['isselected'] = true;
                $user_data[$key]['is_winning_zone'] = 0;
                $user_data[$key]['points'] = number_format((float)$data_score, 2, '.', '');
            }
        }
        /* If count is greater then 300 then we will get user data from database functionality ends here */


        $json = array();
        $json2 = array();
        $json3 = array();
        $i = 0;
        $rank = 1;
        $org = 1;
        $lastscore = 0;

        $expertTeamPoints = 0;
if($findChallengesDB->is_champion == 1){
  $expertTeamPoints = Redis::zScore($challenge_id,$findChallengesDB->champion_team_userid.':'.$findChallengesDB->champion_team_id);
}

        foreach($updatedData as $key=>$value) {
            $value = number_format((float)$value, 2, '.', '');
            $ids = explode(':',$key);
            if($leaderboard_user_count > 300) {
                if($ids[0]==$userid) {
                    continue;
                }
            }
            else {
                if($ids[0]==$userid) {
                    // $data = Redis::hGetAll('team_'.$ids[0].'_'.$ids[1]);
                    $data = $user_redis_data[$ids[1]];
                    $json2[$i]['score'] = $value;
                    if($value==$lastscore) {
                        $rank--;
                    } else {
                        $rank = $org;
                    }
                    $json2[$i]['userrank'] = (string)$rank;
                    $json2[$i]['team_id'] = (int)$ids[1];
                    // $json2[$i]['win_amount'] = 0;
                    $json2[$i]['win_amount'] = "0";
                    $json2[$i]['join_id'] = (int)$ids[1];
                    $json2[$i]['user_image'] = $data['user_image'];
                    if($findChallengesDB->is_champion == 1 && $findChallengesDB->champion_team_userid == $value->userid){
                    $json2[$i]['name'] = $data['teamname'];
                  }else{
                    $json2[$i]['name'] = $data['teamname'].'(T-'.$data['teamnumber'].')';
                  }
                    $json2[$i]['teamnumber'] = $data['teamnumber'];
                    $json2[$i]['userid'] = (int)$data['user_id'];
                    $json2[$i]['isjoined'] = true;
                    $json2[$i]['isselected'] = true;
                    $json2[$i]['is_winning_zone'] = 0;
                    if($findChallengesDB->is_champion == 1){
                      $json2[$i]['is_winning_zone'] = $value > $expertTeamPoints ? 1 : 0; // Jugaad Need to Remove
                    }
                    // $json2[$i]['points'] = number_format((float)$value, 2, '.', '');
                    $json2[$i]['points'] = $value;
                    $lastscore = $value;
                    $i++;
                    $rank++;
                    $org++;
                    continue;
                }
                if($ids[0]==11) {
                    // $data = Redis::hGetAll('team_'.$ids[0].'_'.$ids[1]);
                    $data = $user_redis_data[$ids[1]];
                    $json3[$i]['score'] = $value;
                    if($value==$lastscore) {
                        $rank--;
                    } else {
                        $rank = $org;
                    }
                    $json3[$i]['userrank'] = (string)$rank;
                    $json3[$i]['team_id'] = (int)$ids[1];
                    // $json3[$i]['win_amount'] = 0;
                    $json3[$i]['win_amount'] = "0";
                    $json3[$i]['join_id'] = (int)$ids[1];
                    $json3[$i]['user_image'] = $data['user_image'];
                    $json3[$i]['name'] = $data['teamname'].'(T-'.$data['teamnumber'].')';
                    $json3[$i]['teamnumber'] = $data['teamnumber'];
                    $json3[$i]['userid'] = (int)$data['user_id'];
                    $json3[$i]['isjoined'] = true;
                    $json3[$i]['is_champion'] = 1;
                    $json3[$i]['isselected'] = true;
                    $json3[$i]['is_winning_zone'] = 0;

                    // $json3[$i]['points'] = number_format((float)$value, 2, '.', '');
                    $json3[$i]['points'] = $value;
                    $lastscore = $value;
                    $i++;
                    $rank++;
                    $org++;
                    continue;
                }
            }
            // $data = Redis::hGetAll('team_'.$ids[0].'_'.$ids[1]);
            $data = $user_redis_data[$ids[1]];
            $json[$i]['score'] = $value;
            if($value==$lastscore) {
                $rank--;
            } else {
                $rank = $org;
            }
            $json[$i]['userrank'] = (string)$rank;
            $json[$i]['team_id'] =  (int)$ids[1];
            $json[$i]['join_id'] = (int)$ids[1];
            $json[$i]['win_amount'] = "0";
            // $json[$i]['win_amount'] = 0;
            $json[$i]['user_image'] = $data['user_image'];
            $json[$i]['name'] = $data['teamname'].'(T-'.$data['teamnumber'].')';
            $json[$i]['teamnumber'] = $data['teamnumber'];
            $json[$i]['userid'] = (int)$data['user_id'];
            $json[$i]['isjoined'] = false;
            $json[$i]['is_champion'] =  0;
            $json[$i]['is_winning_zone'] = 0;
            if($findChallengesDB->is_champion == 1){
              // $json2[$i]['is_winning_zone'] = $value > $expertTeamPoints ? 1 : 0; // Jugaad Need to Remove
              $json[$i]['is_winning_zone'] = $value > $expertTeamPoints ? 1 : 0; // Jugaad Need To Remove
            }

            // $json[$i]['points'] = number_format((float)$value, 2, '.', '');
            $json[$i]['points'] = $value;
            $lastscore = $value;
            $i++;
            $rank++;
            $org++;
        }
        $return_data = array_merge($user_data,$json3,$json2, $json);
        return Response::json(["status" => STATUS_SUCCESS,"result"=> ["contest"=> $return_data,
        "user_teams"=> 0,
        "joinedleauges"=> 0]
    ]);
    }

    public function leaderboard2(Request $request) {
        date_default_timezone_set("Asia/Kolkata");
        $date = $this->getDateCommon();
    $sport_type = (isset($request->sport_key) ? $request->sport_key : 'cricket');
    // $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
    $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);
    $matchkey="";

    $page_limit = 300;

    if(!empty($request->matchkey)){

        $matchkey = $request->matchkey;

    }

    if(!empty($request->page)){

        $page = $request->page;

        $page_offset = (($page - 1) * $page_limit);

    }
    $challenge_id = $request->challenge_id;
    $userid = $request->user_id;

    /*$listmatchestartdate = DB::table('listmatches')->where('matchkey',$matchkey)->where('sport_type',$sportType->id)->select('start_date' , 'is_live_fantasy_enable')->first();


    if($date < $listmatchestartdate->start_date) {
        return $this->league_detail2($matchkey, $challenge_id, $userid);
    }*/

  $price_card = DB::table('matchpricecards')->where('challenge_id' , $challenge_id)->select(DB::raw('MIN(min_position) as min_rank, MAX(max_position) as max_rank'))->first();

  if(empty($price_card)){

    $price_card->min_rank = 0;
    $price_card->max_rank = 0;

  }


    $queryget = DB::table('leaderboard');

    // $queryget->join('registerusers','registerusers.id','=','leaderboard.user_id');
   $queryget->join('matchchallenges','matchchallenges.id','=','leaderboard.challenge_id')
   ->join('registerusers','registerusers.id','=','leaderboard.user_id');

    $queryget->leftJoin('finalresults', function($join) {

      $join->on('finalresults.joinedid','=','leaderboard.join_id');

      $join->on('leaderboard.challenge_id','=','finalresults.challengeid');

    });

    if(!empty($page)) {

      $queryget->skip($page_offset)->take($page_limit);

    } else {

      $queryget->skip(0)->take(300);

    }



    $leaderboard = $queryget->where('leaderboard.challenge_id', $challenge_id)->select(DB::raw('CASE WHEN finalresults.amount IS NULL OR finalresults.amount = "" THEN "0" ELSE cast(finalresults.amount AS CHAR) END AS win_amount, CASE WHEN finalresults.rank IS NULL OR finalresults.rank = "" THEN leaderboard.rank ELSE cast(finalresults.rank AS CHAR) END AS userrank, CASE WHEN finalresults.points IS NULL OR finalresults.points = "" THEN ROUND(leaderboard.points,2) ELSE finalresults.points END AS points, (matchchallenges.joinedusers) as joined_count, CONCAT(leaderboard.team_name,"(T",leaderboard.team_number,")") as name,"1" AS is_leaderboard,"'.$price_card->min_rank.'" as min_rank,"'.$price_card->max_rank.'" as max_rank'),'leaderboard.challenge_id as challenge_id','leaderboard.id as id','leaderboard.user_id as user_id','leaderboard.team_id','leaderboard.team_number as teamnumber','matchchallenges.confirmed_challenge','matchchallenges.bonus as is_bonus','matchchallenges.multi_entry','registerusers.image as image','leaderboard.join_id','leaderboard.arrowname'
    )
    // ->groupBy('leaderboard.join_id')
    ->orderBy(DB::raw("FIELD(leaderboard.user_id, ".$userid.")"), 'DESC')
    ->orderBy('leaderboard.rank','ASC')
    ->orderBy('leaderboard.id','ASC')
    ->get();

    if(!count($leaderboard)) {

      return $this->league_detail2($matchkey, $challenge_id, $userid);

    } else {

       return Response::json(["status" => STATUS_SUCCESS,"result"=> ["contest"=> LeagueListResource::collection($leaderboard),

        // "user_teams"=> count(JoinTeam::where('userid',$request->user_id)->where('sport_type',$sportType->id)->where('matchkey',$request->matchkey)->get()),
        "user_teams"=> 0,

        "joinedleauges"=> 0]
        // "joinedleauges"=> count(JoinedLeague::where('userid',$request->user_id)->where('matchkey',$request->matchkey)->where('joinedleauges.sport_type',$sportType->id)->groupBy('challengeid')->get())]

        ]);

    }

  }

    public function leaderboard(Request $request) {
      // return "hi";
        date_default_timezone_set("Asia/Kolkata");
        $date = $this->getDateCommon();
    $sport_type = (isset($request->sport_key) ? $request->sport_key : 'cricket');
    // $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
    $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);
    $matchkey="";

    $page_limit = 300;

    if(!empty($request->matchkey)){

        $matchkey = $request->matchkey;

    }

    if(!empty($request->page)){

        $page = $request->page;

        $page_offset = (($page - 1) * $page_limit);

    } else {
        $page_offset = 0;
    }
    $challenge_id = $request->challenge_id;
    $userid = $request->user_id;

    /*$listmatchestartdate = DB::table('listmatches')->where('matchkey',$matchkey)->where('sport_type',$sportType->id)->select('start_date' , 'is_live_fantasy_enable')->first();


    if($date < $listmatchestartdate->start_date) {
        return $this->league_detail2($matchkey, $challenge_id, $userid);
    }*/

  $price_card = DB::table('matchpricecards')->where('challenge_id' , $challenge_id)->select(DB::raw('MIN(min_position) as min_rank, MAX(max_position) as max_rank'))->first();

  if(empty($price_card)){

    $price_card->min_rank = 0;
    $price_card->max_rank = 0;

  }
  $leaderboard_user = (object)array();
    /* Get Leaderboard data for that user*/
    if(empty($page) || $page==1) {
        $queryget = DB::table('leaderboard');

        // $queryget->join('registerusers','registerusers.id','=','leaderboard.user_id');
       $queryget->join('matchchallenges','matchchallenges.id','=','leaderboard.challenge_id')
       ->join('registerusers','registerusers.id','=','leaderboard.user_id');

        $queryget->leftJoin('finalresults', function($join) {

          $join->on('finalresults.joinedid','=','leaderboard.join_id');

          $join->on('leaderboard.challenge_id','=','finalresults.challengeid');

        });

        if(!empty($page)) {

          // $queryget->skip($page_offset)->take($page_limit);

        } else {

          // $queryget->skip(0)->take(300);

        }

        $challengeChampion = DB::table('matchchallenges')->where('id' , $challenge_id)->first();

$userIds = array();
if($challengeChampion->is_champion == 1){
  $userIds[] = $challengeChampion->champion_team_userid;
}
$userIds[] = $userid;
        $leaderboard_user = $queryget->where('leaderboard.challenge_id', $challenge_id)->select(DB::raw('CASE WHEN finalresults.amount IS NULL OR finalresults.amount = "" THEN "0" ELSE cast(finalresults.amount AS CHAR) END AS win_amount, CASE WHEN finalresults.rank IS NULL OR finalresults.rank = "" THEN leaderboard.rank ELSE cast(finalresults.rank AS CHAR) END AS userrank, CASE WHEN finalresults.points IS NULL OR finalresults.points = "" THEN ROUND(leaderboard.points,2) ELSE finalresults.points END AS points, (matchchallenges.joinedusers) as joined_count, CONCAT(leaderboard.team_name,"(T",leaderboard.team_number,")") as name,"1" AS is_leaderboard,"'.$price_card->min_rank.'" as min_rank,"'.$price_card->max_rank.'" as max_rank'),'leaderboard.challenge_id as challenge_id','leaderboard.id as id','leaderboard.user_id as user_id','leaderboard.team_id','leaderboard.team_number as teamnumber','matchchallenges.confirmed_challenge','matchchallenges.bonus as is_bonus','matchchallenges.multi_entry','registerusers.image as image','leaderboard.join_id','leaderboard.arrowname'
        )
        // ->groupBy('leaderboard.join_id')
        // ->orderBy(DB::raw("FIELD(leaderboard.user_id, ".$userid.")"), 'DESC')
        ->whereIn('leaderboard.user_id',$userIds)
        // ->where('leaderboard.rank','>',$page_offset)
        // ->where('leaderboard.rank','<',$page_limit)
        // ->orderBy('leaderboard.rank','ASC')
        // ->orderBy('leaderboard.id','ASC')
        ->get()->sortBy('is_champion');


if($challengeChampion->is_champion == 1){
        foreach ($leaderboard_user as $key => $value_cahm) {
          if($value_cahm->user_id == $challengeChampion->champion_team_userid){
            // $value_cahm->is_champion = 1;
            $leaderboard_user[$key]->is_champion = 1;
            $leaderboard_user[$key]->entryfee = $challengeChampion->entryfee;
            // var_dump();exit;
          }else{
              $leaderboard_user[$key]->is_champion = 0;
            // $value_cahm->is_champion = 0;
            // $leaderboard_user[$key]->is_champion = 0;
          }
        }
      }
      // var_dump($leaderboard_user);exit;
    }
    /*Leaderboard for that particular user*/
    // print_r($leaderboard_user); exit;
    /*Leaderboard for Other users*/
        $queryget = DB::table('leaderboard');
       $queryget->join('matchchallenges','matchchallenges.id','=','leaderboard.challenge_id')
       ->join('registerusers','registerusers.id','=','leaderboard.user_id');

        $queryget->leftJoin('finalresults', function($join) {

          $join->on('finalresults.joinedid','=','leaderboard.join_id');

          $join->on('leaderboard.challenge_id','=','finalresults.challengeid');

        });

        if(!empty($page)) {

          // $queryget->skip($page_offset)->take($page_limit);

        } else {

          // $queryget->skip(0)->take(300);

        }



        $leaderboard_other = $queryget->where('leaderboard.challenge_id', $challenge_id)->select(DB::raw('CASE WHEN finalresults.amount IS NULL OR finalresults.amount = "" THEN "0" ELSE cast(finalresults.amount AS CHAR) END AS win_amount, CASE WHEN finalresults.rank IS NULL OR finalresults.rank = "" THEN leaderboard.rank ELSE cast(finalresults.rank AS CHAR) END AS userrank, CASE WHEN finalresults.points IS NULL OR finalresults.points = "" THEN ROUND(leaderboard.points,2) ELSE finalresults.points END AS points, (matchchallenges.joinedusers) as joined_count, CONCAT(leaderboard.team_name,"(T",leaderboard.team_number,")") as name,"1" AS is_leaderboard,"'.$price_card->min_rank.'" as min_rank,"'.$price_card->max_rank.'" as max_rank'),'leaderboard.challenge_id as challenge_id','leaderboard.id as id','leaderboard.user_id as user_id','leaderboard.team_id','leaderboard.team_number as teamnumber','matchchallenges.confirmed_challenge','matchchallenges.bonus as is_bonus','matchchallenges.multi_entry','registerusers.image as image','leaderboard.join_id','leaderboard.arrowname'
        )
        // ->groupBy('leaderboard.join_id')
        // ->orderBy(DB::raw("FIELD(leaderboard.user_id, ".$userid.")"), 'DESC')
        ->whereNotIn('leaderboard.user_id', $userIds)
        ->where('leaderboard.rank','>',$page_offset)
        ->where('leaderboard.rank','<',$page_limit)
        // ->orderBy('leaderboard.rank','ASC')
        // ->orderBy('leaderboard.id','ASC')
        ->get()->sortBy('userrank');
    /*Leaderboard for Other users*/
    // print_r($leaderboard_other); exit;
    $leaderboard = $leaderboard_user->merge($leaderboard_other);
    if(!count($leaderboard)) {

      return $this->league_detail2($matchkey, $challenge_id, $userid);

    } else {

       return Response::json(["status" => STATUS_SUCCESS,"result"=> ["contest"=> LeagueListResource::collection($leaderboard),

        // "user_teams"=> count(JoinTeam::where('userid',$request->user_id)->where('sport_type',$sportType->id)->where('matchkey',$request->matchkey)->get()),
        "user_teams"=> 0,

        "joinedleauges"=> 0]
        // "joinedleauges"=> count(JoinedLeague::where('userid',$request->user_id)->where('matchkey',$request->matchkey)->where('joinedleauges.sport_type',$sportType->id)->groupBy('challengeid')->get())]

        ]);

    }

  }

  public function league_detail2($matchkey, $challenge_id, $userid) {


$matchChallengeData = DB::table('matchchallenges')->where('id' , $challenge_id)->first();
$userIdsArry = array();
$userIdsArry[] = $userid;
if($matchChallengeData->is_champion == 1){
  $userIdsArry[] = $matchChallengeData->champion_team_userid;
}
    $league_detail = JoinedLeague::join('jointeam','jointeam.id','=','joinedleauges.teamid')
    ->join('registerusers','registerusers.id','=','joinedleauges.userid')
    ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
    ->select(DB::raw(' "1" as `userrank` ,"up-arrow" as arrowname, "0" as `points`, "0" as win_amount, (matchchallenges.joinedusers) as joined_count,CONCAT(registerusers.team,"(T",jointeam.teamnumber,")") as name, "1" AS is_leaderboard,"1" as is_league_detail2'),'joinedleauges.id as join_id'
,'matchchallenges.confirmed_challenge','matchchallenges.bonus as is_bonus','matchchallenges.multi_entry', 'joinedleauges.challengeid as challenge_id','registerusers.image as image','joinedleauges.teamid as team_id','joinedleauges.userid as user_id','jointeam.teamnumber as teamnumber' ,  'registerusers.team as team')->where('joinedleauges.challengeid', $challenge_id)
->whereIn('joinedleauges.userid',$userIdsArry)
->orderBy(DB::raw("FIELD(joinedleauges.userid, ".end($userIdsArry).")"), 'DESC')
->orderBy('joinedleauges.id','ASC')
->get();

if($matchChallengeData->is_champion == 1){

  foreach ($league_detail as $key => $value_user) {
    if($value_user->user_id == $matchChallengeData->champion_team_userid){
      $league_detail[$key]['name'] = $value_user->team;
      $league_detail[$key]['is_champion'] = 1;
    }else{
      $league_detail[$key]['is_champion'] = 0;
    }
  }

}

// var_dump($league_detail);exit;
    $league_detail1 = JoinedLeague::join('jointeam','jointeam.id','=','joinedleauges.teamid')
    ->join('registerusers','registerusers.id','=','joinedleauges.userid')
    ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
    ->select(DB::raw(' "1" as `userrank` ,"up-arrow" as arrowname, "0" as `points`, "0" as win_amount, (matchchallenges.joinedusers) as joined_count,CONCAT(registerusers.team,"(T",jointeam.teamnumber,")") as name, "registerusers.team as team" , "1" AS is_leaderboard,"1" as is_league_detail2'),'joinedleauges.id as join_id'
,'matchchallenges.confirmed_challenge','matchchallenges.bonus as is_bonus','matchchallenges.multi_entry', 'joinedleauges.challengeid as challenge_id','registerusers.image as image','joinedleauges.teamid as team_id','joinedleauges.userid as user_id','jointeam.teamnumber as teamnumber')
    ->where('joinedleauges.challengeid', $challenge_id)
    // ->where('joinedleauges.userid','!=', $userid)
    ->whereNotIn('joinedleauges.userid', $userIdsArry)
// ->orderBy('joinedleauges.id','ASC')
->skip(0)->take(100)->get();


      // print_r($league_detail);die;

foreach ($league_detail1 as $key => $value) {


  $league_detail->add($value);
}

    // return Response::json(["status" => STATUS_SUCCESS]);

    // echo json_encode(["status" => STATUS_SUCCESS,"message"=>"success","result"=>["value"=>$league_detail]]);exit;
    return Response::json(["status" => STATUS_SUCCESS,"result"=> ["contest"=> LeagueListResource::collection($league_detail),

     // "user_teams"=> count(JoinTeam::where('userid',$request->user_id)->where('sport_type',$sportType->id)->where('matchkey',$request->matchkey)->get()),
     "user_teams"=> 0,

     "joinedleauges"=> 0]
     // "joinedleauges"=> count(JoinedLeague::where('userid',$request->user_id)->where('matchkey',$request->matchkey)->where('joinedleauges.sport_type',$sportType->id)->groupBy('challengeid')->get())]

     ]);
    // echo json_encode(["status" => STATUS_SUCCESS,"result"=> ["contest"=> LeagueListResource::collection($league_detail),
    //
    //     "user_teams"=> 0,
    //
    //     "joinedleauges"=> 0]
    //
    //     ]);  exit;

  }

  public function get_cashfree_token() {
    $post = $_POST;
      $url = "https://api.cashfree.com/api/v2/cftoken/order";

  //     // echo $url; exit;
  // var_dump($post);exit;
      $post_data = array(
        "orderId" => $post['orderId'],
        "orderAmount" => $post['orderAmount'],
        "orderCurrency"=> "INR"
      );
      // print_r(1); exit;
      $ch = curl_init($url);
      curl_setopt($ch, CURLOPT_POST, 1);
      curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($post_data));
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      // curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: application/json","x-client-id: 702513840c0cbfe82786c6e0d15207","x-client-secret: 27d764350ea2d0b908dc24e4fbfe4892e4aede84"));
      curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: application/json","x-client-id: 213670838c50d25c294f5ebf97076312","x-client-secret: 1552a09be4de3973a3d7e1bf6f9e7dbe7bd5ecc3"));
      $response = curl_exec($ch);
      $response = json_decode($response, true);

      $response = array("orderId" => $post['orderId'], "token" => $response['cftoken'], "status" => "OK");
      $email = $post['customerEmail'];
         $mobile = $post['customerPhone'];

         $row = DB::table('registerusers')->where('email', $email)->where('mobile',$mobile)->orderBy('id','DESC')->first();

         if(empty($row)) {
          echo json_encode(["status" => STATUS_FAILURE, "message" => 'There is some error please restart app and try again' ,"result" => array()]);
          exit;
         }

         if($row) {

          $user_id = $row->id;

          $insert_data = array(

            "userid" => $user_id,

            "amount" => $post['orderAmount'],

            "transaction_by" => "cashfree",

            "paymentstatus" => "pending",
            //"paymentstatus" => "confirmed",

            "transaction_id" => $post['orderId'],

            "paytid" => $post['orderId'],

            "type" => "Add Fund"

          );

          DB::table('transactions')->insert($insert_data);

      }

         echo json_encode($response); exit;

  }

  public function get_cashfree_checksum() {
     // $response = array("orderId" =>'', "checksum" => '', "status" => "Failed");

   //       echo json_encode($response); exit;

    $post = $_POST; //print_r($_POST); exit;

        // $secretKey = '27d764350ea2d0b908dc24e4fbfe4892e4aede84'; //CODE to fetching your secretKey from your config files
        $secretKey = '1552a09be4de3973a3d7e1bf6f9e7dbe7bd5ecc3'; //CODE to fetching your secretKey from your config files

            foreach($post as $key => $value) {

                $postData[$key] = $_POST[$key];

             }



         //The postData initializes its values from the Post parameters

         // $postData['appId'] = '702513840c0cbfe82786c6e0d15207';
                  $postData['appId'] = '213670838c50d25c294f5ebf97076312';





         // combine all of the data into a single string as shown below

         ksort($postData);

         $checksumData = "";

         foreach ($postData as $key => $value){

              $checksumData .= $key.$value;

         }





         $checksum = hash_hmac('sha256', $checksumData, $secretKey,true);

         $checksum = base64_encode($checksum);



         $email = $post['customerEmail'];
         $mobile = $post['customerPhone'];

         $row = DB::table('registerusers')->where('email', $email)->orWhere('mobile', $mobile)->orderBy('id','DESC')->first();

         if($row) {

          $user_id = $row->id;

          $insert_data = array(

            "userid" => $user_id,

            "amount" => $post['orderAmount'],

            "transaction_by" => "cashfree",

            "paymentstatus" => "pending",

            "transaction_id" => $post['orderId'],

            "paytid" => $post['orderId'],

            "type" => "Add Fund"

          );

          DB::table('transactions')->insert($insert_data);

      }



        //$this->db->insert('transaction', $insert_data);





         $response = array("orderId" => $post['orderId'], "checksum" => $checksum, "status" => "OK");

         echo json_encode($response); exit;

         return $data;



    }


    public function get_paytm_checksum() {

      $myfile = fopen("test.txt", "w") or die("Unable to open file!");

      $txt = json_encode($_POST);

      fwrite($myfile, $txt);

      $txt = "Jane Doe\n";

      fwrite($myfile, $txt);

      fclose($myfile);
      /*
      * import checksum generation utility
      * You can get this utility from https://developer.paytm.com/docs/checksum/
      */
      // require_once(base_path()."/PaytmKit/PaytmChecksum.php");

      // $PaytmChecksum = new PaytmChecksum();

      $paytmParams = array();

      $paytmParams["body"] = array(
          "requestType"   => "Payment",
          "mid"           => $_POST['MID'],
          "websiteName"   => "DEFAULT",
          "orderId"       => $_POST['ORDER_ID'],
          "callbackUrl"   => $_POST['CALLBACK_URL'],
          // "mode"          => "BALANCE",
          // "enablePaymentMode" => [["mode" => "BALANCE"]],
          "txnAmount"     => array(
              "value"     => $_POST['TXN_AMOUNT'],
              "currency"  => "INR",
          ),
          "userInfo"      => array(
              "custId"    => $_POST['CUST_ID'],
          ),
      );
      $user_id_arr = explode('FANLINE11', $_POST['CUST_ID']);
      $user_id = @$user_id_arr[1];
      /*
      * Generate checksum by parameters we have in body
      * Find your Merchant Key in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys
      */
      // $checksum = PaytmChecksum::generateSignature(json_encode($paytmParams["body"], JSON_UNESCAPED_SLASHES), "Ju&N94NP7Ws@u0aW");
      $checksum = PaytmChecksum::generateSignature(json_encode($paytmParams["body"], JSON_UNESCAPED_SLASHES), "QDUMBG5EJV8pOD1c");

      // echo $checksum; exit;
      $paytmParams["head"] = array(
          "signature" => $checksum
      );

      // print_r(json_encode($paytmParams)); exit;


      $post_data = json_encode($paytmParams, JSON_UNESCAPED_SLASHES);


      $row = DB::table('registerusers')->where('id', $user_id)->first();

      if($row) {

          $user_id = $row->id;

          $insert_data = array(

            "userid" => $user_id,

            "amount" => $_POST["TXN_AMOUNT"],
            // "razorpay_id" => $user_id,

            "transaction_by" => "paytm",

            "paymentstatus" => "pending",

            "transaction_id" => $_POST["ORDER_ID"],

            "paytid" => $_POST["ORDER_ID"],

            "type" => "Add Fund"

          );

          DB::table('transactions')->insert($insert_data);

      }

      /* for Staging */
      // $url = "https://securegw-stage.paytm.in/theia/api/v1/initiateTransaction?mid=YOUR_MID_HERE&orderId=ORDERID_98765";

      /* for Production */
      $url = "https://securegw.paytm.in/theia/api/v1/initiateTransaction?mid=".$_POST['MID']."&orderId=".$_POST['ORDER_ID'];

      // echo $url; exit;

      $ch = curl_init($url);
      curl_setopt($ch, CURLOPT_POST, 1);
      curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: application/json"));
      $response = curl_exec($ch);
      $response = json_decode($response, true);
      // print_r($response); exit;
      $_POST['token'] = @$response['body']['txnToken'] ? $response['body']['txnToken'] : '';
      echo json_encode($_POST); exit;
    }


  public function league_detail(Request $request) {

    $this->validate($request,[

      'matchkey' => 'required',

      'page' => 'required',

      'userid' => 'required',

      'challenge_id' => 'required',

    ]);

      $matchkey="";

      $page_limit = 10000;

      if(isset($request->matchkey)){

          $matchkey = $request->matchkey;

      }

      if(isset($request->page)){

          $page = $request->page;

          $page_offset = (($page - 1) * $page_limit);

      }

      $userid =  $request->userid;

      $challenge_id = $request->challenge_id;

      $queryget = JoinedLeague::join('jointeam','jointeam.id','=','joinedleauges.teamid')->join('registerusers','registerusers.id','=','joinedleauges.userid')->select(DB::raw('"1" as `rank` , "1" as `points`, "0" as winingamount, (SELECT COUNT(joinedleauges.id) as joined_count FROM joinedleauges WHERE challengeid = '.$challenge_id.') as joined_count, CONCAT(registerusers.team, "(T", jointeam.teamnumber,")") as teamname'),'joinedleauges.id as join_id', 'joinedleauges.challengeid as challenge_id','joinedleauges.teamid as teamid','joinedleauges.userid as user_id','jointeam.teamnumber as teamnumber')->where('joinedleauges.challengeid', $challenge_id)->orderBy(DB::raw("FIELD(joinedleauges.userid, ".$userid.")"), 'DESC');



      if(isset($page)) {

        $queryget->skip($page_offset)->take($page_limit);

      }

      $league_detail = $queryget->get();



      return Response::json(["status" => STATUS_SUCCESS,"result"=>["value"=>$league_detail]]);

      exit;

    }



    public function leagueDetails(Request $request) {

      $this->validate($request,[

      'matchkey' => 'required',

      'user_id' => 'required',

      'challenge_id' => 'required',

      'page' => 'required'

    ]);

      $matchkey="";

      $page_limit = 200;

      if(isset($request->matchkey)){

          $matchkey = $data['matchkey'] =  $request->matchkey;

      }

      if(isset($request->page)){

          $page = $data['page'] =  $request->page;

          $page_offset = (($page - 1) * $page_limit);

      }

      $userid =  $data['userid'] =  $request->user_id;

      $challenge_id = $request->challenge_id;

      $queryget = JoinedLeague::join('jointeam','jointeam.id','=','joinedleauges.teamid')

      ->join('registerusers','registerusers.id','=','joinedleauges.userid')

      ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')

      ->select(DB::raw('"1" as `userrank` , "0" as `points`, "0" as winingamount, (SELECT COUNT(joinedleauges.id) as joined_count FROM joinedleauges WHERE challengeid = '.$challenge_id.') as joined_count, CONCAT(registerusers.team, "(T", jointeam.teamnumber,")") as teamname'),'joinedleauges.id as id','joinedleauges.refercode as refercode','joinedleauges.challengeid as challenge_id','joinedleauges.teamid as team_id','joinedleauges.userid as user_id','jointeam.teamnumber as teamnumber','matchchallenges.name as name','matchchallenges.entryfee as entryfee','matchchallenges.maximum_user as maximum_user','matchchallenges.win_amount as win_amount','matchchallenges.joinedusers as joinedusers','matchchallenges.matchkey as matchkey','matchchallenges.multi_entry as multi_entry','matchchallenges.confirmed_challenge as confirmed_challenge','matchchallenges.is_running as is_running','matchchallenges.bonus as is_bonus','matchchallenges.challenge_type','matchchallenges.percetage_type')

      ->where('joinedleauges.challengeid', $challenge_id)

      ->orderBy(DB::raw("FIELD(joinedleauges.userid, ".$userid.")"), 'DESC');



      if(isset($page)) {

        $queryget->skip($page_offset)->take($page_limit);

      }

      $league_detail = $queryget->get();

      // return Response::json(["status" => STATUS_SUCCESS,"message"=>"success","result"=> ["contest"=> LeagueListResource::collection($league_detail),

      //   "user_teams"=> count(JoinTeam::where('userid',$request->user_id)->where('sport_type',$sportType->id)->where('matchkey',$request->matchkey)->get()),

      //   "joinedleauges"=> count(JoinedLeague::where('userid',$request->user_id)->where('matchkey',$request->matchkey)->get())]

      //   ]);

      // print_r($league_detail);die;

      return Response::json(["status" => STATUS_SUCCESS,"result"=> [ "contest"=> LeagueListResource::collection($league_detail),

        "user_teams"=> count(JoinTeam::where('userid',$request->user_id)->where('sport_type',$sportType->id)->where('matchkey',$request->matchkey)->get()),

        "joined_leagues"=> count(JoinedLeague::where('userid',$request->user_id)->where('matchkey',$request->matchkey)->where('joinedleauges.sport_type',$sportType->id)->groupBy('challengeid')->get())]

        ]);   die;

      exit;

    }



    public function myJoinedMatches(Request $request){
      $this->validateLogin($request->user_id);
      date_default_timezone_set('Asia/Kolkata');

      $this->validate($request,[

      'user_id' => 'required',

    ]);

      $locktime = Carbon::now()->addMinutes(0);

      $geturl = BASE_URL;

      $userid =  $data['userid'] = $request->user_id;

      $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
      $sport_key_arr = explode(',', $sport_key);
      $sportType = DB::table('sport_types')->whereIn('sport_key',$sport_key_arr)->get();
      $sportType_arr = json_decode(json_encode($sportType));

       $all_sport_keys = array_column($sportType_arr, 'id');


      $findjoinedleauges = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')
      // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
      ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
      ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
      ->where('jointeam.userid',$userid)
      ->whereIn('listmatches.sport_type',$all_sport_keys)
      ->where('listmatches.series','!=','0')
      // ->whereIn('listmatches.final_status',array('isAban'))
      ->whereNotIn('listmatches.final_status', ['IsCanceled','IsAbandoned'])
      // ->where('matchchallenges.status','!=','canceled')
      ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type','listmatches.start_date','listmatches.status','t1.team_key as team1name','t2.team_key as team2name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo')->selectRaw('COUNT(joinedleauges.userid) as total_joined')->selectRaw('COUNT(jointeam.id) as total_teams')->selectRaw('SUM(finalresults.amount) as total_amount')->orderBY('listmatches.start_date','ASC')->groupBy('jointeam.matchkey')->limit(50)->get();

      $json = array();

      return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findjoinedleauges)]); die;



    }
    public function myJoinedMatches_live(Request $request){
    $this->validateLogin($request->user_id);
    date_default_timezone_set('Asia/Kolkata');

    $this->validate($request,[

      'user_id' => 'required',

    ]);

    $locktime = Carbon::now()->addMinutes(0);

    $geturl = BASE_URL;

    // $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
    // $txt = json_encode($request->all())."";
    //
    // fwrite($myfile, $txt); exit;

    $userid =  $data['userid'] = $request->user_id;
    $is_live = 0;
    $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
    $sport_key_arr = explode(',', $sport_key);
    // if($sport_key_arr[0]=='LIVE') {
    //   $is_live = 1;
    //   $sport_key_arr[0] = 'CRICKET';
    // }
    $sportType = DB::table('sport_types')->whereIn('sport_key',$sport_key_arr)->get();
    $sportType_arr = json_decode(json_encode($sportType));

    $all_sport_keys = array_column($sportType_arr, 'id');

    $query = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')
    ->join('series','series.id','=','listmatches.series')
    ->join('teams as t1','t1.id','=','listmatches.team1')
    ->join('teams as t2','t2.id','=','listmatches.team2')
    // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
    ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
    // ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
    ->where('jointeam.userid',$userid)
    ->whereIn('listmatches.sport_type',$all_sport_keys)
    ->where('listmatches.series','!=','0');

    $query->whereNotIn('listmatches.final_status', ['IsCanceled','IsAbandoned','winnerdeclared']);

      $query = $query->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type',

      'listmatches.start_date','listmatches.status',

      'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_reverse_fantasy_enable as reversefantasy' , 'listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.second_inning_allow as secondinning','listmatches.second_inning as secondinning_flag',
      't1.team as team1_name' ,'t2.team as team2_name','t1.team_key as team1name','listmatches.team1_color_code' , 'listmatches.team2_color_code' ,'t2.team_key as team2name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo')
      ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
      ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
      ->selectRaw('0 as total_amount')
      ->orderBY('listmatches.start_date','ASC');
    //}
    $findjoinedleauges = $query->groupBy('jointeam.matchkey')->limit(50)->get();



    foreach ($findjoinedleauges as $key => $value_joined) {
      if($sport_key === 'LIVE'){
        if($value->secondinning_flag == 0){
          $value_joined->livefantasy = 1;
        }
        $sport_type = DB::table('sport_types')->where('sport_key',$value_joined->sport_key)->first();
        /*$findjoinedleauges[$key]->total_teams = DB::table('jointeam')
        ->where('matchkey' , $value_joined->matchkey)
        ->where('sport_type' , $sport_type->id)
        ->where('userid' , $userid)
        ->where('fantasy_type_id' , 1)
        ->count();
        */
        $findjoinedleauges[$key]->total_joined = DB::table('joinedleauges')
        ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
        ->where('matchchallenges.status','!=','canceled')
        ->where('matchchallenges.matchkey' , $value_joined->matchkey)
        ->where('joinedleauges.matchkey' , $value_joined->matchkey)
        ->where('joinedleauges.sport_type' , $sport_type->id)
        ->where('joinedleauges.userid' , $userid)
        ->where('joinedleauges.fantasy_type_id' , 1)
        ->count();

      }else if($sport_key === 'CRICKET'){
        $value_joined->livefantasy = 0;
        $sport_type = DB::table('sport_types')->where('sport_key',$value_joined->sport_key)->first();
        /*$findjoinedleauges[$key]->total_teams = DB::table('jointeam')
        ->where('matchkey' , $value_joined->matchkey)
        ->where('sport_type' , $sport_type->id)
        ->where('userid' , $userid)
        ->where('fantasy_type_id' ,'!=', 1)
        ->count();

        $findjoinedleauges[$key]->total_joined = DB::table('joinedleauges')
        ->where('matchkey' , $value_joined->matchkey)
        ->where('sport_type' , $sport_type->id)
        ->where('userid' , $userid)
        ->where('fantasy_type_id' ,'!=', 1)
        ->count();*/
        $findjoinedleauges[$key]->total_joined = count(DB::table('joinedleauges')
        ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
        ->where('matchchallenges.status','!=','canceled')
        ->where('matchchallenges.matchkey' , $value_joined->matchkey)
        ->where('joinedleauges.matchkey' , $value_joined->matchkey)
        ->where('joinedleauges.sport_type' , $sport_type->id)
        ->where('joinedleauges.userid' , $userid)
        // ->where('joinedleauges.fantasy_type_id' ,'!=', 1)
        ->groupBy('matchchallenges.id')
        ->get());
      }
    }

    $json = array();

    return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findjoinedleauges)]); die;



  }

        public function myJoinedMatches_live_old(Request $request){
          // dd('fdsf');
          $this->validateLogin($request->user_id);
          date_default_timezone_set('Asia/Kolkata');

          $this->validate($request,[

          'user_id' => 'required',

        ]);

          $locktime = Carbon::now()->addMinutes(0);

          $geturl = BASE_URL;

          $userid =  $data['userid'] = $request->user_id;
          $is_live = 0;
          $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
          $sport_key_arr = explode(',', $sport_key);
          if($sport_key_arr[0]=='LIVE') {
            $is_live = 1;
            $sport_key_arr[0] = 'CRICKET';
          }
          $sportType = DB::table('sport_types')->whereIn('sport_key',$sport_key_arr)->get();
          $sportType_arr = json_decode(json_encode($sportType));

           $all_sport_keys = array_column($sportType_arr, 'id');

           $query = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')
           ->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')
               // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
               ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
               // ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
               ->where('jointeam.userid',$userid)
               ->whereIn('listmatches.sport_type',$all_sport_keys)
               ->where('listmatches.series','!=','0');

               if($sport_key=='LIVE') {
                  $query->where('joinedleauges.fantasy_type_id','=','1');
                  $query->where('jointeam.fantasy_type_id','=','1');
                } else {
                  $query->where('joinedleauges.fantasy_type_id','!=','1');
                  $query->where('jointeam.fantasy_type_id','!=','1');
                    $query->where('listmatches.second_inning',0);
                }
               // ->whereIn('listmatches.final_status',array('isAban'))
               $query->whereNotIn('listmatches.final_status', ['IsCanceled','IsAbandoned','winnerdeclared']);
               // ->where('matchchallenges.status','!=','canceled')


               if($is_live == 1) {
                  $query->where('is_live_fantasy_enable',1)
                  ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type',

                  'listmatches.livefantasy_start_date as start_date','listmatches.status',

                  'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_reverse_fantasy_enable as reversefantasy' , 'listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.second_inning_allow as secondinning','listmatches.second_inning as secondinning_flag',
                  't1.team as team1_name' ,'t2.team as team2_name','t1.team_key as team1name','listmatches.team1_color_code' , 'listmatches.team2_color_code' ,'t2.team_key as team2name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo')
                  ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
                   ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
                  ->selectRaw('0 as total_amount')
                  ->orderBY('listmatches.livefantasy_start_date','DESC');
               }else{
                 $query = $query->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type',

                 'listmatches.start_date','listmatches.status',

                 'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_reverse_fantasy_enable as reversefantasy' , 'listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.second_inning_allow as secondinning','listmatches.second_inning as secondinning_flag',
                 't1.team as team1_name' ,'t2.team as team2_name','t1.team_key as team1name','listmatches.team1_color_code' , 'listmatches.team2_color_code' ,'t2.team_key as team2name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo')
                 ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
                  ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
                 ->selectRaw('0 as total_amount')
                 ->orderBY('listmatches.start_date','ASC');
               }
               $findjoinedleauges = $query->groupBy('jointeam.matchkey')->limit(50)->get();


   if($sport_key=='LIVE') {



     $query_live_replica = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')
         // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
         ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
         // ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
         ->where('jointeam.userid',$userid)
         ->whereIn('listmatches.sport_type',$all_sport_keys)
         ->where('listmatches.series','!=','0')
         ->where('joinedleauges.fantasy_type_id','=','1')
          ->where('jointeam.fantasy_type_id','=','1')
             ->where('listmatches.start_date','<',$locktime)
          ->whereNotIn('listmatches.final_status', ['IsCanceled','IsAbandoned','winnerdeclared'])
            ->where('is_live_fantasy_enable',1)
            ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname','series.is_leaderboard as is_leaderboard','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type',
              'listmatches.start_date','listmatches.status',
              'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_reverse_fantasy_enable as reversefantasy' , 'listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.second_inning_allow as secondinning','listmatches.second_inning as secondinning_flag',
            't1.team as team1_name' ,'t2.team as team2_name','t1.team_key as team1name','listmatches.team1_color_code' , 'listmatches.team2_color_code' ,'t2.team_key as team2name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo')
            ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
             ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
            ->selectRaw('0 as total_amount')
             ->selectRaw('1 as is_visible_slotes')
            ->orderBY('listmatches.start_date','DESC')->groupBy('jointeam.matchkey')->limit(50)->get();


            $findjoinedleauges = $findjoinedleauges->toBase()->merge($query_live_replica);





$findjoinedleauges_secondInning = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')
    // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
    ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
    // ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
    ->where('jointeam.userid',$userid)
    ->whereIn('listmatches.sport_type',$all_sport_keys)
    ->where('listmatches.series','!=','0')
    ->whereNotIn('listmatches.final_status', ['IsCanceled','IsAbandoned','winnerdeclared'])
    // ->where('matchchallenges.status','!=','canceled')
    ->where('listmatches.second_inning',1)
    ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname','series.is_leaderboard as is_leaderboard' , 'listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type','listmatches.start_date','listmatches.status',
    'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_reverse_fantasy_enable as reversefantasy' , 'listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.second_inning_allow as secondinning','listmatches.second_inning as secondinning_flag',
    't1.team as team1_name' ,'t2.team as team2_name','t1.team_key as team1name','listmatches.team1_color_code' , 'listmatches.team2_color_code' ,'t2.team_key as team2name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo')
    ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
     ->selectRaw('0 as is_visible_slotes')
     ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
    ->selectRaw('0 as total_amount')->orderBY('listmatches.start_date','DESC')
    ->groupBy('jointeam.matchkey')->limit(50)->get();


$findjoinedleauges = $findjoinedleauges->merge($findjoinedleauges_secondInning);

   }
               // print_r($findjoinedleauges); exit;

               if($is_live==1) {
               foreach ($findjoinedleauges as $key => $value) {

                 $slotesData=[];
if($value->is_visible_slotes == 1){
                 $sloteId_arr = DB::table('matches_livefantasy_slotesmaster')->where('matchkey',$value->matchkey)->where('start_date','<',$locktime)->orderBy('sort','ASC')->get();
              }else{
                $sloteId_arr = DB::table('matches_livefantasy_slotesmaster')->where('matchkey',$value->matchkey)->where('start_date','>',$locktime)->orderBy('sort','ASC')->get();

              }
                 if(!empty($sloteId_arr)){
                    foreach ($sloteId_arr as $key => $solte) {
                      $matchsloteData=DB::table('live_fantasy_slotes_master')->where('id',$solte->slotes_id)->first();
                     if(!empty($matchsloteData)){
                         $slotesData[$key]['id']=$matchsloteData->id;
                         $slotesData[$key]['type']=$matchsloteData->type;
                         $slotesData[$key]['min_over']=$matchsloteData->min_over;
                         $slotesData[$key]['max_over']=$matchsloteData->max_over;
                         $slotesData[$key]['inning']=$matchsloteData->inning;
                     }
                    }
                    $value->slotes = $slotesData;
                  }


               }
             }

          foreach ($findjoinedleauges as $key => $value_joined) {
             if($sport_key === 'LIVE'){
                 if($value->secondinning_flag == 0){
             $value_joined->livefantasy = 1;
           }
             $sport_type = DB::table('sport_types')->where('sport_key',$value_joined->sport_key)->first();
             /*$findjoinedleauges[$key]->total_teams = DB::table('jointeam')
             ->where('matchkey' , $value_joined->matchkey)
             ->where('sport_type' , $sport_type->id)
             ->where('userid' , $userid)
             ->where('fantasy_type_id' , 1)
             ->count();
*/
             $findjoinedleauges[$key]->total_joined = DB::table('joinedleauges')
             ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
             ->where('matchchallenges.status','!=','canceled')
             ->where('matchchallenges.matchkey' , $value_joined->matchkey)
             ->where('joinedleauges.matchkey' , $value_joined->matchkey)
             ->where('joinedleauges.sport_type' , $sport_type->id)
             ->where('joinedleauges.userid' , $userid)
             ->where('joinedleauges.fantasy_type_id' , 1)
             ->count();

           }else if($sport_key === 'CRICKET'){
             $value_joined->livefantasy = 0;
             $sport_type = DB::table('sport_types')->where('sport_key',$value_joined->sport_key)->first();
             /*$findjoinedleauges[$key]->total_teams = DB::table('jointeam')
             ->where('matchkey' , $value_joined->matchkey)
             ->where('sport_type' , $sport_type->id)
             ->where('userid' , $userid)
             ->where('fantasy_type_id' ,'!=', 1)
             ->count();

             $findjoinedleauges[$key]->total_joined = DB::table('joinedleauges')
             ->where('matchkey' , $value_joined->matchkey)
             ->where('sport_type' , $sport_type->id)
             ->where('userid' , $userid)
             ->where('fantasy_type_id' ,'!=', 1)
             ->count();*/
             $findjoinedleauges[$key]->total_joined = count(DB::table('joinedleauges')
             ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
             ->where('matchchallenges.status','!=','canceled')
             ->where('matchchallenges.matchkey' , $value_joined->matchkey)
             ->where('joinedleauges.matchkey' , $value_joined->matchkey)
             ->where('joinedleauges.sport_type' , $sport_type->id)
             ->where('joinedleauges.userid' , $userid)
             ->where('joinedleauges.fantasy_type_id' ,'!=', 1)
             ->groupBy('matchchallenges.id')
             ->get());
           }
           }

          $json = array();

          return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findjoinedleauges)]); die;



        }

  public function myJoinedMatches_finished(Request $request){
    $this->validateLogin($request->user_id);
    date_default_timezone_set('Asia/Kolkata');

    $this->validate($request,[

    'user_id' => 'required',

  ]);
    //pagination
  if(isset($request->page)){
    $request->page = $request->page + 1;
  }

  $page_limit = 6;

  //$page = isset($request->page) ? $request->page : 1;

    $locktime = Carbon::now()->addMinutes(0);

    $geturl = BASE_URL;

    $userid =  $data['userid'] = $request->user_id;
$is_live = 0;
    $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
    $sport_key_arr = explode(',', $sport_key);
    if($sport_key_arr[0]=='LIVE') {
            $is_live = 1;
            $sport_key_arr[0] = 'CRICKET';
          }
    $sportType = DB::table('sport_types')->whereIn('sport_key',$sport_key_arr)->get();
    $sportType_arr = json_decode(json_encode($sportType));

     $all_sport_keys = array_column($sportType_arr, 'id');

     $query = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')
         // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
         ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
         ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
         ->where('jointeam.userid',$userid)
         ->whereIn('listmatches.sport_type',$all_sport_keys)
         ->where('listmatches.series','!=','0');

         if($sport_key=='LIVE') {
            // $query->where('joinedleauges.fantasy_type_id','=','1');
            // $query->where('jointeam.fantasy_type_id','=','1');
            $query->where(function($q) {
                  $q->where('listmatches.second_inning', 1)
                    ->orWhere('joinedleauges.fantasy_type_id','=','1');
              });
          } else {
            $query->where('joinedleauges.fantasy_type_id','!=','1');
            $query->where('jointeam.fantasy_type_id','!=','1');
            $query->where('listmatches.second_inning',0);
          }
         // ->whereIn('listmatches.final_status',array('isAban'))
         $query->whereNotIn('listmatches.final_status', ['IsCanceled','IsAbandoned','pending','IsReviewed'])
         // ->where('matchchallenges.status','!=','canceled')
         ->select(DB::raw('"'.$sport_key_arr[0].'" AS sport_key'),'listmatches.id','listmatches.series as seriesid','series.name as seriesname','series.is_leaderboard as is_leaderboard' , 'listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type','listmatches.start_date','listmatches.status',
         'listmatches.is_live_fantasy_enable as livefantasy','listmatches.is_reverse_fantasy_enable as reversefantasy' ,'listmatches.is_batting_fantasy_enable as battingfantasy','listmatches.is_bowling_fantasy_enable as bowlingfantasy','listmatches.second_inning_allow as secondinning','listmatches.second_inning as secondinning_flag',
         't1.team as team1_name' ,'listmatches.team1_color_code' , 'listmatches.team2_color_code' ,'t2.team as team2_name','t1.team_key as team1name','t2.team_key as team2name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo')
         ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
          ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
         ->selectRaw('SUM(finalresults.amount) as total_amount')->orderBY('listmatches.start_date','DESC');

         if($is_live==1) {
          // $query->where('is_live_fantasy_enable',1);
          $query->where(function($q) {
                $q->where('listmatches.second_inning', 1)
                  ->orWhere('is_live_fantasy_enable',1);
            });
         }
         $findjoinedleauges = $query->groupBy('jointeam.matchkey')->paginate($page_limit,['*'],'page',$request->page);



         if($is_live==1) {
               foreach ($findjoinedleauges as $key => $value) {

                 $slotesData=[];
                 $sloteId_arr = DB::table('matches_livefantasy_slotesmaster')->where('matchkey',$value->matchkey)->get();
                 if(!empty($sloteId_arr)){
                    foreach ($sloteId_arr as $key => $solte) {
                      $matchsloteData=DB::table('live_fantasy_slotes_master')->where('id',$solte->slotes_id)->first();
                     if(!empty($matchsloteData)){
                         $slotesData[$key]['id']=$matchsloteData->id;
                         $slotesData[$key]['type']=$matchsloteData->type;
                         $slotesData[$key]['min_over']=$matchsloteData->min_over;
                         $slotesData[$key]['max_over']=$matchsloteData->max_over;
                         $slotesData[$key]['inning']=$matchsloteData->inning;
                     }
                    }
                    $value->slotes = $slotesData;
                  }


               }
             }


      $trans = json_decode(json_encode($findjoinedleauges), true);

      $current_page = $trans['current_page'];

      $per_page = $trans['per_page'];

      $total_page = $trans['last_page'] - 1;
      // $total_page = floor($trans['total']/$page_limit);
    //$json = array();
    foreach ($findjoinedleauges as $key => $value_joined) {
      // $sport_type = DB::table('sport_types')->where('sport_key',$value_joined->sport_key)->first();
      $sport_type = (object)array();
    $sport_type->id = Helpers::get_sport_type($value_joined->sport_key);

        if($sport_key === 'LIVE'){
            if($value->secondinning_flag == 0){
        $value_joined->livefantasy = 1;
      }
        $findjoinedleauges[$key]->total_joined = DB::table('joinedleauges')
        ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
        ->where('matchchallenges.status','!=','canceled')
        ->where('matchchallenges.matchkey' , $value_joined->matchkey)
        ->where('joinedleauges.matchkey' , $value_joined->matchkey)
        ->where('joinedleauges.sport_type' , $sport_type->id)
        ->where('joinedleauges.userid' , $userid)
        ->where('joinedleauges.fantasy_type_id' , 1)
        ->count();
      }else{
        $value_joined->livefantasy = 0;
                $findjoinedleauges[$key]->total_joined = count(DB::table('joinedleauges')
        ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
        ->where('matchchallenges.status','!=','canceled')
        ->where('matchchallenges.matchkey' , $value_joined->matchkey)
        ->where('joinedleauges.matchkey' , $value_joined->matchkey)
        ->where('joinedleauges.sport_type' , $sport_type->id)
        ->where('joinedleauges.userid' , $userid)
        ->where('joinedleauges.fantasy_type_id' ,'!=', 1)
        ->groupBy('matchchallenges.id')
        ->get());
      }
      }
      $query = JoinTeam::join('listmatches','listmatches.matchkey','=','jointeam.matchkey')
      // ->join('series','series.id','=','listmatches.series')
      // ->join('teams as t1','t1.id','=','listmatches.team1')
      // ->join('teams as t2','t2.id','=','listmatches.team2')
               // ->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
               // ->leftJoin('joinedleauges','jointeam.id','=','joinedleauges.teamid')
               // ->leftJoin('finalresults','joinedleauges.id','=','finalresults.joinedid')
               ->where('jointeam.userid',$userid)
               ->whereIn('listmatches.sport_type',$all_sport_keys);
               // ->where('listmatches.series','!=','0');

               if($sport_key=='LIVE') {
                  $query->where('joinedleauges.fantasy_type_id','=','1');
                  $query->where('jointeam.fantasy_type_id','=','1');
                } else {
                  // $query->where('joinedleauges.fantasy_type_id','!=','1');
                  $query->where('jointeam.fantasy_type_id','!=','1');
                    $query->where('listmatches.second_inning',0);
                }
               // ->whereIn('listmatches.final_status',array('isAban'))
               $query->whereNotIn('listmatches.final_status', ['IsCanceled','IsAbandoned','winnerdeclared'])
               // ->where('matchchallenges.status','!=','canceled')
               ->select('listmatches.id');
               // ->selectRaw('COUNT(DISTINCT(joinedleauges.challengeid)) as total_joined')
                // ->selectRaw('COUNT(DISTINCT(jointeam.id)) as total_teams')
               // ->selectRaw('0.0 as total_amount')
               // ->orderBY('listmatches.start_date','DESC');

               if($is_live == 1) {
                  $query->where('is_live_fantasy_enable',1);
               }
               $total_live_match = $query->limit(1)->count();
    return Response::json(["status" => STATUS_SUCCESS,"result"=>["data" => MatchListResource::collection($findjoinedleauges),"current_page" => $current_page, "per_page" => $per_page, "total" => $total_page,'total_live_match' => $total_live_match]]); die;

  }




     public function myjoinedleagues(Request $request){

      $this->validateLogin($request->user_id);
      $this->validate($request,[

        'matchkey' => 'required',

        'user_id' => 'required'

      ]);
      //
      // $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
      // $txt = json_encode($request->all())."John Doe\nhkhkhkhk";
      //
      // fwrite($myfile, $txt); exit;

      $matchkey = $data['matchkey'] =  $request->matchkey;

      $userid =  $data['userid'] =  $request->user_id;

      //
      // $keyc = DB::table('registerusers')
      //           ->where('id',$userid)
      //           ->where('pan_verify',1)
      //           ->select('registerusers.*')
      //           ->first();
      // $keyc1 = DB::table('registerusers')
      //           ->where('id',$userid)
      //           ->where('bank_verify',1)
      //           ->select('registerusers.*')
      //           ->first();
      // $keyc2 = DB::table('registerusers')
      //           ->where('id',$userid)
      //           ->where('adhar_verify',1)
      //           ->select('registerusers.*')
      //           ->first();
              // if(@$keyc->pan_verify != 1){
              //     return "pan is not verified";
              // }
              // if(@$keyc1->bank_verify != 1)
              // {
              //     return "bank is not verified";
              //
              // }
              // if(@$keyc->adhar_verify != 1)
              // {
              //     return "adhar is not verified";
              //
              // }
      $Json = array();

      $sport_type = (isset($request->sport_key) ? $request->sport_key : CRICKET);
      $fantasy_type=isset($request->fantasy_type) ? $request->fantasy_type : 0;
      $slotes_id = 0;
        if(!empty($fantasy_type) && $fantasy_type==1){
          $slotes_id=isset($request->slotes_id) ? $request->slotes_id : 0;
        }
        if($fantasy_type==4) {
            $fantasy_type = 0;
        }
      // $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
      $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);

      $findjoinedleauges = JoinedLeague::join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')->where('joinedleauges.matchkey',$matchkey)
      ->leftJoin('matchpricecards','matchchallenges.id','=','matchpricecards.challenge_id')
      ->where('joinedleauges.sport_type',$sportType->id)
      ->where('joinedleauges.fantasy_type_id',$fantasy_type)
      ->where('joinedleauges.slotes_id',$slotes_id)
      ->where('joinedleauges.userid',$userid)
        ->where('matchchallenges.status','!=','canceled')
      ->select('joinedleauges.teamid as team_id','joinedleauges.id as joinid','joinedleauges.refercode','matchchallenges.*','joinedleauges.challengeid as challenge_id',
      DB::raw('(SELECT IF(COUNT(*) > 0, 1, 0) FROM user_favourite_contest WHERE user_id = '.$userid.' and challenge_id = matchchallenges.real_challenge_id) as is_selected,
       matchchallenges.id as joined_challenge_ids,
       MAX(matchpricecards.max_position) as winners,
        MAX(matchpricecards.price) as first_rank_prize', 'matchchallenges.is_champion', 'matchchallenges.multi_entry', 'matchchallenges.max_team_limit'
        ))->groupBy('matchchallenges.id')->get();



      if(!empty($findjoinedleauges)){

        $i=0;

        $Json = array();

              //Added by kumar 02 May 2018

                     $challarr=$jointeamarr=$pricecardarr=[];



                     /*foreach($findjoinedleauges as $joined){

                       $challarr[]=$joined->challengeid;

                     }*/

                     // $resjoined=JoinedLeague::whereIn('challengeid',$challarr)->where('joinedleauges.sport_type',$sportType->id)->join('registerusers','registerusers.id','=','joinedleauges.userid')->join('jointeam','jointeam.id','=','joinedleauges.teamid')->select('registerusers.team','registerusers.email','jointeam.teamnumber','jointeam.points','joinedleauges.teamid','joinedleauges.userid','challengeid')->orderBy('jointeam.points','DESC')->get();
                    //  $resjoined=array();

                    //  foreach($resjoined as $joined){

                    //    $jointeamarr[$joined->challengeid][]=$joined;

                    //  }



                    // // $respricecard = MatchPriceCard::whereIn('challenge_id',$challarr)->orderBY('min_position','ASC')->get();
                    // $respricecard = array();

                    // foreach($respricecard as $joined){

                    //    $pricecardarr[$joined->challenge_id][]=$joined;

                    //  }

            // print_r($findjoinedleauges);die;


        $contest = LeagueListResource::collection($findjoinedleauges);

        if(isset($request->is_upcoming)) {
          $findjointeam = array();
        } else {

        $findjointeam = JoinTeam::where('jointeam.matchkey',$request->matchkey)

                       // ->join('matchplayers','matchplayer.matchkey','=','jointeam.matchkey')

                       // ->whereRaw('FIND_IN_SET(match_players.playerid, jointeam.players)')

                       // ->join('listmatches','listmatches.matchkey','=','jointeam.matchkey')

                       ->join('listmatches', function($join) {

                         $join->on('listmatches.matchkey','=','jointeam.matchkey');
                         $join->on('listmatches.sport_type','=','jointeam.sport_type');

                       })

                       ->join('teams as t1','t1.id','=','listmatches.team1')
                       ->where('jointeam.fantasy_type_id',$fantasy_type)
                       ->where('jointeam.slotes_id',$slotes_id)
                       ->where('jointeam.sport_type', $sportType->id)

                       ->join('teams as t2','t2.id','=','listmatches.team2')

                       // ->select(DB::raw(''))

                       // ->join('matchplayers','matchplayer.playerid')

                       ->where('userid',$request->user_id)
                       // ->where('listmatches.sport_type',$sportType->id)
                       // ->orderBy('teamnumber','ASC')

                       ->select(

                         // DB::raw('CASE WHEN listmatches.team2=t2.id THEN t2.id ELSE t1.id END AS team'),

                         // DB::raw('CASE WHEN listmatches.team2=t2.id THEN t2.color ELSE t1.color END AS teamcolor'),

                         // DB::raw('CASE WHEN listmatches.team2=t2.id THEN listmatches.team1display ELSE listmatches.team1display END AS teamcode'),

                         // 't1.id as idofteam',

                       'jointeam.id','jointeam.players','jointeam.teamnumber','jointeam.matchkey','jointeam.vicecaptain','jointeam.captain','listmatches.team1display' , 'listmatches.team2display','jointeam.sport_type')->get()->sortBy('teamnumber');
        }

                       $players_arr = array();
    $players = '';
    // var_dump($findjointeam);exit;
    foreach ($findjointeam as $key => $value) {
      $players .= $value->players.',';
    }
    if(!empty($players)) {

      $players_arr = array_values(array_unique(array_filter(explode(',', $players))));
    }
    // print_r($players_arr); exit;

    foreach ($findjointeam as $key => $value) {
      $findjointeam[$key]->players_arr = $players_arr;
    }
/*
$joined_leagues = JoinedLeague::where('matchkey',$request->matchkey)->where('userid',$request->user_id)->get();
    $joined_contest_ids = array();
    foreach ($joined_leagues as $key => $value) {
      $joined_contest_ids[] = $value->challengeid;
    }

    foreach ($contest as $key => $value) {
      // print_r($value); exit;
      // if(in_array($value['id'], $joined_contest_ids)) {
        $contest[$key]->isjoined = true;
      // }
    }
    // print_r($joined_contest_ids); exit;
    print_r(json_encode($contest)); exit;*/
    $countjoinedleagues = count(JoinedLeague::where('userid',$request->user_id)->where('sport_type',$sportType->id)
    ->where('fantasy_type_id',$fantasy_type)
    ->where('matchkey',$request->matchkey)
    ->groupBy('challengeid')->get());

        return Response::json(["status" => STATUS_SUCCESS,"result"=> [ "contest"=> LeagueListResource::collection($findjoinedleauges),

        /*"user_teams"=> JoinTeam::where('userid',$request->user_id)->where('sport_type',$sportType->id)
        ->where('fantasy_type_id', $fantasy_type)
        ->where('slotes_id', $slotes_id)
        ->where('matchkey',$request->matchkey)->count(),*/

        "user_teams"=> Helpers::get_user_team_count($request->matchkey,$fantasy_type,$request->user_id),
        "teams" => !empty($findjointeam) ? TeamResource::collection($findjointeam) : $findjointeam,
        //"joined_leagues"=> count($findjoinedleauges)]
        "joined_leagues"=> $countjoinedleagues]

        ]);   die;

      }

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

      die;

    }


   public function createChallenge(Request $request){

    $this->validateLogin($request->user_id);
      $this->validate($request,[

        'matchkey' => 'required',

        'user_id' => 'required',

        'maximum_user' => 'required',

        'win_amount' => 'required',

        'entryfee' => 'required',

        'name' => 'required',

        'is_public' => 'required',

        'multi_entry' => 'required'

      ]);
$user_id = $request->user_id;
      $sport_type = (isset($request->sport_key) ? $request->sport_key : 'cricket');
      // $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
      $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);

      $matchkey = $data['matchkey'] =  $request->matchkey;

      $userid =  $data['created_by'] =  $request->user_id;

      $data['sport_type'] =  $sportType->id;

      $maximum_user = $data['maximum_user'] = $request->maximum_user;

      $win_amount = $data['win_amount'] = $request->win_amount;

      $entryfee = $data['entryfee'] = $request->entryfee;

      $name = $data['name'] = $request->name;

      // if ($entryfee < 0) {

      // $Json[0]['status'] = STATUS_FAILURE;

      // $Json[0]['message'] = "There is some error please try again.";

      // $Json[0]['challengeid'] = 0;

      // return Response::json(["status" => STATUS_FAILURE, "message" => $Json[0]['message'] ,"result" => $Json]);

      // }

      if ($entryfee < 0) {

      $Json[0]['status'] = STATUS_FAILURE;

      $Json[0]['message'] = "Entryfee must be greater than 0.";

      $Json[0]['challengeid'] = 0;

      return Response::json(["status" => STATUS_FAILURE, "message" => $Json[0]['message'] ,"result" => $Json]);

      }

      if($win_amount < 0) {
        $Json[0]['status'] = STATUS_FAILURE;

        $Json[0]['message'] = "There some issue in contest.";

        $Json[0]['challengeid'] = 0;

        return Response::json(["status" => STATUS_FAILURE, "message" => $Json[0]['message'] ,"result" => $Json]);
      }

      if (($entryfee * $maximum_user) < $win_amount) {

      $Json[0]['status'] = STATUS_FAILURE;

      $Json[0]['message'] = "There some issue in contest.";

      $Json[0]['challengeid'] = 0;

      return Response::json(["status" => STATUS_FAILURE, "message" => $Json[0]['message'] ,"result" => $Json]);

      }

      // $is_public = $data['is_public'] = $request->is_public;



      // $is_private = $data['is_private'] = 1;

      // if(@$is_public==1) {

      //   $entryfee = $data['status'] = OPENED;

      // } else {

      //   $entryfee = $data['status'] = PENDING;

      // }

      $data['multi_entry'] = $request->multi_entry;



      $matches = MatchChallenge::where('matchkey',$matchkey)->where('created_by',$userid)->where('sport_type',$sportType->id)->get();


      $total = 0;
      foreach ($request->pricecards as $price) {
        if($price['winningPer']<0) {
          exit;
        }
          $total += $price['winningPer'];
      }

      if ($total > 100) {
      return Response::json(["status"=> STATUS_FAILURE, "message" => "Total winning percentage can not be more than 100."]);
      }


      if(count($matches) > 4){

        $Json[0]['status'] = 0;

        $Json[0]['message'] = false;

        $Json[0]['challengeid'] = 0;

        return Response::json(["status"=> STATUS_FAILURE, "message" => "You already have created contest.","result" => $Json]);

        die;

      }

      $challengeid = MatchChallenge::insertGetId($data);

      if(isset($request->pricecards)){

        if($request->pricecards!=""){

          foreach ($request->pricecards as $key => $value) {

            $winAmount = $win_amount * $value['winningPer']/100;
            $array_for_price_card[$key] = $winAmount;
            // $array_for_price_card[$key] = $value['winningAmmount'];

          }



          $explodesetwinners = $array_for_price_card;

          $min_position=0;

          $max_position=1;

          if(!empty($explodesetwinners)){

            foreach($explodesetwinners as $setwinners){

              $prcecardata['min_position'] = $min_position;

              $prcecardata['max_position'] = $max_position;

              $prcecardata['winners'] = 1;

              $prcecardata['matchkey'] = $request->matchkey;

              $prcecardata['price'] = $setwinners;

              $prcecardata['total'] = $setwinners;

              $prcecardata['challenge_id'] = $challengeid;

              MatchPriceCard::insert($prcecardata);

              $min_position = $min_position+1;

              $max_position = $max_position+1;

            }

          }



        }

      }

      $Json[0]['status'] = 1;

      $Json[0]['message'] = true;

      $Json[0]['challengeid'] = $challengeid;


                    //Filter Conditon End
                    $joinedleauges = JoinedLeague::where('matchkey',$matchkey)->where('userid',$user_id)->where('sport_type',$sportType->id)->select('challengeid')->get();

                    $challenge_arr = array();

                    foreach ($joinedleauges as $key => $value) {

                      $challenge_arr[] = $value->challengeid;

                    }

                    if(!empty($challenge_arr)) {
                      $joined_challenge_ids = implode(',', $challenge_arr);
                    } else {
                      $joined_challenge_ids = '';
                    }

                    $query = MatchChallenge::where('matchchallenges.matchkey',$matchkey)->where('matchchallenges.status','=','opened')->where('matchchallenges.sport_type',$sportType->id);

                    $contestdb = $query->leftJoin('matchpricecards','matchchallenges.id','=','matchpricecards.challenge_id')
                                    ->whereRaw('((SELECT COUNT(id) FROM joinedleauges WHERE challengeid = matchchallenges.id AND userid = "'.$user_id.'") = 0 OR matchchallenges.multi_entry = 1)')
                                    ->where('matchchallenges.id' , $challengeid)
                                    ->select('matchchallenges.*',DB::raw('(SELECT IF(COUNT(*) > 0, 1, 0) FROM user_favourite_contest WHERE user_id = '.$user_id.' and challenge_id = matchchallenges.real_challenge_id) as is_selected,SUM(matchpricecards.winners) as winners, MAX(matchpricecards.price) as first_rank_prize,"'.$joined_challenge_ids.'" as joined_challenge_ids'))->first();

                    $Json[0]['contest'] = new LeagueListResource($contestdb);


      return Response::json(["status" => STATUS_SUCCESS, "message" =>"Created.","result" => $Json]);

      die;

    }





    public function version(){

    $findlogin = AndroidVersion::first();

    if(!empty($findlogin)){

      $msgg['status'] = $findlogin->version;

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$msgg]);

      die;

    }else{

      $msgg['status'] = 0;

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$msgg]);

      die;

    }

  }



    public function updateteamchallenge(Request $request){
      $this->validateLogin($request->userid);
      $this->validate($request,[

        'matchkey' => 'required',

        'teamid' => 'required',

        'joinid' => 'required',

        'userid' => 'required',

        'challenge_id' => 'required',

      ]);

      $matchkey = $data['matchkey'] =  $request->matchkey;

      $teamid = $data['teamid'] =  $request->teamid;

      $joinid = $datau['joinid'] =  $request->joinid;

      $userid = $data['userid'] =  $request->userid;

      $challenge_id  =  $request->challenge_id;

      $find_challenge = JoinedLeague::where('id',$joinid)->first();
      if($find_challenge->userid!=$userid) {
        $Json[0]['msg'] = 'There is some error please try again';

          $Json[0]['status'] = 0;

          return Response::json(["status" => STATUS_SUCCESS,"message"=>$Json[0]['msg'],"result"=>$Json]);

          die;
      }

      //match is closed or not//

      $findmatchdetails = ListMatch::where('matchkey',$matchkey)->where('sport_type',$find_challenge->sport_type)->select('start_date' , 'is_live_fantasy_enable')->first();

      if(!is_null($findmatchdetails)){

        $getcurrentdate = $this->getDateCommon();

        $matchremainingdate = date('Y-m-d H:i:s', strtotime('0 minutes', strtotime($findmatchdetails->start_date)));

        if($getcurrentdate>$matchremainingdate && $findmatchdetails->is_live_fantasy_enable == 0){

          $Json[0]['msg'] = 'Match closed';

          $Json[0]['status'] = 0;

          return Response::json(["status" => STATUS_SUCCESS,"message"=>$Json[0]['msg'],"result"=>$Json]);

          die;

        }

      }

      $getJoinTeam = DB::table('jointeam')->where('matchkey', $matchkey)->where('userid', $userid)->where('id', $teamid)->first();
      if(empty($getJoinTeam)) {
        $Json[0]['message'] = 'There is some error';

        return Response::json(["status"=>STATUS_FAILURE,"message"=>$Json[0]['message']]);

        die;
      }

      $findchallenge = MatchChallenge::where('id',$challenge_id)->first();
      $fantasy_type_id = $findchallenge->fantasy_type_id;
      if($getJoinTeam->fantasy_type_id!=$fantasy_type_id) {
        $Json[0]['msg'] = 'cannot use this team';

            $Json[0]['status'] = 0;

            return Response::json(["status" => STATUS_SUCCESS,"message"=>$Json[0]['msg'],"result"=>$Json]);

            die;
      }
      if(!is_null($findchallenge)){

        if($findchallenge->multi_entry==1){

          $findjoinleauge = JoinedLeague::where('challengeid',$challenge_id)->where('teamid',$data['teamid'])->first();

          if(!is_null($findjoinleauge)){

            $Json[0]['msg'] = 'cannot use this team';

            $Json[0]['status'] = 0;

            return Response::json(["status" => STATUS_SUCCESS,"message"=>$Json[0]['msg'],"result"=>$Json]);

            die;

          }else{

            JoinedLeague::where('id',$joinid)->update($data);

            $findteamnumber = JoinTeam::where('matchkey',$matchkey)->where('userid',$userid)->where('id',$data['teamid'])->select('teamnumber')->first();

            $Json[0]['msg'] = 'Team Updated';

            $Json[0]['status'] = 1;

            $Json[0]['teamnumber'] = $findteamnumber->teamnumber;

            return Response::json(["status" => STATUS_SUCCESS,"message"=>$Json[0]['msg'],"result"=>$Json]);

            die;

          }

        }

        else{

            JoinedLeague::where('id',$joinid)->update($data);

            $findteamnumber = JoinTeam::where('matchkey',$matchkey)->where('userid',$userid)->where('id',$data['teamid'])->select('teamnumber')->first();

            // print_r($findteamnumber);die;



            $Json[0]['msg'] = 'Team Updated';

            $Json[0]['status'] = 1;

            $Json[0]['teamnumber'] = isset($findteamnumber) ? $findteamnumber->teamnumber : 0;

            return Response::json(["status" => STATUS_SUCCESS,"message"=>$Json[0]['msg'],"result"=>$Json]);

            die;

          }

      }else{

        $Json[0]['msg'] = 'Challenge not exist';

        $Json[0]['status'] = 0;

          return Response::json(["status" => STATUS_SUCCESS,"message"=>$Json[0]['msg'],"result"=>$Json]);

          die;

      }

    }




    public function sendEmptyOnNull($value) {

      $return_value = !is_null($value) ? $value : '';

      return $return_value;

    }

    public function playerfullinfo(Request $request){

      $geturl = BASE_URL;

      $playerid = $request->playerid;

      $matchkey = $request->matchkey;
      $sport_type = (isset($request->sport_key) ? $request->sport_key : CRICKET);
      // $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
      $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);

      $findseries = ListMatch::where('matchkey',$matchkey)->select('series')->first();

      $findplayerdetails = MatchPlayer::join('players','players.id','=','matchplayers.playerid')->join('playerdetails','playerdetails.player_key','=','players.player_key')->where('playerdetails.sport_type',$sportType->id)->where('matchplayers.matchkey',$matchkey)->where('matchplayers.playerid',$playerid)->select('playerdetails.fullname as playername','matchplayers.credit as playercredit','matchplayers.role as playerrole','players.points as playerpoints','playerdetails.image as playerimage','players.player_key as playerkey','playerdetails.batting_style','playerdetails.bowling_style','playerdetails.country','playerdetails.id','playerdetails.dob','matchplayers.selected_percent')->first();

      $Json = array();

      // $findjoinedleauges = JoinTeam::where('jointeam.matchkey',$matchkey)->select('jointeam.players')->get();
      $findjoinedleauges = array();

      $joinedlength = count($findjoinedleauges);

      $joinplayers = array();

      $joinplayerslist = array();

      if(!empty($findjoinedleauges)){

        foreach($findjoinedleauges as $joinleauges){

          $joinplayers[] = $joinleauges->players;

        }

      }

      if(!empty($joinplayers)){

        foreach($joinplayers as $jp=>$jpkey){

          $joinplayerslist[] = explode(',',$jpkey);

        }

      }

      if(!empty($findplayerdetails)){

        $totalpoints = 0;

        $Json['id'] = $findplayerdetails->id;

        $Json['playername'] = $findplayerdetails->playername;

        // $Json['totalpoints'] = "354";

        $Json['playerkey'] = $findplayerdetails->playerkey;

        $Json['playercredit'] = $findplayerdetails->playercredit;

        if($findplayerdetails->playerimage==""){

          $Json['playerimage'] = PLAYERS_DIRECTORY_URL.'images/defaultimage.png';

        }else{

          $Json['playerimage'] =  PLAYERS_DIRECTORY_URL.$findplayerdetails->playerimage;

        }

        $Json['playerpoints'] = $findplayerdetails->playerpoints ? $findplayerdetails->playerpoints : 0;

        $Json['battingstyle'] = $findplayerdetails->batting_style;

        $Json['bowlingstyle'] = $findplayerdetails->bowling_style;

        $Json['country'] = is_null($findplayerdetails->country) ? "" : $findplayerdetails->country;

        // echo $findplayerdetails->dob;die;

        if($findplayerdetails->dob!='0000-00-00'){

          $Json['dob'] = ($findplayerdetails->dob == '1970-01-01') ? "" : $findplayerdetails->dob ;

        }else{

          $Json['dob'] = "";

        }



        if($findplayerdetails->playerrole=='allrounder'){

          $Json['playerrole'] = 'All Rounder';

        }

        else if($findplayerdetails->playerrole=='keeper'){

          $Json['playerrole'] = 'Wicket Keeper';

        }

        else{

          $Json['playerrole'] = ucwords($findplayerdetails->playerrole);

        }

        $getteam="";

        $findallteams = Player::where('player_key',$findplayerdetails->playerkey)->where('players.sport_type',$sportType->id)->join('teams','teams.id','=','players.team')->select('teams.team')->get();

        if(!empty($findallteams)){

          foreach($findallteams as $teams){

            $getteam.=$teams->team.', ';

          }

        }

        $Json['teams'] =  rtrim($getteam,', ');

        $cnt=0;

        if(!empty($joinplayerslist)){

          foreach($joinplayerslist as $jn){

            if(in_array($playerid,$jn)){

              $cnt++;

            }

          }

          // $Json['per']= (float) number_format((float)$this->total_winning((($cnt*100)/$joinedlength)), 2, '.', '');
          $Json['per']= 0;

        }else{

          $Json['per'] = 0;

        }



        $findallmatches = ListMatch::join('matchplayers','matchplayers.matchkey','=','listmatches.matchkey')->join('players','players.id','=','matchplayers.playerid')->leftjoin('result_points','result_points.matchkey','=','listmatches.matchkey')->where('result_points.playerid',$playerid)->where('listmatches.series',$findseries->series)->select('listmatches.title','listmatches.matchkey','listmatches.start_date','listmatches.short_name','result_points.total as totalpoints','result_points.id as rid','players.player_name as playername','matchplayers.selected_percent' , 'players.id as player_id','result_points.*')->groupBy('listmatches.id')->get()->sortBy('start_date');

        // $findallmatches = DB::table('resultmatches')->join('listmatches','listmatches.matchkey','=','resultmatches.match_key')->where('resultmatches.player_id',$playerid)->where('listmatches.series',$findseries->series)->select('resultmatches.*','listmatches.start_date','listmatches.title','listmatches.short_name')->orderBy('listmatches.start_date','DESC')->get();

        if(!empty($findallmatches)){

          $i=0;

          foreach($findallmatches as $player){

            $Json['matches'][$i]['playername'] = $findplayerdetails->playername;

            $Json['matches'][$i]['matchname'] = $player->title;

            $Json['matches'][$i]['short_name'] = $player->short_name;

            $Json['matches'][$i]['total_points'] = $player->totalpoints;

            $totalpoints += $player->totalpoints;

            // $finduselectthisplayer = JoinTeam::where('matchkey',$player->matchkey)->select('players')->get();
            $finduselectthisplayer = array();

            $countlenght = count($finduselectthisplayer);

            $allplayers=array();$countplayer=0;

            if(!empty($finduselectthisplayer)){

              foreach($finduselectthisplayer as $pp){

                $fplayers = array();

                $fplayers = explode(',',$pp->players);

                foreach($fplayers as $fpl){

                  $allplayers[] = $fpl;

                }

              }

            }

            if(!empty($allplayers)){

              foreach($allplayers as $pl){

                if($pl==$player->playerid){

                  $countplayer++;

                }

              }

            }

            if($countplayer>0){

              $countper = round(($countplayer/$countlenght)*100,2);

            }else{

              $countper = 0;

            }

            // $Json['matches'][$i]['selectper'] = $countper.'%';
            $Json['matches'][$i]['selectper'] = $player->selected_percent.'%';

            $Json['matches'][$i]['matchdate'] = date('d M, Y',strtotime($player->start_date));

            $i++;

          }





        }

        $Json['total_points'] = (string)$totalpoints;
        $Json['playerpoints'] = (string)$totalpoints;



      }

      // echo json_encode(array($Json));

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

      die;

    }



    public function getplayerinfo(Request $request){

      $this->validate($request,[

        'playerkey' => 'required'

      ]);

      $geturl = BASE_URL;

      $playerkey = $request->playerkey;

      $findplayerdetails = PlayerDetail::where('player_key',$playerkey)->first();

      $Json = array();

      //print_r($playerkey);die;

      if(!empty($findplayerdetails)){

        $Json['id'] = $findplayerdetails->id;

        $Json['playername'] = $findplayerdetails->fullname;

        $Json['playerkey'] = $findplayerdetails->player_key;

        if($findplayerdetails->image==""){

          $Json['playerimage'] = PLAYERS_DIRECTORY_URL.'images/defaultimage.png';

        }else{

          $Json['playerimage'] = PLAYERS_DIRECTORY_URL.$findplayerdetails->image;

        }

        $Json['battingstyle'] = $findplayerdetails->batting_style;

        $Json['bowlingstyle'] = $findplayerdetails->bowling_style;

        $Json['country'] = $findplayerdetails->country;

        if($findplayerdetails->dob!='0000-00-00'){

          $Json['dob'] = $findplayerdetails->dob;

        }else{

          $Json['dob'] = "";

        }

        $getteam="";

        $findallteams = Player::where('player_key',$findplayerdetails->player_key)->join('teams','teams.id','=','players.team')->select('teams.team')->get();

        if(!is_null($findallteams)){

          foreach($findallteams as $teams){

            $getteam.=$teams->team.', ';

          }

        }

        $Json['teams'] =  rtrim($getteam,', ');

        $Json['status'] =  1;

      }else{

        $Json['status'] =  0;

      }

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

      die;

    }



    public function getDateCommon() {
      date_default_timezone_set('Asia/Kolkata');
      $date = date('Y-m-d H:i:s');

      return $date;

    }

/* ####### GET PLAYER LIST FOR VVP ######### */

      public function getplayerlist_vvp(Request $request){
        date_default_timezone_set('Asia/Kolkata');
        $this->validate($request,[
          'sets_id' => 'required'
        ]);
       // print_r($request->all()); exit;

        //echo $request->user_id; exit;

        $duoData  = DB::table('matchplayer_duo')->select('id','match_key','player_ids','sets_id')->where('sets_id',$request->sets_id)->where('match_key',$request->match_key)->get();

        $user_id = $request->user_id;
        $challengeId = $request->challenge_id;

          $joined_challenge_ids = '';
        $contestdb = DB::table('matchchallenges')->where('matchchallenges.id' , $challengeId)
        ->leftJoin('matchpricecards','matchchallenges.id','=','matchpricecards.challenge_id')
        ->select('matchchallenges.*')->first();

             //print_r($duoData);die;

      $matchData = DB::table('listmatches')->where('matchkey',$request->match_key)->first();

        // dd($duoData); die;
       // $duoData['players'] = array();

      //if(count($duoData) > 0){
      //print_r($duoData); exit;

      $line_up = DB::table('match_playing11')->where('match_key',$request->match_key)->count("id");

        foreach($duoData as $v){

         // $dbsp = unserialize($v->player_ids);
          $dbsp[] = $v->player_ids;
          $plsDb = DB::table('players')
          ->join('playerdetails','playerdetails.player_key','=','players.player_key')
          ->join('matchplayers','matchplayers.playerid','=','players.id')
          ->join('teams','teams.id','=','players.team')
          ->where('matchplayers.matchkey',$request->match_key)
        //  ->where('matchplayers.duo_status','opened')
          ->whereIn('players.id' , $dbsp)
          ->select('matchplayers.duo_status','playerdetails.image AS player_image','matchplayers.credit','players.player_key','players.id' , 'players.player_name','players.role' , 'teams.short_name AS team','players.team AS playersteam')->selectRaw(DB::raw("COALESCE(teams.team,'') AS country"))->get();

          foreach($plsDb as $r){
            if(!isset($r->player_image) && empty($r->player_image) ){
            $r->player_image=PLAYER_MEN_DEFAULT_IMAGE;
            }else{
            $r->player_image=PLAYERS_DIRECTORY_URL.$r->player_image;
            }

            //$r->player_image = PLAYER_MEN_DEFAULT_IMAGE;

            $playersdisabled = DB::table('joinedleauges_duo')->where('player_id',$r->id)->where('challengeid',$challengeId)->get();
            if(count($playersdisabled)>0){
            $r->is_disabled = 1;
          }else{
            $r->is_disabled = 0;
          }

        //  print_r($r); exit;

      if($r->playersteam == $matchData->team1){
      $r->teamcolor = "team1";
      }else{
      $r->teamcolor = "team2";
      }

          $find_playing_11 = DB::table('match_playing11')->where('match_key',$request->match_key)->first();

          if(!empty($find_playing_11)){
          $playing11_players = unserialize($find_playing_11->player_ids);
          $r->is_playing = in_array($r->id,$playing11_players) ? 1 : 0;
        }else{
          $r->is_playing = 0;
        }

        if($line_up>0){
          $r->is_lineup_out = 1;
        }else{
          $r->is_lineup_out = 0;
        }

          //playerids -> match_playng11 by matchkye
          // playerid search playerids
          //$r->is_playing = rand(0,1);

        //  print_r($r); exit;

        }
          //$v->player_ids = $plsDb;

          $duoData['players'] = $plsDb;
        }
      //}





        $duoData['contest']  = new LeagueListResource($contestdb);

        if(!empty($contestdb->bonus_precent)){
            $contestdata['bonus'] = $contestdb->bonus_precent;
        }else{
          $contestdata['bonus'] =0;
        }

        $contestdata['price'] = isset($contestdb->win_amount) ? $contestdb->win_amount : 0;
        $contestdata['stock_entry'] = isset($contestdb->entryfee) ? $contestdb->entryfee : 0;
        $contestdata['per_stocks'] = 0;
        $contestdata['total_stocks'] = isset($contestdb->win_amount) ? $contestdb->win_amount : 0;
        $contestdata['payout_text'] = "These players are options to complete.This is DUO contest, select your player to beat your opponent.";
        $contestdata['challenge_type'] = isset($contestdb->challenge_type)? $contestdb->challenge_type : 0;
        $contestdata['joinedusers'] = isset($contestdb->joinedusers) ? $contestdb->joinedusers :0;
        $contestdata['maximum_user'] = isset($contestdb->maximum_user) ? $contestdb->maximum_user : 0;
        $contestdata['multi_entry'] = isset($contestdb->multi_entry) ? $contestdb->multi_entry : 0;
        $contestdata['max_multi_entry_user'] = isset($contestdb->max_team_limit) ? $contestdb->max_team_limit : 0;
        $contestdata['confirmed_challenge'] = isset($contestdb->confirmed_challenge) ? $contestdb->confirmed_challenge : 0;
        $contestdata['is_flexible'] = isset($contestdb->is_flexible) ? $contestdb->is_flexible : 0;
        //$contestdata['is_lineup_out'] = $contestdb->is_flexible;


        return Response::json(["status" => STATUS_SUCCESS,"result"=>$duoData['players'],"contest"=>$contestdata]);


        die;
      }


/* ####### GET PLAYER LIST FOR VVP ######### */

/* ######  JOINED LEAGUE VVP ####### */
  public function joinleague_vvp(Request $request){
      $this->validate($request,[
          'user_id' => 'required',
          'challengeid' => 'required',
        ]);


     $sets_id = isset($request->sets) ? $request->sets :0;

    $challengeid =$challenge_id = isset($request->challengeid) ? $request->challengeid :0;
    $playerid =$player_id = isset($request->playerid) ? $request->playerid :0;
    $sport_type = (isset($request->sport_key) ? $request->sport_key : 'cricket');
    $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
    $slotes_id= isset($request->slotes_id) ? $request->slotes_id :0;
    $fantasy_type = isset($request->fantasy_type_id) ? $request->fantasy_type_id :0;
    $matchkey = $data['matchkey'] =  $request->matchkey;
    $matchkey_data =  DB::table('matchchallenges')->where('id',$challenge_id)->first();
    $matchkey = $matchkey_data->matchkey;
    $players_points = DB::table('matchplayers')->where('playerid',$request->player_id)->where('matchkey',$matchkey)->pluck('points')->first();

            if(empty($players_points)){
              $players_points = 0;
            }


    if(!empty($fantasy_type)){
        if(!empty($slotes_id) && $fantasy_type==1){
            $slotes_id=$slotes_id;
            $fantasy_type=$fantasy_type;
        }else{
          $fantasy_type = $fantasy_type;
        }

    }

    // $this->accessrules();

    $userid =  $data['userid'] =  $request->user_id;
    $new_challenge_id = 0;

    $listmatchestartdate = DB::table('listmatches')->where('matchkey',$matchkey)->select('start_date')->first();

    //echo "<pre>"; print_r($listmatchestartdate); die;

    $getcurrentdate = date('Y-m-d H:i:s');

    $matchremainingdate = @$listmatchestartdate->start_date;

    $Json = array();
    if($getcurrentdate>$matchremainingdate){

      $Json[0]['message'] = 'Match closed';

      return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);

      die;

    }



    $challengeid =  $data['challengeid'] = $challenge_id;

    $checkIsValidChallenge = DB::table('matchchallenges')->where('id', $challengeid)->count();

    if($checkIsValidChallenge < 1) {
      $Json[0]['message'] = 'There is some error, contest is not exist on system';
      return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);
      die;
    }

    $players = DB::table('joinedleauges_duo')->where('player_id',$request->playerid)->where('matchkey', $request->matchkey)->where('challengeid', $challenge_id)->count();

    if(!empty($players)){
      $Json[0]['message'] = 'Player already joined this contest.';

      return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);

      die;

    }

    $userdetailsfind = DB::table('registerusers')->where('id',$userid)->where('activation_status','!=','deactivated')->select('username','email','state')->first();

    //echo "<pre>"; print_r($userdetailsfind); die;

    if(empty($userdetailsfind)) {

      $Json[0]['message'] = 'There is some error please login again.';

      return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);

      die;

    }

    $refercode = $characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

    $refercode = '';

    $max = strlen($characters) - 1;

     for ($i = 0; $i < 6; $i++){

        $refercode.= $characters[mt_rand(0, $max)];

     }

     $data['refercode'] = $refercode;


     $getJoinedTeams = DB::table('joinedleauges_duo')->where('matchkey', $matchkey)->where('userid', $userid)->where('challengeid', $challengeid)->count();
     $findchallenge = DB::table('matchchallenges')->where('id',$challengeid)->first();

     if($findchallenge->status=='closed'){
        $Json[0]['message'] = 'League closed';

        if($findchallenge->loops==0){
          $new_challenge_id = $this->get_new_challenge($findchallenge->id);
        }
        if($new_challenge_id) {

          return Response::json(["status"=>STATUS_FAILURE,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);
        } else {
          return Response::json(["status"=>3,"message"=>$Json[0]['message']]);
        }

        die;

        echo json_encode($Json);die;

      }

      if($findchallenge->win_amount>0){

        if($userdetailsfind->state=='Telangana' || $userdetailsfind->state=='Orissa' || $userdetailsfind->state=='Assam' || $userdetailsfind->state=='Nagaland' || $userdetailsfind->state=='Orissa' || $userdetailsfind->state=='Andhra Pradesh'){

          $Json[0]['message'] = 'Ineligible';

        return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);

        die;

          echo json_encode($Json);die;

        }

      }

      $cur_joined = $findchallenge->joinedusers;
      $cur_joined =  DB::table('joinedleauges_duo')->where('matchkey', $matchkey)->where('challengeid', $challenge_id)->count();

      //find leauges already exist or not //

      $findexistornot = DB::table('joinedleauges_duo')->where('userid',$userid)->where('sport_type',$sportType->id)->where('challengeid',$challengeid)->where('matchkey',$matchkey)->where("player_id", $player_id)->first();
      if(!empty($findexistornot)){

        if($findchallenge->multi_entry==0){
        //  echo "hi"; exit;

          $Json[0]['message'] = 'You have already joined this contest';

          return Response::json(["status"=>3,"message"=>$Json[0]['message']]);

        die;

          echo json_encode($Json);die;

        }

      }

      //check for leauge closed or not //
      $dataused = array();

      $dataleft = array();

      $updatedata['joinedusers'] = $findchallenge->joinedusers+1;
      // print_r($updatedata['joinedusers']); exit;

      if($findchallenge->challenge_type == 'money'){

        if($updatedata['joinedusers']>$findchallenge->maximum_user){

          $Json[0]['message'] = 'League closed';

          return Response::json(["status"=>3,"message"=>$Json[0]['message']]);

        die;

          echo json_encode($Json);die;

        }

      }



      //start deduct money code for join leauge//

      $finduserbalance = DB::table('userbalances')->where('user_id',$userid)->lockForUpdate()->first();

      if(!empty($finduserbalance)){

        $findentryfee = $findchallenge->entryfee;
        $dataleft['bonus'] = $findbonusforuser = $finduserbalance->bonus;

        $dataleft['winning'] = $finduserbalance->winning;

        $dataleft['balance'] = $finduserbalance->balance;

        $totalbonus = $finduserbonus = $finduserbalance->bonus;

        $usedbonus = 0;

        $canusedbonus = 0;

        $totalwining = $canusedwining = $finduserbalance->winning;

        $totalbalance = $canusedbalance = $finduserbalance->balance;

        $totbalan = $finduserbalance->bonus + $finduserbalance->winning + $finduserbalance->balance;

        $findusablebalance = $finduserbalance->balance+$finduserbalance->winning;

        $reminingfee = $findentryfee;

        //find bonus//

        if($findchallenge->bonus == 1){

          $bonus_precent = $findchallenge->bonus_precent;

          $bonus_entry_fee = $findentryfee * $bonus_precent / 100;

          // if(($findusablebalance+($finduserbonus*$bonus_precent/100))<$findentryfee)

          $findusablebalance = $findusablebalance+ $finduserbonus;

          // $finduserbonus = ($finduserbonus * $bonus_precent) / 100;



          if(($finduserbalance->balance+$finduserbalance->winning) < ($findentryfee-$bonus_entry_fee)) {
              $remainingAmount =  ($findentryfee-$bonus_entry_fee) - ($finduserbalance->balance+$finduserbalance->winning);
                $Json[0]['message'] = 'Insufficient balance, please add '.$remainingAmount.' more on your wallet';
            return Response::json(["status"=>3,"message"=>$Json[0]['message']]);

        die;

            echo json_encode($Json);die;

          }

        }

        //start deduct money section//

        if($findusablebalance<$findentryfee){
            $remainingAmount =  $findentryfee - $findusablebalance;
            $Json[0]['message'] = 'Insufficient balance, please add '.$remainingAmount.' more on your wallet';

          return Response::json(["status"=>3,"message"=>$Json[0]['message'],"new_challenge_id" => $new_challenge_id]);

        die;

          echo json_encode($Json); die;

        }



        if($findchallenge->bonus == 1){

          if($finduserbonus >= $bonus_entry_fee){

            $remainingbonus = $finduserbonus-$bonus_entry_fee;

            $dataleft['bonus'] = $dataleft['bonus'] - $bonus_entry_fee;

            $transactiondata['cons_bonus'] = $dataused['bonus'] = $bonus_entry_fee;

            $reminingfee=$findentryfee - $bonus_entry_fee;

          }else{

            $reminingfee = $findentryfee-$finduserbonus;

            $remainingbonus = 0;

            $dataleft['bonus'] = $dataleft['bonus'] - $finduserbonus;

            $transactiondata['cons_bonus'] = $dataused['bonus'] = $finduserbonus;

          }

        }





        if($totalbalance >= $reminingfee){

          $dataleft['balance'] = $totalbalance - $reminingfee;

          $transactiondata['cons_amount'] = $dataused['balance'] = $reminingfee;

          $reminingfee=0;

        }else{

          $reminingfee = $reminingfee-$totalbalance;

          $dataleft['balance'] = 0;

          $transactiondata['cons_amount'] = $dataused['balance'] = $totalbalance;

        }





        if($totalwining >= $reminingfee){

          $dataleft['winning'] = $totalwining - $reminingfee;

          $transactiondata['cons_win'] = $dataused['winning'] = $reminingfee;

          $reminingfee=0;

        }

        else{

          $reminingfee = $reminingfee-$totalwining;

          $dataleft['winning'] = 0;

          $transactiondata['cons_win'] = $dataused['winning'] = $totalwining;

        }

        // yha tk

        $tranid = time();

        // to enter in joined leauges table//

        //$data['transaction_id'] = 'KUBERA-JL-'.$tranid.'-'.$userid;

        $data['transaction_id'] = 'Fanline11-VVP-'.$tranid.'-'.$userid;



        $data['refercode'] = $refercode.'-'.time().''.$userid;



        try {

          if($findchallenge->challenge_type == 'percentage') {

              $leaguesData = ['sport_type' => $sportType->id, 'userid' => $userid, 'challengeid' => $challengeid, 'player_id' => $request->playerid, 'matchkey' => $matchkey,'points' => $players_points,'refercode' => $data['refercode'],'transaction_id' => $data['transaction_id'],'fantasy_type_id' => $fantasy_type,'slotes_id' => $slotes_id, 'pdfcreate' => 0,'sets_id'=>$sets_id,'pdfname' => ''];

              DB::table("joinedleauges_duo")->insert($leaguesData);
              if($getJoinedTeams < 1) {

                // Helpers::update_user_joined_count($matchkey,$userid);
              }
              //$challenge_insert_id = DB::select('SELECT LAST_INSERT_ID()');
          } else {


            $joinedLeaguesCount = DB::table('joinedleauges_duo')->where('challengeid', $challengeid)->count();

            if($joinedLeaguesCount < $findchallenge->maximum_user){
                $availableSlot = $findchallenge->maximum_user - $joinedLeaguesCount;
            }
            $leaguesData = ['sport_type' => $sportType->id, 'userid' => $userid, 'challengeid' => $challengeid, 'player_id' => $request->playerid, 'matchkey' => $matchkey,'points' => $players_points , 'refercode' => $data['refercode'], 'transaction_id' => $data['transaction_id'] ,'fantasy_type_id' => $fantasy_type,'slotes_id' => $slotes_id , 'pdfcreate' => 0,'sets_id'=>$sets_id, 'pdfname' => ''];

            DB::table("joinedleauges_duo")->insert($leaguesData);

              if($getJoinedTeams < 1) {

                // Helpers::update_user_joined_count($matchkey,$userid);
              }
            }

            } catch(\Illuminate\Database\QueryException $ex) {

              if($findchallenge->loops==0){

                $new_challenge_id = $this->get_new_challenge($findchallenge->id);
              }

              // return Response::json(["status"=>3,"message"=>"This contest is full please join another contest","err"=>$ex]);

        }



            // $getinsertid = @$challenge_insert_id->id ? $challenge_insert_id->id : 0; //echo $getinsertid; exit;





        try {



            DB::beginTransaction();


            $joinedLeagues = DB::table('joinedleauges_duo')->where('challengeid',$challengeid)->where('matchkey',$matchkey)->get();
            //entry in leauges transactions//

            if(isset($dataused['bonus']) && $dataused['bonus'] > 0){
              $dataused['bonus'] = $dataused['bonus'];
            }
            if(isset($dataused['balance']) && $dataused['balance'] > 0){
              $dataused['balance'] = $dataused['balance'];
            }
            if(isset($dataused['winning']) && $dataused['winning'] > 0){
              $dataused['winning'] = $dataused['winning'];
            }

            foreach($joinedLeagues as $joinedLeague){

                $dataused['matchkey'] = $matchkey;

                $dataused['user_id'] = $userid;

                $dataused['challengeid'] = $challengeid;

                $dataused['joinid'] = $joinedLeague->id;
                $dataused['player_id'] = $joinedLeague->player_id;

            //    DB::table('leaugestransactions')->insert($dataused);
              $duoCount = DB::table('leaugestransactions_duo')->where('joinid',$joinedLeague->id)->value('id');
              if(empty($duoCount)){
                 DB::table('leaugestransactions_duo')->insert($dataused);
              }


            }

              //updatewallet table//

              DB::table('userbalances')->where('user_id',$userid)->update($dataleft);



              DB::commit();
            //  $this->UpdateUserLevel($userid,$findchallenge);



              $findnowamount = DB::table('userbalances')->where('user_id',$userid)->first();

              //end deduct money section//

              //start entry in transaction table//



              $transactiondata['type'] = 'Challenge Joining Fee';

              $transactiondata['amount'] = $findentryfee;

              $transactiondata['total_available_amt'] = $totbalan - $findentryfee;

              $transactiondata['transaction_by'] = 'wallet';

              $transactiondata['challengeid'] = $challengeid;

              $transactiondata['userid'] = $userid;

              $transactiondata['paymentstatus'] = 'confirmed';

              $transactiondata['bal_bonus_amt'] = $findnowamount->bonus;

              $transactiondata['bal_win_amt'] = $findnowamount->winning;

              $transactiondata['bal_fund_amt'] = $findnowamount->balance;

              $transactiondata['transaction_id'] = $data['transaction_id'];

              DB::table('transactions')->insert($transactiondata);






        } catch(\Illuminate\Database\QueryException $ex) {

          DB::rollback();

          $message = $ex->getCode();

          if($message==45000) {}

        }



        $notificationdata['userid'] = $userid;

        $notificationdata['title'] = 'Challenge entry fees Rs.'.$findentryfee;

        //DB::table('notifications')->insert($notificationdata);

        $titleget = 'Confirmation - joined challenge!';

        //Helpers::sendnotification($titleget,$notificationdata['title'],'',$userid);

      }

      $updatedata_new = array();


        $last_challenge_id=0;
      if(($cur_joined+1)>=$findchallenge->maximum_user){

        //close challenge//

        //

        if($findchallenge->challenge_type == 'money') {
           $updatedata['status']='closed';
           $updatedata_new['status'] = 'closed';
        }
        if( $findchallenge->challenge_type == 'money' && $findchallenge->loops==0){

          $updatedata['status']='closed';

          $updatedata_new['status'] = 'closed';

          //new duplicate challenge//
        $last_challenge_id= $this->createNewChallenge($findchallenge->id);

        }

      }



      $updatedata_new['joinedusers'] = $cur_joined+1;

      DB::table('matchchallenges')->where('id',$challengeid)->update($updatedata_new);

      // $upRegData['is_free_joined'] = 1;
      // DB::table('registerusers')->where('id',$userid)->update($upRegData);


      $Json[0]['message'] = 'League joined';

      $Json[0]['status'] = true;

      $Json[0]['grand'] = $findchallenge->grand;

      $Json[0]['joinedusers'] = $updatedata_new['joinedusers'];

      if($findchallenge->is_private!="" || $findchallenge->is_private!=0){

        $Json[0]['is_private'] = true;

      }

      else{

        $Json[0]['is_private'] = false;

      }

      if($findchallenge->multi_entry!="" || $findchallenge->multi_entry!=0){

        $Json[0]['multi_entry'] = true;

      }

      else{

        $Json[0]['multi_entry'] = false;

      }

      $Json[0]['refercode'] = $data['refercode'];
      $Json[0]['isjoined'] = 1;

      $notificationTitle='Hello';
      $notificationMessage='Hello';
      $contestData = array();
      $contestData['user_id'] = $userid;

      $contestData['challengeid'] = $findchallenge->id;

      $contestData['new_challengeid'] =$last_challenge_id;





      return Response::json(["status"=>STATUS_SUCCESS,"message"=>$Json[0]['message'],"result"=>$Json,"new_challenge_id" => $new_challenge_id]);

        die;



      echo json_encode($Json);

      die;

   }

public function myjoinedleagues_vvp(Request $request){
    $this->validate($request,[
      'matchkey' => 'required',
      'user_id' => 'required'
    ]);
    $matchkey = $data['matchkey'] =  $request->matchkey;
    $userid =  $data['userid'] =  $request->user_id;
    $is_live = (isset($request->is_live) ? $request->is_live : 0);
    $sets_id = $request->sets_id;
    $sets_ids = array();
    $sets_ids = DB::table('matchplayer_duo')->where('match_key' , $matchkey)->pluck('sets_id');
    $Json = array();
    $findjoinedleauges = DB::table('joinedleauges_duo')
    ->join('matchchallenges','matchchallenges.id','=','joinedleauges_duo.challengeid')
    ->join('players','players.id','=','joinedleauges_duo.player_id')
    ->where('joinedleauges_duo.matchkey',$matchkey)
    ->where('joinedleauges_duo.userid',$userid)
    ->whereIn('joinedleauges_duo.sets_id',$sets_ids)
    ->select('joinedleauges_duo.status','joinedleauges_duo.id as joinid',
    'players.player_name','joinedleauges_duo.player_id','matchchallenges.status AS matchchallenges_status'
    ,'matchchallenges.id','matchchallenges.entryfee','joinedleauges_duo.challengeid as challenge_id','joinedleauges_duo.sets_id')
   ->groupBy('matchchallenges.id')->get();
   // echo "<pre>"; print_r($findjoinedleauges); exit;


   $challengeidArray=array();
      foreach($findjoinedleauges as $v){
        $v->league_name = 'Duo';
          $v->pdf = '';
          if($v->status=='canceled' ||$v->matchchallenges_status=='canceled'){
              $v->status = 'canceled';

          }else{
            $v->status =$v->status;
          }
          $challengeidArray[]=$v->id;


          //  $v->winning_text = '';

      }
      $winning_text="";
      $winner = DB::table('finalresults_duo')->where('userid',$userid)->whereIn('challengeid', $challengeidArray)->count('id');
      if(!empty($winner)){
        $winning_text = 'Well Tried Champion!';
    }else{
      $winning_text ="";
    }



$Json['duo_annoucement'] = 'In your League if your player or your oppoenent\'s Player is not Playing XI then league will be cancelled and joining amounts will be Refunded';
$Json['is_duo_annoucement_visible'] = 1;
$Json['data'] = $findjoinedleauges;

$Json["winning_text"]="Well Tried Champion!";
$Json["is_winning_text_visible"]=1;

$data=array();
$data["winning_text"]=$winning_text;
$data["data"]=$findjoinedleauges;

    return Response::json(["status" => STATUS_SUCCESS,"result"=>$data]);

    die;

  }


      public function showPlayerPoints(Request $request) {
        $this->validate($request,[
          'user_id' => 'required',
          'player_id' => 'required',
          'matchkey' => 'required'
        ]);
        $matchkey = $request->matchkey;
        $sport_type = (isset($request->sport_key) ? $request->sport_key : CRICKET);
        $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
        $user_id = $request->user_id;
        $player_id = $request->player_id;
        $point_sport_types = array(
          "CRICKET" =>  'player_name,
          players.player_key,
          players.credit,
          playerdetails.image,
          result_matches.player_id,
          teams.team,
          sum(startingpoints) as startingpoints,
          sum(result_points.runs) as runs,
          sum(result_points.fours) as fours,
          sum(result_points.sixs) as sixs,
          sum(result_points.strike_rate) as actual_strike_rate,
          sum(result_matches.strike_rate) as strike_rate,
          sum(halcentury) as halcentury,
          sum(halcentury) as actual_halcentury,
          sum(century) as century,
          sum(century) as actual_century,
          sum(result_matches.duck) as duck,
          sum(wickets)as actual_wickets,
          sum(result_matches.lbw_bowled) as lbw_bowled,
          sum(result_points.bonus) as bonus,

          sum(result_matches.wicket) as wickets,
          sum(result_points.economy_rate) as actual_economy_rate,
          sum(result_matches.economy_rate) as economy_rate,
          sum(maidens) as maidens,
          sum(result_points.runouts) as actual_runouts,
          sum(result_points.runout_thrower) as actual_runout_thrower,
          sum(result_points.runout_catcher) as actual_runout_catcher,
          sum(result_matches.runout_thrower) as runout_thrower,
          sum(result_matches.runout_catcher) as runout_catcher,
          sum(result_points.catch) as actual_catch_points,
          sum(result_matches.catch) as catch_points,
          sum(stumping) as stumping,
          sum(total) as total,
          sum(total) as total_points,
          sum(total) as actual_total_points,
          sum(total) as points,
          sum(not_out) as not_out,
          sum(result_points.negative) as negative,
          sum(stumbed) as actual_stumping,
          sum(result_points.lbw_bowled) as actual_lbw_bowled,
          sum(result_points.bonus) as actual_bonus,

          sum(result_matches.runs) as actual_runs,
          sum(result_matches.fours) as actual_fours,
          sum(result_matches.starting11) as actual_startingpoints,
          sum(result_matches.six) as actual_sixs,
          sum(result_matches.maiden_over) as actual_maidens,
          sum(result_points.duck) as actual_duck,
          sum(result_matches.runouts) as actual_runouts,
          sum(result_matches.negative_points) as negative_points_actual,
          sum(result_matches.notout) as actual_notout',
          "FOOTBALL" => "player_name,
          players.player_key,
          players.credit,
          playerdetails.image,
          result_matches.player_id,
          teams.team,
          sum(result_points.minutesplayed) as minutesplayed,
          sum(result_matches.minutesplayed) as actual_minutesplayed,
          sum(result_points.goals) as goals,
          sum(result_matches.goals) as actual_goals,
          sum(result_points.assist) as assist,
          sum(result_matches.assist) as actual_assist,
          sum(result_points.totalpass) as totalpass,
          sum(result_matches.totalpass) as actual_totalpass,
          sum(result_points.shotsontarget) as shotsontarget,
          sum(result_matches.shotsontarget) as actual_shotsontarget,
          sum(result_points.cleansheet) as cleansheet,
          sum(result_matches.cleansheet) as actual_cleansheet,
          sum(result_points.shotsblocked) as shotsblocked,
          sum(result_matches.shotsblocked) as actual_shotsblocked,
          sum(result_points.penaltysave) as penaltysave,
          sum(result_matches.penaltywon) as actual_penaltysave,
          sum(result_points.tacklesuccess) as tacklesuccess,
          sum(result_matches.tacklesuccess) as actual_tacklesuccess,
          sum(result_points.yellowcard) as yellowcard,
          sum(result_matches.yellowcard) as actual_yellowcard,
          sum(result_points.redcard) as redcard,
          sum(result_matches.redcard) as actual_redcard,
          sum(result_points.owngoals) as owngoals,
          sum(result_matches.owngoals) as actual_owngoals,
          sum(result_points.penaltymiss) as penaltymiss,
          sum(result_matches.penaltymiss) as actual_penaltymiss,
          sum(result_points.goalconceded) as goalconceded,
          sum(result_matches.goalconceded) as actual_goalconceded,
          sum(result_points.total) as total_points,
          sum(result_matches.total_points) as actual_total_points,
          sum(result_points.total) as points",
          "BASKETBALL" => "player_name,
          players.player_key,
          players.credit,
          playerdetails.image,
          result_matches.player_id,
          teams.team,
          sum(result_points.pointscored) as pointscored,
          sum(result_matches.pointscored) as actual_pointscored,
          sum(result_points.rebound) as rebound,
          sum(result_matches.rebound) as actual_rebound,
          sum(result_points.assist) as assist,
          sum(result_matches.assist) as actual_assist,
          sum(result_points.steal) as steal,
          sum(result_matches.steal) as actual_steal,
          sum(result_points.block) as block,
          sum(result_matches.block) as actual_block,
          sum(result_points.turnover) as turnover,
          sum(total) as total,
          sum(total) as total_points,
          sum(total) as actual_total_points,
          sum(total) as points,
          sum(result_matches.turnover) as actual_turnover",
        );
        $sport_type_array = array(
          "CRICKET" =>  [
            //      'player_name',
            // 'player_key',
            // 'player_id',
            // 'team',
            'credit',
            'startingpoints',
            'runs',
            'fours',
            'sixs',
            'strike_rate',
            'halcentury',
            'century',
            'duck',
            'wickets',
            'maidens',
            'not_out',
            'stumping',
            'bonus',

            'lbw_bowled',
            'total',
            'total_points',
            'actual_total_points',
            'economy_rate',
            'runouts',
            'negative',
            'runout_thrower',
            'runout_catcher',
            'catch_points',
            'actual_stumping',
            'actual_runs',
            'actual_fours',
            'actual_startingpoints',
            'actual_sixs',
            'actual_strike_rate',
            'actual_wickets',
            'actual_maidens',
            'actual_economy_rate',
            'actual_lbw_bowled',
            'actual_duck',
            'actual_runouts',
            'negative_points_actual',
            'actual_catch',
            'actual_notout',
            'actual_runout_thrower',
            'actual_runout_catcher']
            ,
            "FOOTBALL" => [
              'credit',
              'minutesplayed',
              'actual_minutesplayed',
              'goals',
              'actual_goals',
              'assist',
              'actual_assist',
              'totalpass',
              'actual_totalpass',
              'cleansheet',
              'actual_cleansheet',
              'shotsblocked',
              'actual_shotsblocked',
              'penaltysave',
              'actual_penaltysave',
              'tacklesuccess',
              'actual_tacklesuccess',
              'yellowcard',
              'actual_yellowcard',
              'redcard',
              'actual_redcard',
              'owngoals',
              'actual_owngoals',
              'penaltymiss',
              'actual_penaltymiss',
              'goalconceded',
              'actual_goalconceded',
              'total_points',
              'actual_total_points'


              ],
              "BASKETBALL" => [
                'pointscored','actual_pointscored','rebound','actual_rebound',
                'assist',
                'actual_assist',
                'steal',
                'actual_steal',
                'block',
                'actual_block',
                'turnover',
                'actual_turnover'
                ]

              );
              $points_colums = $point_sport_types[$sport_type];
              $players = ResultPoint::join('result_matches','result_matches.id','=','result_points.resultmatch_id')->join('players','players.id','=','result_points.playerid')->join('playerdetails','playerdetails.player_key','=','players.player_key')->leftjoin('teams','players.team','=','teams.id')->where('starting11','!=',0)->where('result_matches.sport_type',$sportType->id)->where('matchkey',$matchkey)->where('result_matches.player_id', $player_id)->select(DB::raw(
                $points_colums)
                )->orderBy('total','desc')->groupBy('result_matches.player_id')->get();
                $array_diff = array();
                $result = $players;
                foreach ($players as $key => $value) {
                  $player_id = $value->player_id;
                  $total_choose = JoinTeam::whereRaw('FIND_IN_SET('.$player_id.',players)')->where('sport_type', $sportType->id)->where('matchkey', $matchkey)->count();//->select(DB::raw("COUNT(id) as total_count"))->get();
                  $total_selected = $total_choose;
                  $totalTeams =  JoinTeam::where('matchkey', $matchkey)->count();
                  if($totalTeams) {
                    $selected_by = (int)number_format((($total_selected * 100) / $totalTeams), 2);
                    $selected_by = $selected_by;
                    $players[$key]->selected_by = (string) $selected_by;
                  } else{
                    $players[$key]->selected_by = "0";
                  }
                  $players[$key]->points = is_null($value->points) ? 0 : $value->points;
                  $choose = JoinTeam::whereRaw('FIND_IN_SET('.$player_id.',players)')->where('matchkey', $matchkey)->where('userid', $user_id)->get();
                  if(empty($choose)) {
                    $players[$key]->isSelected = 0;
                  } else {
                    $players[$key]->isSelected = 1;
                  }
                  $players[$key]->image = PLAYERS_DIRECTORY_URL.$value->image;
                  $players[$key]->isSelected  = 1;
                  $array = json_decode(json_encode($players[$key]), true);
                  foreach ($array as $k => $v) {
                    if (in_array(key($array), $sport_type_array[$sport_type])) {
                      $breakup = array(
                        "event_name" =>  key($array),
                        // "event_name" =>  ucfirst($event_name),
                        "actual" => isset($array[$k]) ? number_format($array[$k],2) : 0,
                        "actual_points" => isset($array['actual_'.$k]) ? number_format($array['actual_'.$k],2) : 0);
                        // print_r($breakup);
                        if ($sportType->id == 3) {
                          $breakup = array(
                            "event_name" =>  key($array),
                            // "event_name" =>  ucfirst($event_name),
                            "actual" => isset($array['actual_'.$k]) ? $array['actual_'.$k] : 0,
                            "actual_points" =>  isset($array[$k]) ? $array[$k] : 0);
                          }
                          $get_name_to_show = [
                            'startingpoints' => 'Starting 11',
                            'runs' => 'Run',
                            'fours' => '4\'s',
                            'sixs' => '6\'s',
                            'strike_rate' => 'S/R',
                            'century' => '30/50/100 Runs Bonus',
                            'duck' => 'Duck',
                            'wickets' => 'Wkts',
                            'economy_rate' => 'E/R',
                            'maidens' => 'Maider Over',
                            'runouts' => 'Run Out',
                            'runout_thrower' => 'Runout thrower',
                            'runout_catcher' => 'Runout catcher',
                            'catch_points' => 'Catch',
                            'stumping' => 'Stumping',
                            'lbw_bowled' => 'LBW/Bowled Bonus',

                            'bonus' => '2/3/4/5 wicket Bonus',
                            'pointscored' => 'Scored Points',
                            'rebound' => 'Rebound',
                            'assist' => 'Assist',
                            'steal' => 'Steal',
                            'block' => 'Block',
                            'turnover' => 'Turnover',
                            'minutesplayed' => 'Minutes played',
                            'goals' => 'Goals',
                            'assist' => 'Assist',
                            'totalpass' => 'Total ass',
                            'cleansheet' => 'Clean sheet',
                            'shotsblocked' => 'Shots blocked',
                            'penaltysave' => 'Penalty save',
                            'tacklesuccess' => 'Tackle success',
                            'yellowcard' => 'Yellow card',
                            'redcard' => 'Red card',
                            'owngoals' => 'Own goals',
                            'penaltymiss' => 'Penalty miss',
                            'goalconceded' => 'Goal conceded',
                            'total_points' => 'Total points',
                          ];
                          if (key($array) == 'startingpoints') {
                            $breakup['actual'] = ($breakup['actual'] == 4) ? "Yes" : "No";
                            $breakup['actual_points'] = 4;
                          }
                          if (key($array) == 'not_out') {
                            $breakup['actual'] = ($breakup['actual_points'] == 1) ? "Yes" : "No";
                          }
                          if (key($array) == 'duck') {
                            $breakup['actual'] = ($breakup['actual'] == 1) ? "Yes" : "No";
                          }
                          if (key($array) == 'wining') {
                            $breakup['actual'] = ($breakup['actual_points'] >= 1) ? "Yes" : "No";
                          }
                          if (key($array) == 'halcentury') {
                            $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
                          }
                          if (key($array) == 'bonus') {
                            $breakup['actual'] = ($breakup['actual_points'] > 0) ? "Yes" : "No";
                          }

                          if (key($array) == 'lbw_bowled') {
                            $breakup['actual'] = $breakup['actual'];
                          }
                          if (key($array) == 'century') {
                            $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
                          }
                          if (key($array) == 'point150') {
                            $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
                          }
                          if (key($array) == 'point200') {
                            $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
                          }
                          if (key($array) == 'sixs') {
                            $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
                            $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
                          }
                          if (key($array) == 'turnover') {
                            $breakup['actual'] = isset($array[$k]) ? $array[$k] : '';
                            $breakup['actual_points'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
                          }
                          if (array_key_exists(key($array),$get_name_to_show)) {
                            $breakup['event_name'] = $get_name_to_show[key($array)];
                            array_push($array_diff,$breakup);
                          } else {
                            unset($breakup);
                          }
                        }
                        next($array);
                      }
                      $result[$key]->breakup_points = $array_diff;
                      $breakup = [];
                      $array_diff = [];
                    }
                    $result = $players;
                    $total_teams = JoinTeam::where('matchkey', $matchkey)->where('sport_type', $sportType->id)->count();
                    $totalTeams = $total_teams;
                    if ($players->isEmpty() || $players==null || $players=="") {
                      $players = DB::table('matchplayers')->join('players','players.id','=','matchplayers.playerid')->join('playerdetails','playerdetails.player_key','=','players.player_key')->join('teams','teams.id','=','players.team')->where('matchplayers.playerid', $player_id)->select('players.player_name','players.player_key','matchplayers.credit','playerdetails.image','players.id as player_id','teams.team')->first();
                      // $players->credit = 0;
                      $players->startingpoints = 0;
                      $players->runs = 0;
                      $players->fours = 0;
                      $players->sixs = 0;
                      $players->actual_strike_rate = 0;
                      $players->strike_rate = 0;
                      $players->halcentury = 0;
                      $players->century = 0;
                      $players->duck = 0;
                      $players->actual_wickets = 0;
                      $players->wickets = 0;
                      $players->actual_economy_rate = 0;
                      $players->economy_rate = 0;
                      $players->maidens = 0;
                      $players->actual_runouts = 0;
                      $players->actual_runout_thrower = 0;
                      $players->actual_runout_catcher = 0;
                      $players->runout_thrower = 0;
                      $players->runout_catcher = 0;
                      $players->actual_catch_points = 0;
                      $players->catch_points = 0;
                      $players->stumping = 0;
                      $players->total = 0;
                      $players->total_points = 0;
                      $players->actual_total_points = 0;
                      $players->points = 0;
                      $players->not_out = 0;
                      $players->negative = 0;
                      $players->actual_stumping = 0;
                      $players->actual_runs = 0;
                      $players->actual_fours = 0;
                      $players->actual_startingpoints = 0;
                      $players->actual_sixs = 0;
                      $players->actual_maidens = 0;
                      $players->actual_duck = 0;
                      $players->negative_points_actual = 0;
                      $players->actual_notout = 0;
                      $players->selected_by = 0;
                      $players->isSelected = 0;
                      $players->breakup_points = [
                        [
                          "event_name"=> "Starting 11",
                          "actual"=> "No",
                          "actual_points"=> 0
                        ],
                        [
                          "event_name"=> "Run",
                          "actual"=> "0",
                          "actual_points"=> "0"
                        ],
                        [
                          "event_name"=> "4's",
                          "actual"=> "0.00",
                          "actual_points"=> "0.00"
                        ],
                        [
                          "event_name"=> "6's",
                          "actual"=> "0",
                          "actual_points"=> 0
                        ],
                        [
                          "event_name"=> "S/R",
                          "actual"=> "00.00",
                          "actual_points"=> "0.00"
                        ],
                        [
                          "event_name"=> "100's",
                          "actual"=> 0,
                          "actual_points"=> 0
                        ],
                        [
                          "event_name"=> "Duck",
                          "actual"=> "No",
                          "actual_points"=> "0.00"
                        ],
                        [
                          "event_name"=> "Wkts",
                          "actual"=> "0.00",
                          "actual_points"=> "0.00"
                        ],
                        [
                          "event_name"=> "E/R",
                          "actual"=> "0.00",
                          "actual_points"=> "0.00"
                        ],
                        [
                          "event_name"=> "Maider Over",
                          "actual"=> "0.00",
                          "actual_points"=> "0.00"
                        ],
                        [
                          "event_name"=> "Runout thrower",
                          "actual"=> "0.00",
                          "actual_points"=> "0.00"
                        ],
                        [
                          "event_name"=> "Runout catcher",
                          "actual"=> "0.00",
                          "actual_points"=> "0.00"
                        ],
                        [
                          "event_name"=> "Catch",
                          "actual"=> "0.00",
                          "actual_points"=> "0.00"
                        ],
                        [
                          "event_name"=> "Stumping",
                          "actual"=> "0.00",
                          "actual_points"=> "0.00"
                        ],
                        [
                          "event_name"=> "Total points",
                          "actual"=> "0.00",
                          "actual_points"=> "0.00"
                        ]
                      ];
                      $result[] = $players;
                    }
                    return Response::json(["status" => STATUS_SUCCESS,"message" => "Player point will be available when match goes live","result" => $result]);
                    die;
                  }

/* ######  JOINED LEAGUE VVP ####### */

public function getplayerlist(Request $request){

date_default_timezone_set('Asia/Kolkata');
$matchkey = $request->matchkey;
$sport_type = (isset($request->sport_key) ? $request->sport_key : CRICKET);
// $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
$fantasy_type = (isset($request->fantasy_type) ? $request->fantasy_type : 0);
if($fantasy_type == 4){
  $fantasy_type = 0;
}
if($sport_type === 'LIVE'){
  $sport_type = CRICKET;
}
$sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);
$Json = array();
$findmatch = ListMatch::where('listmatches.matchkey',$matchkey)->where('listmatches.sport_type',$sportType->id)->join('teams as t1','t1.id','=','listmatches.team1')
->join('teams as t2','t2.id','=','listmatches.team2')
->select('listmatches.team1','listmatches.series','listmatches.team2','t1.short_name as team1display','t2.short_name as team2display','t1.color as team1color','t2.color as team2color','listmatches.start_date')->first();
if(!empty($findmatch)){
$team1 = $findmatch->team1;
$team2 = $findmatch->team2;
$getseries = $findmatch->series;

$points = Cache::remember('series_points_'.$matchkey, 1440, function () use ($getseries)
{
$allmatchkey = array();
$findallmatches = ListMatch::where('series',$getseries)->select('listmatches.matchkey')->get();
if(!empty($findallmatches)){
foreach($findallmatches as $matches){
$allmatchkey[] = $matches->matchkey;
}
}
$players_points = ResultPoint::whereIn('matchkey',$allmatchkey)
->where('fantasy_type_id' , 0)
->select(DB::raw('SUM(total) as totalpoints, playerid'))->groupBy('playerid')->get();

$points = array();
foreach ($players_points as $key => $value) {
$points[$value->playerid] = $value->totalpoints;
}
return $points;
});
$playing11 = array();
$getcurrentdate = $this->getDateCommon();
$tosstime = date('Y-m-d H:i:s', strtotime('-100 minutes', strtotime($findmatch->start_date)));
$playing11 = 0;
// echo $getcurrentdate; exit;
//if($getcurrentdate>$tosstime){
if($getcurrentdate>$tosstime){
$find_playing_11 = DB::table('match_playing11')->where('match_key', $matchkey)->first();
// print_r($find_playing_11); exit;
if(empty($find_playing_11)) {
$playing11 = array();
} else {
$playing11 = unserialize($find_playing_11->player_ids);
}
$playing11 = implode(',', $playing11);
}
// echo "<pre>"; print_r($playing11); exit;
$findpplayers = MatchPlayer::where('matchplayers.matchkey',$matchkey)
->where('matchplayers.sport_type',$sportType->id)
->where('players.sport_type',$sportType->id)
// ->whereIn('matchplayers.playerid',$playing11)
->where('playerdetails.sport_type',$sportType->id)
->join('players','matchplayers.playerid','=','players.id')
->join('listmatches','listmatches.matchkey','=','matchplayers.matchkey')
->join('playerdetails','players.player_key','=','playerdetails.player_key')
->select(DB::raw($team1.' AS team1,'.$team2.' AS team2,"'.$playing11.'" AS playing, "'.$findmatch->team1display.'" AS team1display, "'.$findmatch->team2display.'" AS team2display, "'.$findmatch->team1color.'" AS team1color, "'.$findmatch->team2color.'" AS team2color'),'players.team','matchplayers.matchkey','matchplayers.role as playerrole','matchplayers.credit as playercredit','matchplayers.role','matchplayers.name as playername','players.id as pid','players.points as points','playerdetails.player_key as playerkey',
'playerdetails.sport_type as sport_type_p',
'listmatches.title as match_title' , 'listmatches.season as match_season','playerdetails.image as image','matchplayers.selected_percent','matchplayers.selected_captain_percent','matchplayers.selected_vicecaptain_percent','matchplayers.last_match_played')->orderBy('matchplayers.credit','DESC')->groupBy('players.id')->get();

if(!empty($findpplayers)){
$i=0;
foreach ($findpplayers as $key => $value) {
$findpplayers[$key]->series_points = $points;
$findpplayers[$key]->is_playing = in_array($value->pid,(explode(',', $value->playing))) ? 1 : 1;
}

$findpplayers = $findpplayers->sortByDesc('is_playing');


$lineupText = 'Lineup feature is for your convenience. Please do due research before creating team.';
$is_visible_lineup = 1;
$is_visible_uploadscreenshot = 0;


$limitArr = CommonHelper::$playerLimit[$sport_type];
if($fantasy_type == 2 || $fantasy_type == 3){
  $limitArr = array('maxplayers' => 5 ,'team_max_player' => 3 ,'total_credits' => 45);
}
// if($request->user_id != 279907  || $request->user_id != 14){


if( $fantasy_type == 1){
    $limitArr = array('maxplayers' => 5 ,'team_max_player' => 5 ,'total_credits' => 45);
   }
 // }

return Response::json(["status" => STATUS_SUCCESS,"message"=>"",
"is_visible_lineup"=>$is_visible_lineup,"is_visible_uploadscreenshot"=>$is_visible_uploadscreenshot,"lineup_text"=>$lineupText,"result"=> MatchPlayerResource_new_v2::collection($findpplayers),'limit' => $limitArr]); die;
}
}
$lineupText = 'Lineup feature is for your convenience. Please do due research before creating team.';
return Response::json(["status" => STATUS_SUCCESS,"lineup_text"=>$lineupText,"result"=>$Json]);
die;
}


    public function liveMatches(Request $request){
        $this->validate($request,[
        'user_id' => "required"
      ]);
        $innings = array();
    $user_id = $request->user_id;
    $matchkey = isset($request->matchkey) ? $request->matchkey : "";
    $total_estimated_winning = 0;
    $team_score_query = DB::table('live_teams_score');
    $team_score_query_with_matchkey = $team_score_query->orderBy('updated_at','ASC')->first();
    $team_score = $team_score_query->get();
    $first_match_key = $team_score_query->orderBy('updated_at','ASC')->first();
    $all_matchkey_live = DB::table('live_teams_score')->select('matchkey')->groupBy('matchkey')->get();

    $i = 0;
    $all_match_keys = array();
    foreach ($all_matchkey_live as $all_match) {
      $all_match_keys[$i] = $all_matchkey_live[$i]->matchkey;
      $i++;
    }


      $findalllivematches = ListMatch::where('status','started')->where('launch_status','launched')->select('title','short_name','start_date','matchkey','format')->get();
      $i=0;

      $Json=array();
      $match_arr = 0;
      if(!is_null($findalllivematches)){

        foreach($findalllivematches as $livematch){
          $Json = array();

          $matchkey = $livematch->matchkey;

          if (in_array($livematch->matchkey, $all_match_keys)) {


          $Json['matchkey'] = $livematch->matchkey;
          $Json['status'] = 1;
          $Json['teams'] = array();
          $Json['top_players'] = array();
          $Json['top_scorer'] = array();

          if ($livematch->matchkey == $matchkey) {

          $top_players = MatchPlayer::where('matchkey',$matchkey)
          ->join('players','matchplayers.playerid','=','players.id')
          ->join('playerdetails','playerdetails.player_key','=','players.player_key')
          ->select('matchplayers.id','matchplayers.name','matchplayers.points','playerdetails.image')->orderBy('points','DESC')->take(7)->get();

          foreach ($top_players as $pl) {
            $pl->image = PLAYERS_DIRECTORY_URL.$pl->image;
          }
          $Json['top_players'] = $top_players;

          $x = 0;
          $team = DB::table('live_teams_score')->join('teams','teams.team_key','=','live_teams_score.team_id')->where('matchkey',$matchkey)->groupBy('team_id')->get();

          // $team_url = Team::where('team_key',$team->team_id)->select('logo')->first();


          foreach ($team as $te) {
            $te->image = TEAMS_DIRECTORY_URL.$te->logo;
            $te->scores = $te->scores;
          $innings_count_for_match = DB::table('live_teams_score')->where('matchkey',$matchkey)->get();

            if (count($innings_count_for_match) == 4) {
              $te->scores_inning_1 = DB::table('live_teams_score')->where('matchkey',$matchkey)->where('inning',2)->where('team_id',$te->team_id)->first()->scores_full;
              $te->overs_inning_1 = DB::table('live_teams_score')->where('matchkey',$matchkey)->where('inning',2)->where('team_id',$te->team_id)->first()->overs;
            }
          }
          $Json['teams'] = $team;
          $top_scorer = DB::table('live_players_score')->where('matchkey',$matchkey)->groupBy('batsman_id')->orderBy('run','DESC')->take(2)->get();

          $Json['top_scorer'] = $top_scorer;

           $Json['title'] = $livematch->title;

          $joined_leagues = JoinedLeague::where('matchkey',$matchkey)->where('userid',$user_id)->select('challengeid')->get();
          $j=0;
          foreach ($joined_leagues as $joined) {
          $leaderboard[$j] = Leaderboard::where('challenge_id',$joined->challengeid)->where('user_id',$user_id)->select('challenge_id','rank')->first();
          $j++;
          }
          if(!empty($leaderboard)) {
          foreach ($leaderboard as $leader) {
            $price_card = MatchPriceCard::where('challenge_id',$leader->challenge_id)->get();
            foreach ($price_card as $price) {
               if ($price->min_position <= $leader->rank && $price->max_position > $leader->rank) {
                $total_estimated_winning += $price->price;
              }
            }
          }
          }
          $Json['estimated_win'] = $total_estimated_winning;

          $c = count(JoinTeam::where('userid',$request->user_id)->where('matchkey',$matchkey)->get());
          $Json['user_teams'] = $c;


          $Json['short_name'] = $livematch->short_name;

          $Json['format'] = $livematch->format;

          $Json['start_date'] = date('M d Y h:i:a',strtotime($livematch->start_date));
          $teamscore = DB::table('live_teams_score')->where('matchkey',$matchkey)->select('short_name','scores_full','overs','team_id')->groupBy('team_id')->get();

          }
          $innings[$match_arr] = (object) $Json;

          $match_arr++;
          }
      $i++;
          }


          if ($request->user_id != 4825) {
            $innings = [];
          }
          return Response::json(["status" => STATUS_SUCCESS,"matches"=>$innings]);
      }
      else{

       return Response::json(["status" => STATUS_FAILURE,"message"=> "There are no live matches as of Now.","matches"=>$innings]);
      }

    }

    public function liveScoreBoard(Request $request) {
       $this->validate($request,[
        'user_id' => "required",
        'matchkey' => "required"
      ]);
      $matchkey = $request->matchkey;

      $teamscore = DB::table('live_teams_score')->where('matchkey',$matchkey)->select('short_name','scores_full','overs','team_id','inning','sort')->get();

      $team1_score_query = DB::table('live_teams_score')->where('matchkey',$matchkey)->where('number',1);
      $team2_score_query = DB::table('live_teams_score')->where('matchkey',$matchkey)->where('number',2);

      $team1_score = $team1_score_query->select('short_name','scores_full','overs','team_id','inning','sort','extra_run')->get();
      $team2_score = $team2_score_query->select('short_name','scores_full','overs','team_id','inning','sort','extra_run')->get();
      if (!empty($team1_score)) {
      $team_url_1 = Team::where('team_key',$team1_score[0]->team_id)->select('logo')->first();
      }
      if (!empty($team2_score)) {
      $team_url_2 = Team::where('team_key',$team2_score[0]->team_id)->select('logo')->first();
      }


      $team_url_1_image = ( isset($team_url_1->logo) ? TEAMS_DIRECTORY_URL. $team_url_1->logo : DEFAULT_TEAM_IMAGE);
      $team_url_2_image = ( isset($team_url_2->logo) ? TEAMS_DIRECTORY_URL. $team_url_2->logo : DEFAULT_TEAM_IMAGE);
      if (!empty($team1_score)) {
      $players_score_team_1_query = DB::table('live_players_score')->where('matchkey',$matchkey)->where('team_id',$team1_score[0]->team_id)->select('name','run','ball','four','six','inning','app_points','how_out');
      }
      if (!empty($team2_score)) {
      $players_score_team_2_query = DB::table('live_players_score')->where('matchkey',$matchkey)->where('team_id',$team2_score[0]->team_id)->select('name','run','ball','four','six','inning','app_points','how_out');
      }

      if (!empty($team2_score)) {
      $bowlers_score_team_1_query = DB::table('live_bowlers_score')->where('matchkey',$matchkey)->where('team_id',$team2_score[0]->team_id)->select('name','runs','overs','maidens','wickets','inning','dots');
      }
      if (!empty($team1_score)) {
      $bowlers_score_team_2_query = DB::table('live_bowlers_score')->where('matchkey',$matchkey)->where('team_id',$team1_score[0]->team_id)->select('name','runs','overs','maidens','wickets','inning','dots');
      }


      $i=0;
      $team1_innings = $team1_score_query->select('inning')->get();
      $team2_innings = $team2_score_query->select('inning')->get();
      // print_r($team1_score);
      // print_r($team2_score);die;
      foreach ($team1_score as $team) {
      $innings1['innings'][$i] = $team;
      $j=0;
      $k=0;
      $inning = $team1_innings[$i]->inning;
      $players_score_team_1_query = DB::table('live_players_score')->where('matchkey',$matchkey)->where('team_id',$team1_score[0]->team_id)->select('name','run','ball','four','six','inning','app_points','how_out');
       $bowlers_score_team_1_query = DB::table('live_bowlers_score')->where('matchkey',$matchkey)->where('team_id',$team2_score[0]->team_id)->select('name','runs','overs','maidens','wickets','inning','dots');


      $players_score_team_1 = $players_score_team_1_query->where('inning',$inning)->get();
      $bowlers_score_team_1 = $bowlers_score_team_1_query->where('inning',$inning)->get();

       $innings1['innings'][$i]->players  = [];
      foreach ($players_score_team_1 as $ps) {
      $ps_array = get_object_vars($ps);
      $ps = $ps_array;
      $innings1['innings'][$i]->players[$j] =  $ps;
      $j++;
      }
      $innings1['innings'][$i]->bowlers  = [];
      foreach ($bowlers_score_team_1 as $ps) {
      $ps_array = get_object_vars($ps);
      $ps = $ps_array;
      $innings1['innings'][$i]->bowlers[$k] =  $ps;
      $k++;
      }
      $i++;
      }
      $i=0;
      foreach ($team2_score as $team) {
      $innings2['innings'][$i] = $team;
      $j=0;
      $k=0;
      $inning = $team2_innings[$i]->inning;
      $players_score_team_2_query = DB::table('live_players_score')->where('matchkey',$matchkey)->where('team_id',$team2_score[0]->team_id)->select('name','run','ball','four','six','inning','app_points','how_out');
      $bowlers_score_team_2_query = DB::table('live_bowlers_score')->where('matchkey',$matchkey)->where('team_id',$team1_score[0]->team_id)->select('name','runs','overs','maidens','wickets','inning','dots');
      $players_score_team_2 = $players_score_team_2_query->where('inning',$inning)->get();
      $bowlers_score_team_2 = $bowlers_score_team_2_query->where('inning',$inning)->get();

      foreach ($players_score_team_2 as $ps) {
      $ps_array = get_object_vars($ps);
      $ps = $ps_array;
      $innings2['innings'][$i]->players[$j] =  $ps;
      $j++;
      }

      foreach ($bowlers_score_team_2 as $ps) {
      $ps_array = get_object_vars($ps);
      $ps = $ps_array;
      $innings2['innings'][$i]->bowlers[$k] =  $ps;
      $k++;
      }
      $i++;
      }




      return Response::json(["status" => STATUS_SUCCESS,"result"=>[$innings1,$innings2]]);

    }



    public function completedmatch(Request $request){

      $findalllivematches = ListMatch::where('status','completed')->where('launch_status','launched')->select('title','short_name','start_date','matchkey','format','winner_team')->orderBy('start_date','DESC')->get();

      $i=0;

      $Json=array();

      if(!empty($findalllivematches)){

        foreach($findalllivematches as $livematch){

          $Json[$i]['status'] = 1;

          $Json[$i]['matchkey'] = $livematch->matchkey;

          $Json[$i]['title'] = $livematch->title;

          $Json[$i]['short_name'] = $livematch->short_name;

          $Json[$i]['format'] = $livematch->format;

          if($livematch->winner_team!=""){

            $findteamname = Team::where('team_key',$livematch->winner_team)->first();

            if(!empty($findteamname)){

              $Json[$i]['winner_team'] = ucwords($findteamname->team);

            }

          }

          $Json[$i]['start_date'] = date('M d Y h:i:a',strtotime($livematch->start_date));

          $i++;

        }

      }else{

        $Json[$i]['status'] = 0;

      }

       return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

      die;

    }



    public function viewscorecard(Request $request){

      // $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
      // $txt = json_encode($request->all())."John Doe\nhkhkhkhk";
      //
      // fwrite($myfile, $txt); exit;

      $this->validate($request,[

        'matchkey' => 'required'

      ]);

      $matchkey = $request->matchkey;

      $findalllivematches = ListMatch::join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')->where('matchkey',$matchkey)->select('listmatches.title','listmatches.short_name','listmatches.start_date','listmatches.matchkey','listmatches.format','listmatches.team1','listmatches.team2','t1.team as team1name','t2.team as team2name','winner_team')->first();

      $Json=array();

      if(!empty($findalllivematches)){

        $team1 = $findalllivematches->team1;

        $team1name = $findalllivematches->team1name;

        $team2 = $findalllivematches->team2;

        $team2name = $findalllivematches->team2name;

        $findinnings = ResultMatch::where('match_key',$matchkey)->groupBy('innings')->select('innings')->get();

        $countinnings = count($findinnings);

        $team2members = array();

        $team1members = array();

        for($i=0;$i<=$countinnings;$i++){

          $findteam1players = ResultMatch::where('match_key',$matchkey)->where('innings',$i+1)->join('players','players.id','=','result_matches.player_id')->where('players.team',$team1)->select('players.player_name','result_matches.*')->get();

          $battingi=0;

          $bowlingi=0;

          if(!empty($findteam1players)){

            foreach($findteam1players as $team1player){

              if($team1player->batting==1){

                $Json['inning'][$i]['batting1'][$battingi]['playername'] = $team1player->player_name;

                $Json['inning'][$i]['batting1'][$battingi]['runs'] = $team1player->runs;

                $Json['inning'][$i]['batting1'][$battingi]['balls'] = $team1player->bball;

                $Json['inning'][$i]['batting1'][$battingi]['fours'] = $team1player->fours;

                $Json['inning'][$i]['batting1'][$battingi]['six'] = $team1player->six;

                $Json['inning'][$i]['batting1'][$battingi]['strike_rate'] = $team1player->strike_rate;

                $Json['inning'][$i]['batting1'][$battingi]['dismiss_info'] = $team1player->out_str;

                if(!in_array($team1player->player_name,$team1members)){

                  $team1members[] = $team1player->player_name;

                }

                // $team1members.=$team1player->player_name.', ';

                $battingi++;

              }

              if($team1player->bowling==1){

                $Json['inning'][$i]['bowling1'][$bowlingi]['overs'] = $team1player->overs;

                $Json['inning'][$i]['bowling1'][$bowlingi]['playername'] = $team1player->player_name;

                $Json['inning'][$i]['bowling1'][$bowlingi]['maiden_over'] = $team1player->maiden_over;

                $Json['inning'][$i]['bowling1'][$bowlingi]['runs'] = $team1player->grun;

                $Json['inning'][$i]['bowling1'][$bowlingi]['wickets'] = $team1player->wicket;

                $Json['inning'][$i]['bowling1'][$bowlingi]['economy_rate'] = $team1player->economy_rate;

                // $team1members.=$team1player->player_name.', ';

                if(!in_array($team1player->player_name,$team1members)){

                  $team1members[] = $team1player->player_name;

                }

                $bowlingi++;

              }

            }

          }

          // for team 2 //

          $findteam2players = ResultMatch::where('match_key',$matchkey)->where('innings',$i+1)->join('players','players.id','=','result_matches.player_id')->where('players.team',$team2)->select('players.player_name','result_matches.*')->get();

          $battingi=0;

          $bowlingi=0;

          if(!empty($findteam2players)){

            foreach($findteam2players as $team2player){

              if($team2player->batting==1){

                $Json['inning'][$i]['batting2'][$battingi]['playername'] = $team2player->player_name;

                $Json['inning'][$i]['batting2'][$battingi]['runs'] = $team2player->runs;

                $Json['inning'][$i]['batting2'][$battingi]['balls'] = $team2player->bball;

                $Json['inning'][$i]['batting2'][$battingi]['fours'] = $team2player->fours;

                $Json['inning'][$i]['batting2'][$battingi]['six'] = $team2player->six;

                $Json['inning'][$i]['batting2'][$battingi]['strike_rate'] = $team2player->strike_rate;

                $Json['inning'][$i]['batting2'][$battingi]['dismiss_info'] = $team2player->out_str;

                if(!in_array($team2player->player_name,$team2members)){

                  $team2members[] = $team2player->player_name;

                }

                $battingi++;

              }

              if($team2player->bowling==1){

                $Json['inning'][$i]['bowling2'][$bowlingi]['overs'] = $team2player->overs;

                $Json['inning'][$i]['bowling2'][$bowlingi]['playername'] = $team2player->player_name;

                $Json['inning'][$i]['bowling2'][$bowlingi]['maiden_over'] = $team2player->maiden_over;

                $Json['inning'][$i]['bowling2'][$bowlingi]['runs'] = $team2player->grun;

                $Json['inning'][$i]['bowling2'][$bowlingi]['wickets'] = $team2player->wicket;

                $Json['inning'][$i]['bowling2'][$bowlingi]['economy_rate'] = $team2player->economy_rate;

                if(!in_array($team2player->player_name,$team2members)){

                  $team2members[] = $team2player->player_name;

                }

                $bowlingi++;

              }

            }

          }

        }

        $Json['basicinfo'][0]['team1members'] = implode(', ',$team1members);

        $Json['basicinfo'][0]['team2members'] = implode(', ',$team2members);

        $Json['basicinfo'][0]['matchname'] = $findalllivematches->title;

        $Json['basicinfo'][0]['start_date'] = date('M d Y h:i:a',strtotime($findalllivematches->start_date));

        $Json['basicinfo'][0]['team1'] = $team1name;

        $Json['basicinfo'][0]['team2'] = $team2name;

        if($findalllivematches->winner_team!=""){

          $findteamname = Team::where('team_key',$findalllivematches->winner_team)->first();

          if(!empty($findteamname)){

            $Json['basicinfo'][0]['winner_team'] = ucwords($findteamname->team);

          }

        }



        return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

        die;

      }

    }



    public function firstcheckteam(Request $request){

      $this->validate($request,[

        'user_id' => 'required'

      ]);

      $userid = $request->user_id;

      if($userid!=""){

        $checkteam = RegisterUser::where('id',$userid)->select('team','state','dob')->first();

        if(!empty($checkteam)){

          if($checkteam->team=="" || $checkteam->state=="" || $checkteam->state==null || $checkteam->dob=="0000-00-00"){

            $Json[0]['status'] = "0";

            $Json[0]['team'] = $checkteam->team;

            $Json[0]['state'] = $checkteam->state;

            if($checkteam->dob=="0000-00-00"){

              $Json[0]['dob']="";

            }else{

              $Json[0]['dob'] = $checkteam->dob;

            }

          }

          else{

            $Json[0]['status'] = '1';

          }

        }

      }else{

        $Json[0]['status'] = "0";

      }

      return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

      die;

    }



    public function updateteamname(Request $request){

      $this->validate($request,[

        'user_id' => 'required',

        // 'state' => 'required',

        // 'dob' => 'required',

        // 'teamname' => 'required|min:3|max:20',

        // 'user_refer_code' => 'required'

      ]);



      $userid = $request->user_id;

      $user_refer_code = $request->user_refer_code;









      $udate['team'] = $teamname = str_replace(" ", "", $request->teamname);

      $restrictarray=array();

      $restrictarray = ['madar','bhosadi','bhosd','aand','jhaant','jhant','fuck','chut','chod','gand','gaand','choot','faad','loda','Lauda','maar','*fuck*','*chut*','*chod*','*gand*','*gaand*','*choot*','*faad*','*loda*','*Lauda*','*maar*'];

      if(in_array($udate['team'],$restrictarray)){

        $Json[0]['status'] = "You cannot use offensive/abusive words";

        return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

        die;

      }

      foreach($restrictarray as $raray){

        if (strpos(strtolower($udate['team']), $raray) !== false) {

          $Json[0]['status'] = "You cannot use offensive/abusive words";

          return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

          die;

        }

      }

      if (!isset($udate['team']) || empty($udate['team']) || is_null($udate['team'])) {

        $Json[0]['status'] = "Please fill team name.";

        return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

          die;

      }

      if(isset($request->state)){

        $udate['state'] = $state = $request->state;

      }

      $checkteam = RegisterUser::where('team','like',$teamname)->select('id')->first();

      if(!empty($checkteam)){

        $Json[0]['status'] = "Team name already exist";

        return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

        die;

      }else{

        if ($userid == "") {

          $Json[0]['status'] = "Could not update";

        return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

        die;



        } else {
          $user = RegisterUser::where('id',$userid)->first();
        if(isset($user->team) && !empty($user->team)){
            $Json[0]['status'] = "Your team name already updated.";
            return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

            die;

        }



        if ($user_refer_code != "") {

          $is_code_exist = RegisterUser::where('refercode',$user_refer_code)->first();

          if (!empty($is_code_exist)) {
                $data['refer_id'] = $is_code_exist->id;
                RegisterUser::where('id',$userid)->update($data);
                $referId = $is_code_exist->id;
                if($is_code_exist->refer_to_join!=1) {
                $refer_bal = DB::table('userbalances')->where('user_id', $referId)->first();
                $bns_amt['bonus']=$refer_bal->bonus + 100;
                DB::table('userbalances')->where('user_id', $referId)->update($bns_amt);


                $trans = DB::table('transactions');

                $ins_tran['userid'] = $referId;
                $ins_tran['refer_id'] = $userid;

                $ins_tran['transaction_id'] = 'Fanline11-Refer-'.time();

                $ins_tran['type'] = 'Refer Bonus';

                $ins_tran['transaction_by'] = 'Fanline11';

                $ins_tran['paymentstatus'] = CONFIRMED;

                $ins_tran['total_available_amt'] = $refer_bal->winning+$refer_bal->balance+$refer_bal->bonus;

                $ins_tran['bal_bonus_amt'] = $refer_bal->bonus;

                $ins_tran['bonus_amt'] = 100;

                $ins_tran['amount'] = 100;

                $trans->insert($ins_tran);
              }

                //$scratch = new ScratchCard();
                // $scratch->refercode = $is_code_exist->refercode;
                // $scratch->user_id = $is_code_exist->id;
                // $scratch->active = 1;
                // $scratch->refer_id = $is_code_exist->id;
                // $scratch->is_scratched = 0;
                // $scratch->save();
          } else {
            return Response::json(["status" => STATUS_FAILURE,"message"=>"Refer code invalid.","result"=>""]);
          }

      }

        $users_level_historydata['user_id'] = $userid;
        $users_level_historydata['level'] = 1;
        $users_level_historydata['cash'] = 0;
        $users_level_historydata['contest'] = 0;
        DB::transaction(function() use($users_level_historydata, $userid, $udate) {

            DB::table('users_level_history')->insert($users_level_historydata);
            RegisterUser::where('id',$userid)->update($udate);
        });





        $Json[0]['status'] = "Team Name Updated Successfully";

        }

      }

      return Response::json(["status" => STATUS_SUCCESS,"message"=>$Json[0]['status'],"result"=>""]);

      die;

    }

    public function updateteamname_new(Request $request){

        $this->validate($request,[

          'user_id' => 'required',

          // 'state' => 'required',

          // 'dob' => 'required',

          // 'teamname' => 'required|min:3|max:20',

          // 'user_refer_code' => 'required'

        ]);



        $userid = $request->user_id;

        $user_refer_code = $request->user_refer_code;

  if(isset($request->is_state_update)){
    if($request->is_state_update == 'true'){
      $upstate['state'] = $request->state;
      if($request->state=='Karnataka') {
        return Response::json(["status" => STATUS_FAILURE,"message"=>"Karnataka state ban by state governmen.","result"=>""]);
      }
      DB::table('registerusers')->where('id',$request->user_id)->update($upstate);
      return Response::json(["status" => STATUS_SUCCESS,"message"=>"State Updated Succesfully.","result"=>""]);

    }
  }



        $udate['team'] = $teamname = str_replace(" ", "", $request->teamname);

        $restrictarray=array();

        $restrictarray = ['madar','bhosadi','bhosd','aand','jhaant','jhant','fuck','chut','chod','gand','gaand','choot','faad','loda','Lauda','maar','*fuck*','*chut*','*chod*','*gand*','*gaand*','*choot*','*faad*','*loda*','*Lauda*','*maar*'];

        if(in_array($udate['team'],$restrictarray)){

          $Json[0]['status'] = "You cannot use offensive/abusive words";

          return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

          die;

        }

        foreach($restrictarray as $raray){

          if (strpos(strtolower($udate['team']), $raray) !== false) {

            $Json[0]['status'] = "You cannot use offensive/abusive words";

            return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

            die;

          }

        }

        if (!isset($udate['team']) || empty($udate['team']) || is_null($udate['team'])) {

          $Json[0]['status'] = "Please fill team name.";

          return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

            die;

        }

        if(isset($request->state)){
        if($request->state=='Karnataka') {
        return Response::json(["status" => STATUS_FAILURE,"message"=>"Karnataka state ban by state governmen.","result"=>""]);
      }
          $udate['state'] = $state = $request->state;

        }

        $checkteam = RegisterUser::where('team','like',$teamname)->select('id')->first();

        if(!empty($checkteam)){

          $Json[0]['status'] = "Team name already exist";

          return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

          die;

        }else{

          if ($userid == "") {

            $Json[0]['status'] = "Could not update";

          return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

          die;



          } else {
            $user = RegisterUser::where('id',$userid)->first();
          if(isset($user->team) && !empty($user->team)){
            if($user->team != $udate['team']){
              $Json[0]['status'] = "Your team name already updated.";
              return Response::json(["status" => STATUS_FAILURE,"message"=>$Json[0]['status'],"result"=>""]);

              die;
  }
          }

          /*
          if ($user_refer_code != "") {

    $is_code_exist = RegisterUser::where('refercode',$user_refer_code)->first();

    if (!empty($is_code_exist)) {
          $udate['refer_id'] = $is_code_exist->id;
          // RegisterUser::where('id',$userid)->update($data);
          $referId = $is_code_exist->id;
          if($is_code_exist->refer_to_join!=1) {
          $refer_bal = DB::table('userbalances')->where('user_id', $referId)->first();
          $bns_amt['bonus']=$refer_bal->bonus + 100;
        //  DB::table('userbalances')->where('user_id', $referId)->update($bns_amt);


          $trans = DB::table('transactions');

          $ins_tran['userid'] = $referId;
          $ins_tran['refer_id'] = $userid;

          $ins_tran['transaction_id'] = 'Fanline11-Refer-'.time();

          $ins_tran['type'] = 'Refer Bonus';

          $ins_tran['transaction_by'] = 'Fanline11';

          $ins_tran['paymentstatus'] = CONFIRMED;

          $ins_tran['total_available_amt'] = $refer_bal->winning+$refer_bal->balance+$refer_bal->bonus;

          $ins_tran['bal_bonus_amt'] = $refer_bal->bonus;

          $ins_tran['bonus_amt'] = 100;

          $ins_tran['amount'] = 100;

        //  $trans->insert($ins_tran);
        }

          //$scratch = new ScratchCard();
          // $scratch->refercode = $is_code_exist->refercode;
          // $scratch->user_id = $is_code_exist->id;
          // $scratch->active = 1;
          // $scratch->refer_id = $is_code_exist->id;
          // $scratch->is_scratched = 0;
          // $scratch->save();
    } else {
      return Response::json(["status" => STATUS_FAILURE,"message"=>"Refer code invalid.","result"=>""]);
    }

}*/

          $users_level_historydata['user_id'] = $userid;
        $users_level_historydata['level'] = 1;
        $users_level_historydata['cash'] = 0;
        $users_level_historydata['contest'] = 0;
        DB::transaction(function() use($users_level_historydata, $userid, $udate) {

            DB::table('users_level_history')->insert($users_level_historydata);
            RegisterUser::where('id',$userid)->update($udate);
        });





                //diposit in user self account

                $userbalance = UserBalance::where('user_id',$request->user_id)->first();

                if (!is_null($userbalance)) {

                  if($request->user_id == 9)
                  {
                    $userbalance->bonus = $userbalance->bonus + 0;
                  }
                  else
                  {
                    $userbalance->bonus = $userbalance->bonus + SIGN_UP_BONUS_AMOUNT;
                  }



                  $userbalance->save();

                }

                $get_user_bal = UserBalance::where('user_id',$request->user_id)->first();



                $random = rand(1000000,999999999);

                 //Entry for bonus to the new user account

                $trans = DB::table('transactions');

                $ins_tran['userid'] = $request->user_id;

                $ins_tran['transaction_id'] = 'Fanline11-SIGNUP-'.$random;

                $ins_tran['type'] = SIGN_UP_BONUS_STMT;

                $ins_tran['transaction_by'] = 'Fanline11';

                $ins_tran['paymentstatus'] = CONFIRMED;

                $ins_tran['total_available_amt'] = $get_user_bal->winning+$get_user_bal->balance+$get_user_bal->bonus;

                $ins_tran['bal_bonus_amt'] = $get_user_bal->bonus;

                if($request->user_id == 9)
                {
                  $ins_tran['bonus_amt'] = 0;

                  $ins_tran['amount'] = 0;
                }
                else
                {
                  $ins_tran['bonus_amt'] = SIGN_UP_BONUS_AMOUNT;

                  $ins_tran['amount'] = SIGN_UP_BONUS_AMOUNT;
                }

                $trans->insert($ins_tran);



          $Json[0]['status'] = "Team Name Updated Successfully";

          }

        }

        return Response::json(["status" => STATUS_SUCCESS,"message"=>$Json[0]['status'],"result"=>""]);

        die;

      }

      public function matchplayerspoints_mirchi($sport_type = CRICKET ,Request $request) {

        $this->validate($request,[

          'user_id' => 'required',

          'matchkey' => 'required'

        ]);

        $matchkey = str_replace(['_1','_2'],'',$request->matchkey);
        $match_type = (isset($request->sport_key) ? $request->sport_key : CRICKET);
        if($match_type === 'LIVE'){
          $sport_type = CRICKET;
        }

        $fantasy_type= isset($request->fantasy_type) ? $request->fantasy_type :0;
        // dd($fantasy_type);
        if($fantasy_type == 4){
          $fantasy_type = 0;
        }
        // $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
        $sportType = (object)array();
      //$sportType->id = Helpers::get_sport_type($request->sport_key);
      $sportType->id =1;
        $user_id = $request->user_id;

        // $matchkey = 44305;
        // $sport_type = CRICKET;
        // $user_id = 4825;
         $point_sport_types = array(
           "CRICKET" =>  'player_name,
              players.player_key,
              players.credit,
              players.role,
              playerdetails.image,
              result_matches.player_id,
              teams.team,
              teams.short_name,

                 sum(startingpoints) as startingpoints,
                 sum(result_points.runs) as runs,
                 sum(result_points.fours) as fours,
                 sum(result_points.sixs) as sixs,
                 sum(result_points.strike_rate) as actual_strike_rate,
                 sum(result_matches.strike_rate) as strike_rate,
               sum(halcentury) as halcentury,
                 sum(century) as century,
                 sum(result_points.duck) as duck,
                 sum(wickets)as actual_wickets,
                 sum(result_matches.wicket) as wickets,
                 sum(result_points.economy_rate) as actual_economy_rate,
                 sum(result_matches.economy_rate) as economy_rate,
                 sum(result_points.maidens) as maidens,
                 sum(result_points.runouts) as actual_runouts,
                 sum(result_points.runout_thrower) as actual_runout_thrower,
              sum(result_points.runout_catcher) as actual_runout_catcher,
              sum(result_matches.runout_thrower) as runout_thrower,
              sum(result_matches.runout_catcher) as runout_catcher,
                 sum(result_points.catch) as actual_catch_points,
                 sum(result_matches.catch) as catch_points,
                 sum(stumping) as actual_stumping,
                 sum(stumbed) as stumping,
                 sum(result_points.lbw_bowled) as lbw_bowled,
                 sum(result_matches.lbw_bowled) as actual_lbw_bowled,
                 sum(result_points.bonus) as bonus,
                 sum(total) as total,
                 sum(total) as total_points,
                 sum(total) as actual_total_points,
                 sum(total) as points,
                 sum(not_out) as not_out,
                 sum(result_points.negative) as negative,
                 sum(result_points.runout_thrower) as runout_thrower,
                 sum(result_points.runout_catcher) as runout_catcher,
                 sum(result_matches.runs) as actual_runs,
                 sum(result_matches.fours) as actual_fours,
                 sum(result_matches.starting11) as actual_startingpoints,
                 sum(result_matches.six) as actual_sixs,
                 sum(result_matches.maiden_over) as actual_maidens,
                 sum(result_matches.duck) as actual_duck,
                 sum(result_matches.runouts) as runouts,
                 sum(result_matches.negative_points) as negative_points_actual,
                 sum(result_matches.notout) as actual_notout



                 ',
                 // sum(result_points.minutesplayed) as minutesplayed,
                 // sum(result_matches.minutesplayed) as actual_minutesplayed,

           "FOOTBALL" => "player_name,
              players.player_key,
              players.credit,
              result_matches.player_id,
              teams.team,
              playerdetails.image,

      sum(result_matches.starting11) as starting11,

              sum(result_points.goals) as goals,
              sum(result_matches.goals) as actual_goals,
              sum(result_points.assist) as assist,
              sum(result_matches.assist) as actual_assist,
              sum(result_points.totalpass) as totalpass,
              sum(result_matches.totalpass) as actual_totalpass,
              sum(result_points.shotsontarget) as shotsontarget,
              sum(result_matches.shotsontarget) as actual_shotsontarget,
              sum(result_points.cleansheet) as cleansheet,
              sum(result_matches.cleansheet) as actual_cleansheet,
              sum(result_points.shotsblocked) as shotsblocked,
              sum(result_matches.shotsblocked) as actual_shotsblocked,
              sum(result_points.penaltysave) as penaltysave,
              sum(result_matches.penaltywon) as actual_penaltysave,
              sum(result_points.tacklesuccess) as tacklesuccess,
              sum(result_matches.tacklesuccess) as actual_tacklesuccess,
              sum(result_points.yellowcard) as yellowcard,
              sum(result_matches.yellowcard) as actual_yellowcard,
              sum(result_points.redcard) as redcard,
              sum(result_matches.redcard) as actual_redcard,

              sum(result_points.owngoals) as owngoals,
              sum(result_matches.owngoals) as actual_owngoals,
              sum(result_points.penaltymiss) as penaltymiss,
              sum(result_matches.penaltymiss) as actual_penaltymiss,
              sum(result_points.goalconceded) as goalconceded,
              sum(result_matches.goalconceded) as actual_goalconceded,


              sum(result_points.chancecreated) as chancecreated,
              sum(result_matches.chancecreated) as actual_chancecreated,

              sum(result_points.interceptionwon) as interceptionwon,
              sum(result_matches.interceptionwon) as actual_interceptionwon,

              sum(result_points.blockedshot) as blockedshot,
              sum(result_matches.blockedshot) as actual_blockedshot,

              sum(result_points.clearance) as clearance,
              sum(result_matches.clearance) as actual_clearance,


              sum(result_points.total) as total_points,
              sum(result_matches.total_points) as actual_total_points,
              sum(result_points.total) as points


              ",
           "BASKETBALL" => "player_name,
              players.player_key,
              players.credit,
              result_matches.player_id,
              teams.team,
              playerdetails.image,

           sum(result_points.pointscored) as pointscored,
           sum(result_matches.pointscored) as actual_pointscored,
           sum(result_points.rebound) as rebound,
           sum(result_matches.rebound) as actual_rebound,
           sum(result_points.assist) as assist,
           sum(result_matches.assist) as actual_assist,
           sum(result_points.steal) as steal,
           sum(result_matches.steal) as actual_steal,
           sum(result_points.block) as block,
           sum(result_matches.block) as actual_block,
           sum(result_points.turnover) as turnover,
           sum(total) as total,
           sum(total) as total_points,
           sum(total) as actual_total_points,
           sum(total) as points,
           sum(result_matches.turnover) as actual_turnover",

           "BASEBALL"    =>  "player_name,
                          players.player_key,
                          players.credit,
                          result_matches.player_id,
                          teams.team,
                          playerdetails.image,

                          sum(result_points.single) as single,
                          sum(result_points.single) as actual_single,
                          sum(result_points.doubles) as doubles,
                          sum(result_points.doubles) as actual_doubles,
                          sum(result_points.triple) as triple,
                          sum(result_points.triple) as actual_triple,
                          sum(result_points.homerun) as homerun,
                          sum(result_points.homerun) as actual_homerun,
                          sum(result_points.runsbattedin) as runsbattedin,
                          sum(result_points.runsbattedin) as actual_runsbattedin,
                          sum(result_points.runscored) as runscored,
                          sum(result_points.runscored) as actual_runscored,
                          sum(result_points.baseonballshitter) as baseonballshitter,
                          sum(result_points.baseonballshitter) as actual_baseonballshitter,
                          sum(result_points.stolenbase) as stolenbase,
                          sum(result_points.stolenbase) as actual_stolenbase,
                          sum(result_points.inningpitched) as inningpitched,
                          sum(result_points.inningpitched) as actual_inningpitched,
                          sum(result_points.strikeout) as strikeout,
                          sum(result_points.strikeout) as actual_strikeout,
                          sum(result_points.earnedrun) as earnedrun,
                          sum(result_points.earnedrun) as actual_earnedrun,
                          sum(result_points.hitallowed) as hitallowed,
                          sum(result_points.hitallowed) as actual_hitallowed,
                          sum(result_points.baseonballpicther) as baseonballpicther,
                          sum(result_points.baseonballpicther) as actual_baseonballpicther,
                          sum(total) as total,
                          sum(total) as total_points,
                          sum(total) as actual_total_points,
                          sum(total) as points,
                          sum(result_matches.turnover) as actual_turnover",
      "KABADDI"       =>  "player_name,
                          players.player_key,
                          players.credit,
                          result_matches.player_id,
                          teams.team,
                          playerdetails.image,

                          sum(result_points.pointscored) as pointscored,
                          sum(result_matches.pointscored) as actual_pointscored,
                          sum(result_points.starting7) as starting7,
                          sum(result_points.substitute) as substitute,
                          sum(result_points.raidtouch) as raidtouch,
                          sum(result_matches.raidtouch) as actual_raidtouch,
                          sum(result_points.raidbonus) as raidbonus,
                          sum(result_matches.raidbonus) as actual_raidbonus,
                          sum(result_points.raidunsucceessful) as raidunsucceessful,
                          sum(result_matches.raidunsuccessful) as actual_raidunsuccessful,
                          sum(result_points.tacklesucceessful) as tacklesucceessful,
                          sum(result_matches.tacklesucceessful) as actual_tacklesucceessful,
                          sum(result_points.supertackle) as supertackle,
                          sum(result_matches.supertackle) as actual_supertackle,
                          sum(result_points.greencard) as greencard,
                          sum(result_matches.greencard) as actual_greencard,
                          sum(result_points.yellowcard) as yellowcard,
                          sum(result_matches.yellowcard) as actual_yellowcard,
                          sum(result_points.redcard) as redcard,
                          sum(result_matches.redcard) as actual_redcard,
                          sum(result_points.pushingallout) as pushingallout,
                          sum(result_points.gettingallout) as gettingallout,
                          sum(total) as points,
                               sum(result_points.total) as points",


      "HANDBALL"      =>  "player_name,
                         players.player_key,
                         players.credit,
                         result_matches.player_id,
                         teams.team,
                         players.role,
                         teams.short_name,
                         playerdetails.image,
                         sum(result_points.goals) as goals,
                         sum(result_matches.goals) as actual_goals,
                         sum(result_points.saves) as saves,
                         sum(result_matches.saves) as actual_saves,
                         sum(result_points.penalty_saved) as penalty_saved,
                         sum(result_matches.penalty_saved) as actual_penalty_saved,
                         sum(result_points.yellowcard) as yellowcard,
                         sum(result_matches.yellowcard) as actual_yellowcard,
                         sum(result_points.redcard) as redcard,
                         sum(result_matches.redcard) as actual_redcard,
                         sum(result_points.bluecard) as bluecard,
                         sum(result_matches.bluecard) as actual_bluecard,
                         sum(result_points.ejections) as ejections,
                         sum(result_matches.ejections) as actual_ejections,
                         sum(result_points.penalty_miss) as penalty_miss,
                         sum(result_matches.penalty_miss) as actual_penalty_miss,
                         sum(result_matches.total_points) as actual_total_points,
                         sum(result_points.total) as total_points,
                         sum(total) as points

                         ",
      "HOCKEY"        =>  "player_name,
                          players.player_key,
                          players.credit,
                          result_matches.player_id,
                          teams.team,
                          playerdetails.image,
                          sum(result_points.fantasy_credit) as fantasy_credit,
                          sum(result_points.fantasy_credit) as actual_fantasy_credit,
                          sum(result_points.pointscored) as pointscored,
                          sum(result_matches.pointscored) as actual_pointscored,
                          sum(result_points.minutesplayed) as minutesplayed,
                          sum(result_matches.minutesplayed) as actual_minutesplayed,
                          sum(result_points.goals) as goals,
                          sum(result_matches.goals) as actual_goals,
                          sum(result_points.passes) as passes,
                          sum(result_matches.passes) as actual_passes,
                          sum(result_points.circlepenetration) as circlepenetration,
                          sum(result_matches.circlepenetration) as actual_circlepenetration,
                          sum(result_points.penaltycornerearned) as penaltycornerearned,
                          sum(result_matches.penaltycornerearned) as actual_penaltycornerearned,
                          sum(result_points.penaltystrokeearned) as penaltystrokeearned,
                          sum(result_matches.penaltystrokeearned) as actual_penaltystrokeearned,
                          sum(result_points.greencard) as greencard,
                          sum(result_matches.greencard) as actual_greencard,
                          sum(result_points.yellowcard) as yellowcard,
                          sum(result_matches.yellowcard) as actual_yellowcard,
                          sum(result_points.redcard) as redcard,
                          sum(result_matches.redcard) as actual_redcard,
                          sum(result_points.penaltystrokemissed) as penaltystrokemissed,
                          sum(result_matches.penaltystrokemissed) as actual_penaltystrokemissed,
                          sum(result_points.goalsconceded) as goalsconceded,
                          sum(result_matches.goalsconceded) as actual_goalsconceded,
                          sum(result_points.penaltystrokesaved) as penaltystrokesaved,
                          sum(result_matches.penaltystrokesaved) as actual_penaltystrokesaved,
                          sum(result_points.saves) as saves,
                          sum(result_matches.saves) as actual_saves,
                          sum(result_points.tackles) as tackles,
                          sum(result_matches.tackles) as actual_tackles,
                          sum(result_points.interceptions) as interceptions,
                          sum(result_matches.interceptions) as actual_interceptions,
                          sum(result_points.blocks) as blocks,
                          sum(result_matches.blocks) as actual_blocks,
                          sum(result_points.shotongoal) as shotongoal,
                          sum(result_matches.shotongoal) as actual_shotongoal,
                          sum(result_points.cleansheet) as cleansheet,
                          sum(total) as points,
                          sum(result_matches.cleansheet) as actual_cleansheet",

      );

         $sport_type_array = array(

           "CRICKET" =>  [
        //      'player_name',
              // 'player_key',
              // 'player_id',
              // 'team',
               'credit',
                 'startingpoints',
                 'runs',
                 'fours',
                 'sixs',
                 'strike_rate',
               'halcentury',
                 'century',
                 'duck',
                 'wickets',
                 'maidens',
                 'not_out',
                 'stumping',
                 'lbw_bowled',
                 'total',
                 'total_points',
                 'actual_total_points',
                 'economy_rate',
                 'runouts',
                 'negative',
                 'runout_thrower',
                 'runout_catcher',
                 'catch_points',
                 'actual_stumping',
                 'actual_runs',
                 'actual_fours',
                 'actual_startingpoints',
                 'actual_sixs',
                 'actual_strike_rate',
                 'actual_wickets',
                 'actual_maidens',
                 'actual_economy_rate',
                 'actual_duck',
                 'actual_runouts',
                 'negative_points_actual',
                 'actual_lbw_bowled',
                 'actual_catch',
                 'actual_notout',
                 'actual_runout_thrower',
                 'actual_runout_catcher',
                 'bonus']
                 ,
           "FOOTBALL" => [
            'credit',
            // 'minutesplayed',
      // 'actual_minutesplayed',
      'starting11',
      'goals',
      'actual_goals',
      'assist',
      'actual_assist',
      'totalpass',
      'actual_totalpass',
      'cleansheet',
      'actual_cleansheet',
      'shotsblocked',
      'actual_shotsblocked',
      'penaltysave',
      'actual_penaltysave',
      'tacklesuccess',
      'actual_tacklesuccess',
      'yellowcard',
      'actual_yellowcard',
      'redcard',
      'actual_redcard',
      'owngoals',
      'actual_owngoals',
      'penaltymiss',
      'actual_penaltymiss',
      'goalconceded',
      'actual_goalconceded',
      'shotsontarget',
      'actual_shotsontarget',
      'chancecreated',
      'actual_chancecreated',
      'interceptionwon',
      'actual_interceptionwon',
      'blockedshot',
      'actual_blockedshot',
      'clearance',
      'actual_clearance',
      'total_points',
      'actual_total_points'


                  ],
           "BASKETBALL" => [
                   'pointscored','actual_pointscored','rebound','actual_rebound',
                   'assist',
                   'actual_assist',
                   'steal',
                   'actual_steal',
                   'block',
                   'actual_block',
                   'turnover',
                   'actual_turnover',
                   'total_points',
                   'actual_total_points'

                  ],

                  "KABADDI"       =>  [
                          'pointscored','actual_pointscored','starting7','substitute',
                          'raidtouch',
                          'actual_raidtouch',
                          'raidbonus',
                          'actual_raidbonus',
                          'raidunsucceessful',
                          'actual_raidunsuccessful',
                          'tacklesucceessful',
                          'actual_tacklesucceessful',
                          'supertackle',
                          'actual_supertackle',
                          'tacklesucceessful',
                          'actual_tacklesucceessful',
                          'greencard',
                          'actual_greencard',
                          'yellowcard',
                          'actual_yellowcard',
                          'redcard',
                          'actual_redcard',
                          'pushingallout',
                          'gettingallout',
                          'total',
                          'total_points',
                          'actual_total_points'
                          ],
      "BASEBALL"      =>  [
                          'single',
                          'double',
                          'triple ',
                          'homerun',
                          'runsbattedin',
                          'runscored',
                          'baseonballshitter',
                          'stolenbase ',
                          'inningpitched',
                          'strikeout',
                          'earnedrun',
                          'hitallowed',
                          'baseonballpicther',
                           'total_points',
                           'actual_total_points'
                           ],
      "HOCKEY"        =>  [
                          'fantasy_credit',
                          'actual_fantasy_credit',
                          'pointscored',
                          'actual_pointscored',
                          'minutesplayed',
                          'actual_pointscored',
                          'goals',
                          'actual_goals',
                          'passes',
                          'actual_passes',
                          'circlepenetration',
                          'actual_circlepenetration',
                          'penaltycornerearned',
                          'actual_penaltycornerearned',
                          'penaltystrokeearned',
                          'actual_penaltystrokeearned',
                          'greencard',
                          'actual_greencard',
                          'yellowcard',
                          'actual_yellowcard',
                          'redcard',
                          'actual_redcard',
                          'penaltystrokemissed',
                          'actual_penaltystrokemissed',
                          'goalsconceded',
                          'actual_goalsconceded',
                          'penaltystrokesaved',
                          'actual_penaltystrokesaved',
                          'saves',
                          'actual_saves',
                          'tackles',
                          'actual_tackles',
                          'interceptions',
                          'actual_interceptions',
                          'blocks',
                          'actual_blocks',
                          'shotongoal',
                          'actual_shotongoal',
                          'cleansheet',
                          'actual_cleansheet'
                          ],
      "HANDBALL"        =>  [
                         'goals',
                         'actual_goals',
                         'saves',
                         'actual_saves',
                         'penalty_saved',
                         'actual_penalty_saved',
                         'yellowcard',
                         'actual_yellowcard',
                         'bluecard',
                         'actual_bluecard',
                         'ejections',
                         'actual_ejections',
                         'penalty_miss',
                         'actual_penalty_miss',
                         'total_points',
                         'actual_total_points'
                         ]

         );
          $points_colums = $point_sport_types[$sport_type];
      // var_dump($points_colums);exit;
          // $players = ResultPoint::join('result_matches','result_matches.id','=','result_points.resultmatch_id')
          // ->join('players','players.id','=','result_points.playerid')
          // ->join('playerdetails','playerdetails.player_key','=','players.player_key')
          // ->leftjoin('teams','players.team','=','teams.id')->where('starting11','!=',0)
          // ->where('result_matches.sport_type',1)->where('matchkey',$matchkey)
          // ->select(DB::raw($points_colums))
          // ->orderBy('total','desc')
          // ->groupBy('players.player_key')
          // ->get();
        // Redis::del('laravel:player_points_'.$matchkey.'_'.$sportType->id.'_'.$fantasy_type);
          // $players = Redis::get('laravel:player_points_'.$matchkey.'_'.$sportType->id.'_'.$fantasy_type);
           // var_dump($players);exit;
          if(empty($players)) {
            // dd('gare');
              $players = MatchPlayer::join('players','players.id','=','matchplayers.playerid')
                // ->join('result_points','result_points.playerid','=','players.id')
                ->join('result_points', function($j) use($matchkey) {
                    $j->on('result_points.playerid','=','players.id')
                      ->on('result_points.matchkey','=','matchplayers.matchkey');
                  })
                ->join('playerdetails','playerdetails.player_key','=','players.player_key')
                ->join('result_matches','result_matches.id','=','result_points.resultmatch_id')
                ->leftjoin('teams','players.team','=','teams.id')
                ->where('starting11','!=',0)
                ->where('result_matches.sport_type',$sportType->id)
                ->where('players.sport_type',$sportType->id)
                ->where('playerdetails.sport_type',$sportType->id)
                ->where('matchplayers.matchkey',$matchkey)
                ->where('result_points.matchkey',$matchkey)
                ->where('result_points.fantasy_type_id',$fantasy_type)
                ->select(DB::raw(
                  $points_colums),'matchplayers.selected_percent','matchplayers.credit'
                )->orderBy('total','desc')->groupBy('matchplayers.id')->get();
                // print_r($players); exit;
          } else {
              $players = unserialize($players);
          }

          $array_diff = array();
          $result = $players;
          // dd($result);
          $my_players = array();

          if(empty($my_players)) {
              $my_players = @JoinTeam::where('matchkey', $matchkey)->where('userid', $user_id)->where('sport_type', $sportType->id)->select(DB::raw('group_concat(players) as players'))->groupBy('matchkey')->first()->players;
          }
          $myunique_players=array();
          if(!empty($my_players)){
                $myunique_players = array_unique(array_filter(explode(',', $my_players)));
          }

          // print_r($players);exit;
      if(!empty($players)){
      foreach ($players as $key => $value) {
             $player_id = $value->player_id;
            $total_selected = 0;
            if(1) {
            $players[$key]->selected_by = (string) $value->selected_percent;
            $players[$key]->credit = (string) $value->credit;

            } else{

              $players[$key]->selected_by = "0";

            }
            $players[$key]->points = is_null($value->points) ? 0 : $value->points;

          if(in_array($player_id, $myunique_players)) {
              $choose = 1;
          } else {
            $choose = 0;
          }



            if($choose) {

              $players[$key]->isSelected = 1;

            } else {

              $players[$key]->isSelected = 0;

            }


          $players[$key]->image = PLAYERS_DIRECTORY_URL.@$players[$key]->image;
          // $players[$key]->isSelected  = 1;

          $array = json_decode(json_encode($players[$key]), true);
        foreach ($array as $k => $v) {
          if (in_array(key($array), $sport_type_array[$sport_type])) {




            $breakup = array(
          "event_name" =>  key($array),
          // "event_name" =>  ucfirst($event_name),
          "actual" => isset($array[$k]) ? str_replace(',', '', number_format((float)$array[$k], 2)) : 0,
          "actual_points" => isset($array['actual_'.$k]) ? $array['actual_'.$k] : 0);

            if ($sportType->id == 3 || $sportType->id == 2 || $sportType->id == 4) {
              $breakup = array(
          "event_name" =>  key($array),
          // "event_name" =>  ucfirst($event_name),
          "actual" => isset($array['actual_'.$k]) ? $array['actual_'.$k] : 0,
          "actual_points" =>  isset($array[$k]) ? $array[$k] : 0);
            }







            $get_name_to_show = [
              'startingpoints' => 'starting 11',
              'starting11'=>'Playing11',
              'runs' => 'Run',
              'fours' => '4\'s',
               'sixs' => '6\'s',
              'strike_rate' => 'S/R',
              'century' => '100\'s',
              'halcentury' => '50\'s',
              'duck' => 'Duck',
              'wickets' => 'Wkts',
              'economy_rate' => 'E/R',
              'maidens' => 'Maider Over',
              'runouts' => 'Run Out',
              'runout_thrower' => 'Runout thrower',
              'runout_catcher' => 'Runout catcher',
              'catch_points' => 'Catch',
              'stumping' => 'Stumping',
              'lbw_bowled'=>'Lbw / Bowled',
              'bonus'=>'Bonus Points',


                   'pointscored' => 'Scored Points',
                   'rebound' => 'Rebound',
                   'assist' => 'Assist',
                   'steal' => 'Steal',
                   'block' => 'Block',
                   'turnover' => 'Turnover',

                   'minutesplayed' => 'Minutes played',
      'goals' => 'Goals',
      'assist' => 'Assist',
      'totalpass' => 'Total Passes',
      'cleansheet' => 'Clean sheet',
      'shotsblocked' => 'Shots blocked',
      'penaltysave' => 'Penalty save',
      'tacklesuccess' => 'Tackle success',
      'yellowcard' => 'Yellow card',
      'redcard' => 'Red card',
      'owngoals' => 'Own goals',
      'penaltymiss' => 'Penalty miss',
      'goalconceded' => 'Goal conceded',
      'pointscored'    => 'Point Scored' ,


              'starting7'      => 'Starting7',
              'substitute'     => 'Substitute',
              'raidtouch'      => 'raidtouch',
              'raidbonus'      => 'Raid Bonus',
              'Raidunsucceessful'=> 'Raid Unsucceessful',
              'tacklesucceessful'=> 'Tackle Succeessful',
              'supertackle'    => 'Super Tackle',
              'tacklesucceessful'=> 'Tackle Succeessful',
              'greencard'      => 'Green Card',
              'yellowcard'     => 'Yellow Card',
              'redcard'        => 'Red Card',
              'pushingallout'  => 'Pushing AllOut',
              'gettingallout'  => 'Getting AllOut',
              'fantasy_credit' => 'Fantasy Credit',
              'pointscored'=> 'Point Scored',
              'goals'=> 'Goals',
              'passes'=> 'Passes',
              'circlepenetration'=> 'Circle Penetration',
              'penaltycornerearned'=> 'Penalty Corner Earned',
              'penaltystrokeearned'=> 'Penalty Stroke Earned',
              'greencard'=> 'Green Card',
              'actual_greencard'=> 'Getting AllOut',
              'yellowcard'=> 'Getting AllOut',
              'Redcard'=> 'Red Card',
              'penaltystrokemissed'=> 'Penalty Stroke Missed',
              'goalsconceded'=> 'Goals Conceded',
              'penaltystrokesaved'=> 'Penalty Stroke Saved',
              'saves'=> 'Saves',
              'tackles'=> 'Tackles',
              'interceptions'=> 'Interceptions',
              'blocks'=> 'Blocks',
              'shotongoal'=> 'Shot on Goal',
              'cleansheet'=> 'Clean Sheet',
            //  'total_points'   => 'Total points',
              'goals'=>'Goals',
              'saves'=>'Save (GK only)',
              'penalty_saved'=>'Penalty Saved (GK only)',
              'yellowcard'=>'Yellow Card',
              'bluecard'=>'Blue Card',
              'ejections'=>'Ejections',
              'penalty_miss'=>'Penalty Miss',
      'shotsontarget'=>'Shots On Target',
              'chancecreated'=>'Chance Created',
              'interceptionwon'=>'Interception Won',
              'blockedshot'=>'Blocked Shot',
              'clearance'=>'Clearance',


              'single'=>'Single (1b)',
              'double' => 'Double (2b)',
              'triple' => 'Triple (3b)',
              'homerun'=> 'Home Run',
              'runsbattedin'=> 'Runs Batted in',
              'runscored'=> 'Runs Scored',
              'baseonballshitter' => 'Base On balls or Walk',
              'stolenbase '=> 'Stolen Base',
              'inningpitched'=> 'Inning Pitched',
              'strikeout'=> 'Strikeout',
              'earnedrun'=>'Earner Run',
              'hitallowed'=> 'Hit Allowed',
              'baseonballpicther'=> 'Base on Balls or Walk'
                    ];

              //conditions

          if (key($array) == 'startingpoints') {
            $breakup['actual'] = ($breakup['actual'] == 4) ? "Yes" : "No";
            $breakup['actual_points'] = 4;
          }

          if (key($array) == 'starting11') {

            $breakup['actual'] = ($breakup['actual_points'] == 1) ? "Yes" : "No";
            $breakup['actual_points'] = 4;
          }


          if (key($array) == 'not_out') {
            $breakup['actual'] = ($breakup['actual_points'] == 1) ? "Yes" : "No";
          }


          if (key($array) == 'duck') {
            // $breakup['actual'] = ($breakup['actual_points'] == 1) ? "Yes" : "No";
            // $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
            $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
            $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
          }

          if (key($array) == 'wining') {
            $breakup['actual'] = ($breakup['actual_points'] >= 1) ? "Yes" : "No";
          }

          if (key($array) == 'halcentury') {
            $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
          }

           if (key($array) == 'century') {
            $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
          }

           if (key($array) == 'point150') {
            $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
          }
           if (key($array) == 'point200') {
            $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
          }
          // if (key($array) == 'total_points') {
          //   $breakup['actual'] = '0';
          //   // $breakup['actual_points'] = 0;
          // }


          if (key($array) == 'sixs') {
          $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
          $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
          }

      if (key($array) == 'lbw_bowled') {
      $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
      $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
      }

      if (key($array) == 'bonus') {
      $breakup['actual'] = ($breakup['actual'] > 0) ? "Yes" : "No";
      $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
      }

          if (key($array) == 'turnover') {
          $breakup['actual'] = isset($array[$k]) ? $array[$k] : '';
          $breakup['actual_points'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
          }



                  if (key($array) == 'maidens') {
                  $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
                  $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
                  }




          if (array_key_exists(key($array),$get_name_to_show)) {
          $breakup['event_name'] = $get_name_to_show[key($array)];

          array_push($array_diff,$breakup);
            } else {
          unset($breakup);
            }


          // $not_in_events = ['credit'];
          // if (in_array(key($array), $not_in_events)) {
          //  unset($breakup);
          // } else {
        //  array_push($array_diff,$breakup);
          // }


          }

        next($array);
        }
        $result[$key]->breakup_points = $array_diff;
        unset($result[$key]->total_points);
           $breakup = [];
           $array_diff = [];
      }
      }
      $result = $players;
          // $total_teams = JoinTeam::where('matchkey', $matchkey)->where('sport_type', $sportType->id)->count();

           // $totalTeams = $total_teams;


        if ($players->isEmpty() || $players==null || $players=="") {

          $players =  (object) [];

        }

        // $players =  [];
        // $players = array(array("player_id"=>2,"player_name"=>5,"breakup_points"=>[array(
        //   "event_name"=>"run","actual"=>2,"actual_points"=>3
        // )]));

        //

        return Response::json(["status" => STATUS_SUCCESS,"result" => $result]);

        die;


      }


      public function matchplayerspoints(Request $request){

       $this->validate($request,[

         'user_id' => 'required',

         'matchkey' => 'required'

       ]);

       $matchkeychange = $request->matchkey;

       $matchkey = str_replace('_2','',$matchkeychange);


       $sport_type = (isset($request->sport_key) ? $request->sport_key : CRICKET);
       if($sport_type === 'LIVE'){
         $sport_type = CRICKET;
       }
       $fantasy_type= isset($request->fantasy_type) ? $request->fantasy_type :0;
       if($fantasy_type == 5){
         $fantasy_type = 0;
       }
       // $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
       $sportType = (object)array();
       $sportType->id = Helpers::get_sport_type($request->sport_key);
       $user_id = $request->user_id;

       // $matchkey = 44305;
       // $sport_type = CRICKET;
       // $user_id = 4825;

       // sum(result_points.runouts) as runouts,
       $point_sport_types = array(
         "CRICKET" =>  'player_name,
         players.player_key,
         players.credit,
         players.role,
         playerdetails.image,
         result_matches.player_id,
         teams.team,
         teams.short_name,

         sum(startingpoints) as startingpoints,
         sum(result_matches.runs) as runs,
         sum(result_points.fours) as fours,
         sum(result_points.sixs) as sixs,
         sum(result_points.strike_rate) as actual_strike_rate,
         sum(result_matches.strike_rate) as strike_rate,
         sum(result_points.halcentury) as halcentury,
         sum(result_points.halcentury) as actual_halcentury,
         sum(result_points.thirty_runs) as actual_thirty_runs,
         sum(result_points.thirty_runs) as thirty_runs,
         sum(century) as century,
         sum(result_points.duck) as duck,
         sum(wickets)as actual_wickets,
         sum(result_matches.wicket) as wickets,
         sum(result_points.economy_rate) as actual_economy_rate,
         sum(result_matches.economy_rate) as economy_rate,
         sum(result_points.maidens) as maidens,
         sum(result_matches.runouts) as runouts,
         sum(result_points.runout_thrower) as actual_runout_thrower,
         sum(result_points.runout_catcher) as actual_runout_catcher,
         sum(result_matches.runout_thrower) as runout_thrower,
         sum(result_matches.runout_catcher) as runout_catcher,
         sum(result_points.catch) as actual_catch_points,
         sum(result_matches.catch) as catch_points,
         sum(stumping) as actual_stumping,
         sum(stumbed) as stumping,
         sum(result_points.lbw_bowled) as lbw_bowled,
         sum(result_matches.lbw_bowled) as actual_lbw_bowled,
         sum(result_points.bonus) as bonus,
         sum(total) as total,
         sum(total) as total_points,
         sum(total) as actual_total_points,
         sum(total) as points,
         sum(not_out) as not_out,
         sum(result_points.negative) as negative,
         sum(result_matches.runout_thrower) as runout_thrower,
         sum(result_matches.runout_catcher) as runout_catcher,
         sum(result_points.runs) as actual_runs,
         sum(result_matches.fours) as actual_fours,
         sum(result_matches.starting11) as actual_startingpoints,
         sum(result_matches.six) as actual_sixs,
         sum(result_matches.maiden_over) as actual_maidens,
         sum(result_matches.duck) as actual_duck,
         sum(result_points.runouts) as actual_runouts,
         sum(result_matches.negative_points) as negative_points_actual,
         sum(result_matches.notout) as actual_notout



         ',
         // sum(result_points.minutesplayed) as minutesplayed,
         // sum(result_matches.minutesplayed) as actual_minutesplayed,

         "FOOTBALL" => "player_name,
         players.player_key,
         players.credit,
         result_matches.player_id,
         teams.team,
         playerdetails.image,

         sum(result_matches.starting11) as starting11,

         sum(result_points.goals) as goals,
         sum(result_matches.goals) as actual_goals,
         sum(result_points.assist) as assist,
         sum(result_matches.assist) as actual_assist,
         sum(result_points.totalpass) as totalpass,
         sum(result_matches.totalpass) as actual_totalpass,
         sum(result_points.shotsontarget) as shotsontarget,
         sum(result_matches.shotsontarget) as actual_shotsontarget,
         sum(result_points.cleansheet) as cleansheet,
         sum(result_matches.cleansheet) as actual_cleansheet,
         sum(result_points.shotsblocked) as shotsblocked,
         sum(result_matches.shotsblocked) as actual_shotsblocked,
         sum(result_points.penaltysave) as penaltysave,
         sum(result_matches.penaltywon) as actual_penaltysave,
         sum(result_points.tacklesuccess) as tacklesuccess,
         sum(result_matches.tacklesuccess) as actual_tacklesuccess,
         sum(result_points.yellowcard) as yellowcard,
         sum(result_matches.yellowcard) as actual_yellowcard,
         sum(result_points.redcard) as redcard,
         sum(result_matches.redcard) as actual_redcard,

         sum(result_points.owngoals) as owngoals,
         sum(result_matches.owngoals) as actual_owngoals,
         sum(result_points.penaltymiss) as penaltymiss,
         sum(result_matches.penaltymiss) as actual_penaltymiss,
         sum(result_points.goalconceded) as goalconceded,
         sum(result_matches.goalconceded) as actual_goalconceded,


         sum(result_points.chancecreated) as chancecreated,
         sum(result_matches.chancecreated) as actual_chancecreated,

         sum(result_points.interceptionwon) as interceptionwon,
         sum(result_matches.interceptionwon) as actual_interceptionwon,

         sum(result_points.blockedshot) as blockedshot,
         sum(result_matches.blockedshot) as actual_blockedshot,

         sum(result_points.clearance) as clearance,
         sum(result_matches.clearance) as actual_clearance,


         sum(result_points.total) as total_points,
         sum(result_matches.total_points) as actual_total_points,
         sum(result_points.total) as points


         ",
         "BASKETBALL" => "player_name,
         players.player_key,
         players.credit,
         result_matches.player_id,
         teams.team,
         playerdetails.image,

         sum(result_points.pointscored) as pointscored,
         sum(result_matches.pointscored) as actual_pointscored,
         sum(result_points.rebound) as rebound,
         sum(result_matches.rebound) as actual_rebound,
         sum(result_points.assist) as assist,
         sum(result_matches.assist) as actual_assist,
         sum(result_points.steal) as steal,
         sum(result_matches.steal) as actual_steal,
         sum(result_points.block) as block,
         sum(result_matches.block) as actual_block,
         sum(result_points.turnover) as turnover,
         sum(total) as total,
         sum(total) as total_points,
         sum(total) as actual_total_points,
         sum(total) as points,
         sum(result_matches.turnover) as actual_turnover",

         "BASEBALL"    =>  "player_name,
         players.player_key,
         players.credit,
         result_matches.player_id,
         teams.team,
         playerdetails.image,

         sum(result_points.single) as single,
         sum(result_points.single) as actual_single,
         sum(result_points.doubles) as doubles,
         sum(result_points.doubles) as actual_doubles,
         sum(result_points.triple) as triple,
         sum(result_points.triple) as actual_triple,
         sum(result_points.homerun) as homerun,
         sum(result_points.homerun) as actual_homerun,
         sum(result_points.runsbattedin) as runsbattedin,
         sum(result_points.runsbattedin) as actual_runsbattedin,
         sum(result_points.runscored) as runscored,
         sum(result_points.runscored) as actual_runscored,
         sum(result_points.baseonballshitter) as baseonballshitter,
         sum(result_points.baseonballshitter) as actual_baseonballshitter,
         sum(result_points.stolenbase) as stolenbase,
         sum(result_points.stolenbase) as actual_stolenbase,
         sum(result_points.inningpitched) as inningpitched,
         sum(result_points.inningpitched) as actual_inningpitched,
         sum(result_points.strikeout) as strikeout,
         sum(result_points.strikeout) as actual_strikeout,
         sum(result_points.earnedrun) as earnedrun,
         sum(result_points.earnedrun) as actual_earnedrun,
         sum(result_points.hitallowed) as hitallowed,
         sum(result_points.hitallowed) as actual_hitallowed,
         sum(result_points.baseonballpicther) as baseonballpicther,
         sum(result_points.baseonballpicther) as actual_baseonballpicther,
         sum(total) as total,
         sum(total) as total_points,
         sum(total) as actual_total_points,
         sum(total) as points,
         sum(result_matches.turnover) as actual_turnover",
         "KABADDI"       =>  "player_name,
         players.player_key,
         players.credit,
         result_matches.player_id,
         teams.team,
         playerdetails.image,

         sum(result_points.pointscored) as pointscored,
         sum(result_matches.pointscored) as actual_pointscored,
         sum(result_points.starting7) as starting7,
         sum(result_points.substitute) as substitute,
         sum(result_points.raidtouch) as raidtouch,
         sum(result_matches.raidtouch) as actual_raidtouch,
         sum(result_points.raidbonus) as raidbonus,
         sum(result_matches.raidbonus) as actual_raidbonus,
         sum(result_points.raidunsucceessful) as raidunsucceessful,
         sum(result_matches.raidunsuccessful) as actual_raidunsuccessful,
         sum(result_points.tacklesucceessful) as tacklesucceessful,
         sum(result_matches.tacklesucceessful) as actual_tacklesucceessful,
         sum(result_points.supertackle) as supertackle,
         sum(result_matches.supertackle) as actual_supertackle,
         sum(result_points.greencard) as greencard,
         sum(result_matches.greencard) as actual_greencard,
         sum(result_points.yellowcard) as yellowcard,
         sum(result_matches.yellowcard) as actual_yellowcard,
         sum(result_points.redcard) as redcard,
         sum(result_matches.redcard) as actual_redcard,
         sum(result_points.pushingallout) as pushingallout,
         sum(result_points.gettingallout) as gettingallout",
         "HANDBALL"      =>  "player_name,
         players.player_key,
         players.credit,
         result_matches.player_id,
         teams.team,
         players.role,
         teams.short_name,
         playerdetails.image,
         sum(result_points.goals) as goals,
         sum(result_matches.goals) as actual_goals,
         sum(result_points.saves) as saves,
         sum(result_matches.saves) as actual_saves,
         sum(result_points.penalty_saved) as penalty_saved,
         sum(result_matches.penalty_saved) as actual_penalty_saved,
         sum(result_points.yellowcard) as yellowcard,
         sum(result_matches.yellowcard) as actual_yellowcard,
         sum(result_points.redcard) as redcard,
         sum(result_matches.redcard) as actual_redcard,
         sum(result_points.bluecard) as bluecard,
         sum(result_matches.bluecard) as actual_bluecard,
         sum(result_points.ejections) as ejections,
         sum(result_matches.ejections) as actual_ejections,
         sum(result_points.penalty_miss) as penalty_miss,
         sum(result_matches.penalty_miss) as actual_penalty_miss,
         sum(result_matches.total_points) as actual_total_points,
         sum(result_points.total) as total_points

         ",
         "HOCKEY"        =>  "player_name,
         players.player_key,
         players.credit,
         result_matches.player_id,
         teams.team,
         playerdetails.image,
         sum(result_points.fantasy_credit) as fantasy_credit,
         sum(result_points.fantasy_credit) as actual_fantasy_credit,
         sum(result_points.pointscored) as pointscored,
         sum(result_matches.pointscored) as actual_pointscored,
         sum(result_points.minutesplayed) as minutesplayed,
         sum(result_matches.minutesplayed) as actual_minutesplayed,
         sum(result_points.goals) as goals,
         sum(result_matches.goals) as actual_goals,
         sum(result_points.passes) as passes,
         sum(result_matches.passes) as actual_passes,
         sum(result_points.circlepenetration) as circlepenetration,
         sum(result_matches.circlepenetration) as actual_circlepenetration,
         sum(result_points.penaltycornerearned) as penaltycornerearned,
         sum(result_matches.penaltycornerearned) as actual_penaltycornerearned,
         sum(result_points.penaltystrokeearned) as penaltystrokeearned,
         sum(result_matches.penaltystrokeearned) as actual_penaltystrokeearned,
         sum(result_points.greencard) as greencard,
         sum(result_matches.greencard) as actual_greencard,
         sum(result_points.yellowcard) as yellowcard,
         sum(result_matches.yellowcard) as actual_yellowcard,
         sum(result_points.redcard) as redcard,
         sum(result_matches.redcard) as actual_redcard,
         sum(result_points.penaltystrokemissed) as penaltystrokemissed,
         sum(result_matches.penaltystrokemissed) as actual_penaltystrokemissed,
         sum(result_points.goalsconceded) as goalsconceded,
         sum(result_matches.goalsconceded) as actual_goalsconceded,
         sum(result_points.penaltystrokesaved) as penaltystrokesaved,
         sum(result_matches.penaltystrokesaved) as actual_penaltystrokesaved,
         sum(result_points.saves) as saves,
         sum(result_matches.saves) as actual_saves,
         sum(result_points.tackles) as tackles,
         sum(result_matches.tackles) as actual_tackles,
         sum(result_points.interceptions) as interceptions,
         sum(result_matches.interceptions) as actual_interceptions,
         sum(result_points.blocks) as blocks,
         sum(result_matches.blocks) as actual_blocks,
         sum(result_points.shotongoal) as shotongoal,
         sum(result_matches.shotongoal) as actual_shotongoal,
         sum(result_points.cleansheet) as cleansheet,
         sum(result_matches.cleansheet) as actual_cleansheet",

       );

       $sport_type_array = array(

         "CRICKET" =>  [
           //      'player_name',
           // 'player_key',
           // 'player_id',
           // 'team',
           'credit',
           'startingpoints',
           'runs',
           'fours',
           'sixs',
           'strike_rate',
           'halcentury',
           'century',
           'thirty_runs',
           'duck',
           'wickets',
           'maidens',
           'not_out',
           'stumping',
           'lbw_bowled',
           'total',
           'total_points',
           'actual_total_points',
           'economy_rate',
           'runouts',
           'negative',
           'runout_thrower',
           'runout_catcher',
           'catch_points',
           'actual_stumping',
           'actual_runs',
           'actual_fours',
           'actual_startingpoints',
           'actual_sixs',
           'actual_strike_rate',
           'actual_wickets',
           'actual_maidens',
           'actual_economy_rate',
           'actual_duck',
           'actual_runouts',
           'negative_points_actual',
           'actual_lbw_bowled',
           'actual_catch',
           'actual_notout',
           'actual_runout_thrower',
           'actual_runout_catcher',
           'bonus']
           ,
           "FOOTBALL" => [
             'credit',
             // 'minutesplayed',
             // 'actual_minutesplayed',
             'starting11',
             'goals',
             'actual_goals',
             'assist',
             'actual_assist',
             'totalpass',
             'actual_totalpass',
             'cleansheet',
             'actual_cleansheet',
             'shotsblocked',
             'actual_shotsblocked',
             'penaltysave',
             'actual_penaltysave',
             'tacklesuccess',
             'actual_tacklesuccess',
             'yellowcard',
             'actual_yellowcard',
             'redcard',
             'actual_redcard',
             'owngoals',
             'actual_owngoals',
             'penaltymiss',
             'actual_penaltymiss',
             'goalconceded',
             'actual_goalconceded',
             'shotsontarget',
             'actual_shotsontarget',
             'chancecreated',
             'actual_chancecreated',
             'interceptionwon',
             'actual_interceptionwon',
             'blockedshot',
             'actual_blockedshot',
             'clearance',
             'actual_clearance',
             'total_points',
             'actual_total_points'


             ],
             "BASKETBALL" => [
               'pointscored','actual_pointscored','rebound','actual_rebound',
               'assist',
               'actual_assist',
               'steal',
               'actual_steal',
               'block',
               'actual_block',
               'turnover',
               'actual_turnover',
               'total_points',
               'actual_total_points'

               ],

               "KABADDI"       =>  [
                 'pointscored','actual_pointscored','starting7','substitute',
                 'raidtouch',
                 'actual_raidtouch',
                 'raidbonus',
                 'actual_raidbonus',
                 'raidunsucceessful',
                 'actual_raidunsuccessful',
                 'tacklesucceessful',
                 'actual_tacklesucceessful',
                 'supertackle',
                 'actual_supertackle',
                 'tacklesucceessful',
                 'actual_tacklesucceessful',
                 'greencard',
                 'actual_greencard',
                 'yellowcard',
                 'actual_yellowcard',
                 'redcard',
                 'actual_redcard',
                 'pushingallout',
                 'gettingallout'
                 ],
                 "BASEBALL"      =>  [
                   'single',
                   'double',
                   'triple ',
                   'homerun',
                   'runsbattedin',
                   'runscored',
                   'baseonballshitter',
                   'stolenbase ',
                   'inningpitched',
                   'strikeout',
                   'earnedrun',
                   'hitallowed',
                   'baseonballpicther',
                   'total_points',
                   'actual_total_points'
                   ],
                   "HOCKEY"        =>  [
                     'fantasy_credit',
                     'actual_fantasy_credit',
                     'pointscored',
                     'actual_pointscored',
                     'minutesplayed',
                     'actual_pointscored',
                     'goals',
                     'actual_goals',
                     'passes',
                     'actual_passes',
                     'circlepenetration',
                     'actual_circlepenetration',
                     'penaltycornerearned',
                     'actual_penaltycornerearned',
                     'penaltystrokeearned',
                     'actual_penaltystrokeearned',
                     'greencard',
                     'actual_greencard',
                     'yellowcard',
                     'actual_yellowcard',
                     'redcard',
                     'actual_redcard',
                     'penaltystrokemissed',
                     'actual_penaltystrokemissed',
                     'goalsconceded',
                     'actual_goalsconceded',
                     'penaltystrokesaved',
                     'actual_penaltystrokesaved',
                     'saves',
                     'actual_saves',
                     'tackles',
                     'actual_tackles',
                     'interceptions',
                     'actual_interceptions',
                     'blocks',
                     'actual_blocks',
                     'shotongoal',
                     'actual_shotongoal',
                     'cleansheet',
                     'actual_cleansheet'
                     ],
                     "HANDBALL"        =>  [
                       'goals',
                       'actual_goals',
                       'saves',
                       'actual_saves',
                       'penalty_saved',
                       'actual_penalty_saved',
                       'yellowcard',
                       'actual_yellowcard',
                       'bluecard',
                       'actual_bluecard',
                       'ejections',
                       'actual_ejections',
                       'penalty_miss',
                       'actual_penalty_miss',
                       'total_points',
                       'actual_total_points'
                       ]

                     );
                     $points_colums = $point_sport_types[$sport_type];


                     $players = MatchPlayer::join('players','players.id','=','matchplayers.playerid')
                     // ->join('result_points','result_points.playerid','=','players.id')
                     ->join('result_points', function($j) use($matchkey) {
                       $j->on('result_points.playerid','=','players.id')
                       ->on('result_points.matchkey','=','matchplayers.matchkey');
                     })
                     ->join('playerdetails','playerdetails.player_key','=','players.player_key')
                     ->join('result_matches','result_matches.id','=','result_points.resultmatch_id')
                     ->leftjoin('teams','players.team','=','teams.id')
                     ->where('starting11','!=',0)
                     ->where('result_matches.sport_type',$sportType->id)
                     ->where('players.sport_type',$sportType->id)
                     ->where('playerdetails.sport_type',$sportType->id)
                     ->where('matchplayers.matchkey',$matchkey)
                     ->where('result_points.matchkey',$matchkey)
                     ->where('result_points.fantasy_type_id',$fantasy_type)
                     ->select(DB::raw(
                       $points_colums),'matchplayers.selected_percent'
                       )->orderBy('total','desc')->groupBy('matchplayers.playerid')->get();

                       // echo "<pre>";print_r($players); exit;
                       // dd($players);



                       $array_diff = array();
                       $result = $players;
                       $my_players = JoinTeam::where('matchkey', $matchkey)
                       ->where('userid', $user_id)
                       ->where('sport_type', $sportType->id)
                       ->where('fantasy_type_id', $fantasy_type)
                       ->select('players')->get();
                       // dd($my_players);
                       $my_players_arr = '';
                       foreach ($my_players as $key12 => $value12) {
                         $my_players_arr .= ','.$value12->players;
                       }
                       $myunique_players = array_unique(array_filter(explode(',', $my_players_arr)));
                       // print_r($myunique_players); exit;
                       foreach ($players as $key => $value) {
                         $player_id = $value->player_id;
                         // echo "players=".$player_id;
                         // $total_choose = JoinTeam::whereRaw('FIND_IN_SET('.$player_id.',players)')->where('sport_type', $sportType->id)->where('matchkey', $matchkey)->count();//->select(DB::raw("COUNT(id) as total_count"))->get();



                         $total_selected = 0;
                         // $totalTeams =  JoinTeam::where('matchkey', $matchkey)->count();
                         if(1) {

                           // $selected_by = (int)number_format((($total_selected * 100) / $totalTeams), 2);

                           // $selected_by = $selected_by;

                           $players[$key]->selected_by = (string) $value->selected_percent;

                         } else{

                           $players[$key]->selected_by = "0";

                         }
                         // $players[$key]->selected_by = "0";
                         // $players[$key]->selected_by = "6";
                         $players[$key]->points = is_null($value->points) ? 0 : $value->points;
                         // $choose = JoinTeam::whereRaw('FIND_IN_SET('.$player_id.',players)')->where('matchkey', $matchkey)->where('userid', $user_id)->get();
                         if(in_array($player_id, $myunique_players)) {
                           // echo "<pre>";print_r($myunique_players);
                           $choose = 1;
                         } else {
                           $choose = 0;
                         }
                         if($choose) {
                           $players[$key]->isSelected = 1;
                         } else {
                           $players[$key]->isSelected = 0;
                         }


                         $players[$key]->image = PLAYERS_DIRECTORY_URL.@$players[$key]->image;
                         // $players[$key]->isSelected  = 1;

                         $array = json_decode(json_encode($players[$key]), true);
                         foreach ($array as $k => $v) {
                           if (in_array(key($array), $sport_type_array[$sport_type])) {
                             $breakup = array(
                               "event_name" =>  key($array),
                               // "event_name" =>  ucfirst($event_name),
                               "actual" => isset($array[$k]) ? str_replace(',', '', number_format((float)$array[$k], 2)) : 0,
                               "actual_points" => isset($array['actual_'.$k]) ? $array['actual_'.$k] : 0);

                               if ($sportType->id == 3 || $sportType->id == 2 || $sportType->id == 4) {
                                 $breakup = array(
                                   "event_name" =>  key($array),
                                   // "event_name" =>  ucfirst($event_name),
                                   "actual" => isset($array['actual_'.$k]) ? $array['actual_'.$k] : 0,
                                   "actual_points" =>  isset($array[$k]) ? $array[$k] : 0);
                                 }







                                 $get_name_to_show = [
                                   'startingpoints' => 'starting 11',
                                   'starting11'=>'Playing11',
                                   'runs' => 'Run',
                                   'fours' => '4\'s',
                                   'sixs' => '6\'s',
                                   'strike_rate' => 'S/R',
                                   'century' => '100\'s',
                                   'halcentury' => '50\'s',
                                   'thirty_runs' => '30\'s',
                                   'duck' => 'Duck',
                                   'wickets' => 'Wkts',
                                   'economy_rate' => 'E/R',
                                   'maidens' => 'Maiden Over',
                                   'runouts' => 'Run Out',
                                   'runout_thrower' => 'Runout thrower',
                                   'runout_catcher' => 'Runout catcher',
                                   'catch_points' => 'Catch',
                                   'stumping' => 'Stumping',
                                   'lbw_bowled'=>'Lbw / Bowled',
                                   'bonus'=>'Bonus Points',


                                   'pointscored' => 'Scored Points',
                                   'rebound' => 'Rebound',
                                   'assist' => 'Assist',
                                   'steal' => 'Steal',
                                   'block' => 'Block',
                                   'turnover' => 'Turnover',

                                   'minutesplayed' => 'Minutes played',
                                   'goals' => 'Goals',
                                   'assist' => 'Assist',
                                   'totalpass' => 'Total Passes',
                                   'cleansheet' => 'Clean sheet',
                                   'shotsblocked' => 'Shots blocked',
                                   'penaltysave' => 'Penalty save',
                                   'tacklesuccess' => 'Tackle success',
                                   'yellowcard' => 'Yellow card',
                                   'redcard' => 'Red card',
                                   'owngoals' => 'Own goals',
                                   'penaltymiss' => 'Penalty miss',
                                   'goalconceded' => 'Goal conceded',
                                   'pointscored'    => 'Point Scored' ,


                                   'starting7'      => 'Starting7',
                                   'substitute'     => 'Substitute',
                                   'raidtouch'      => 'raidtouch',
                                   'raidbonus'      => 'Raid Bonus',
                                   'Raidunsucceessful'=> 'Raid Unsucceessful',
                                   'tacklesucceessful'=> 'Tackle Succeessful',
                                   'supertackle'    => 'Super Tackle',
                                   'tacklesucceessful'=> 'Tackle Succeessful',
                                   'greencard'      => 'Green Card',
                                   'yellowcard'     => 'Yellow Card',
                                   'redcard'        => 'Red Card',
                                   'pushingallout'  => 'Pushing AllOut',
                                   'gettingallout'  => 'Getting AllOut',
                                   'fantasy_credit' => 'Fantasy Credit',
                                   'pointscored'=> 'Point Scored',
                                   'goals'=> 'Goals',
                                   'passes'=> 'Passes',
                                   'circlepenetration'=> 'Circle Penetration',
                                   'penaltycornerearned'=> 'Penalty Corner Earned',
                                   'penaltystrokeearned'=> 'Penalty Stroke Earned',
                                   'greencard'=> 'Green Card',
                                   'actual_greencard'=> 'Getting AllOut',
                                   'yellowcard'=> 'Getting AllOut',
                                   'Redcard'=> 'Red Card',
                                   'penaltystrokemissed'=> 'Penalty Stroke Missed',
                                   'goalsconceded'=> 'Goals Conceded',
                                   'penaltystrokesaved'=> 'Penalty Stroke Saved',
                                   'saves'=> 'Saves',
                                   'tackles'=> 'Tackles',
                                   'interceptions'=> 'Interceptions',
                                   'blocks'=> 'Blocks',
                                   'shotongoal'=> 'Shot on Goal',
                                   'cleansheet'=> 'Clean Sheet',
                                   'total_points'   => 'Total points',
                                   'goals'=>'Goals',
                                   'saves'=>'Save (GK only)',
                                   'penalty_saved'=>'Penalty Saved (GK only)',
                                   'yellowcard'=>'Yellow Card',
                                   'bluecard'=>'Blue Card',
                                   'ejections'=>'Ejections',
                                   'penalty_miss'=>'Penalty Miss',
                                   'shotsontarget'=>'Shots On Target',
                                   'chancecreated'=>'Chance Created',
                                   'interceptionwon'=>'Interception Won',
                                   'blockedshot'=>'Blocked Shot',
                                   'clearance'=>'Clearance',


                                   'single'=>'Single (1b)',
                                   'double' => 'Double (2b)',
                                   'triple' => 'Triple (3b)',
                                   'homerun'=> 'Home Run',
                                   'runsbattedin'=> 'Runs Batted in',
                                   'runscored'=> 'Runs Scored',
                                   'baseonballshitter' => 'Base On balls or Walk',
                                   'stolenbase '=> 'Stolen Base',
                                   'inningpitched'=> 'Inning Pitched',
                                   'strikeout'=> 'Strikeout',
                                   'earnedrun'=>'Earner Run',
                                   'hitallowed'=> 'Hit Allowed',
                                   'baseonballpicther'=> 'Base on Balls or Walk'
                                 ];

                                 //conditions

                                 if (key($array) == 'startingpoints') {
                                   $breakup['actual'] = ($breakup['actual'] == 4) ? "Yes" : "No";
                                   $breakup['actual_points'] = 4;
                                 }

                                 if (key($array) == 'starting11') {

                                   $breakup['actual'] = ($breakup['actual_points'] == 1) ? "Yes" : "No";
                                   $breakup['actual_points'] = 4;
                                 }


                                 if (key($array) == 'not_out') {
                                   $breakup['actual'] = ($breakup['actual_points'] == 1) ? "Yes" : "No";
                                 }


                                 if (key($array) == 'duck') {
                                   // $breakup['actual'] = ($breakup['actual_points'] == 1) ? "Yes" : "No";
                                   // $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
                                   $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
                                   $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
                                 }

                                 if (key($array) == 'wining') {
                                   $breakup['actual'] = ($breakup['actual_points'] >= 1) ? "Yes" : "No";
                                 }

                                 if (key($array) == 'halcentury') {
                                   $breakup['actual'] = ($breakup['actual_points'] > 0) ? 'Yes' : 'No';
                                 }

                                 if (key($array) == 'century') {
                                   $breakup['actual'] = ($breakup['actual_points'] > 0) ? 'Yes' : 'No';
                                 }

                                 if (key($array) == 'thirty_runs') {
                                   $breakup['actual'] = ($breakup['actual_points'] > 0) ? 'Yes' : 'No';
                                 }

                                 if (key($array) == 'point150') {
                                   $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
                                 }
                                 if (key($array) == 'point200') {
                                   $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
                                 }
                                 // if (key($array) == 'total_points') {
                                 //   $breakup['actual'] = '0';
                                 //   // $breakup['actual_points'] = 0;
                                 // }


                                 if (key($array) == 'sixs') {
                                   $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
                                   $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
                                 }

                                 if (key($array) == 'lbw_bowled') {
                                   $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
                                   $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
                                 }

                                 if (key($array) == 'bonus') {
                                   $breakup['actual'] = ($breakup['actual'] > 0) ? "Yes" : "No";
                                   $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
                                 }

                                 if (key($array) == 'turnover') {
                                   $breakup['actual'] = isset($array[$k]) ? $array[$k] : '';
                                   $breakup['actual_points'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
                                 }

                                 if (key($array) == 'maidens') {
                                   $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
                                   $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
                                 }

                                 if (key($array) == 'total_points') {
                                   $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
                                   $breakup['actual'] =  '';
                                 }


                                 if (array_key_exists(key($array),$get_name_to_show)) {
                                   $breakup['event_name'] = $get_name_to_show[key($array)];

                                   array_push($array_diff,$breakup);
                                 } else {
                                   unset($breakup);
                                 }


                                 // $not_in_events = ['credit'];
                                 // if (in_array(key($array), $not_in_events)) {
                                 //  unset($breakup);
                                 // } else {
                                 //  array_push($array_diff,$breakup);
                                 // }


                               }

                               next($array);
                             }
                             $result[$key]->breakup_points = $array_diff;
                             $breakup = [];
                             $array_diff = [];
                           }
                           $result = $players;
                           // $total_teams = JoinTeam::where('matchkey', $matchkey)->where('sport_type', $sportType->id)->count();

                           // $totalTeams = $total_teams;


                           if ($players->isEmpty() || $players==null || $players=="") {

                             $players =  (object) [];

                           }

                           // $players =  [];
                           // $players = array(array("player_id"=>2,"player_name"=>5,"breakup_points"=>[array(
                           //   "event_name"=>"run","actual"=>2,"actual_points"=>3
                           // )]));

                           //

                           return Response::json(["status" => STATUS_SUCCESS,"result" => $result]);

                           die;


                         }
    public function matchplayerspoints_old090823(Request $request) {
      // //
      // $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
      //
      // $txt = json_encode($request->all())."John Doe\n";
      //
      // fwrite($myfile, $txt);exit;

      $this->validate($request,[

        'user_id' => 'required',

        'matchkey' => 'required'

      ]);
      // dd($request->fantasy_type);
      $matchkey = $request->matchkey;
      $sport_type = (isset($request->sport_key) ? $request->sport_key : CRICKET);
      if($sport_type === 'LIVE'){
        $sport_type = CRICKET;
      }
      $fantasy_type= isset($request->fantasy_type) ? $request->fantasy_type :0;
      if($fantasy_type == 5){
        $fantasy_type = 0;
      }
      // $myfile = fopen("test.txt", "a") or die("Unable to open file!");
      // $txt = json_encode($fantasy_type);
      // $txt .= "\n";
      // fwrite($myfile, $txt);
      // fclose($myfile);
      // $sportType = DB::table('sport_types')->where('sport_key',$sport_type)->first();
      $sportType = (object)array();
    $sportType->id = Helpers::get_sport_type($request->sport_key);
      $user_id = $request->user_id;

      // $matchkey = 44305;
      // $sport_type = CRICKET;
      // $user_id = 4825;
       $point_sport_types = array(
         "CRICKET" =>  'player_name,
            players.player_key,
            players.credit,
            players.role,
            playerdetails.image,
            result_matches.player_id,
            teams.team,
            teams.short_name,
               sum(startingpoints) as startingpoints,
               sum(result_points.runs) as runs,
               sum(result_points.fours) as fours,
               sum(result_points.sixs) as sixs,
               sum(result_points.strike_rate) as actual_strike_rate,
               sum(result_matches.strike_rate) as strike_rate,
             sum(halcentury) as halcentury,
               sum(century) as century,
               sum(result_points.duck) as duck,
               sum(wickets)as actual_wickets,
               sum(result_matches.wicket) as wickets,
               sum(result_points.economy_rate) as actual_economy_rate,
               sum(result_matches.economy_rate) as economy_rate,
               sum(result_points.maidens) as maidens,
               sum(result_points.runouts) as actual_runouts,
               sum(result_points.runout_thrower) as actual_runout_thrower,
            sum(result_points.runout_catcher) as actual_runout_catcher,
            sum(result_matches.runout_thrower) as runout_thrower,
            sum(result_matches.runout_catcher) as runout_catcher,
               sum(result_points.catch) as actual_catch_points,
               sum(result_matches.catch) as catch_points,
               sum(stumping) as actual_stumping,
               sum(stumbed) as stumping,
               sum(result_points.lbw_bowled) as lbw_bowled,
               sum(result_matches.lbw_bowled) as actual_lbw_bowled,
               sum(result_points.bonus) as bonus,
               sum(total) as total,
               sum(total) as total_points,
               sum(total) as actual_total_points,
               sum(total) as points,
               sum(not_out) as not_out,
               sum(result_points.negative) as negative,
               sum(result_points.runout_thrower) as runout_thrower,
               sum(result_points.runout_catcher) as runout_catcher,
               sum(result_matches.runs) as actual_runs,
               sum(result_matches.fours) as actual_fours,
               sum(result_matches.starting11) as actual_startingpoints,
               sum(result_matches.six) as actual_sixs,
               sum(result_matches.maiden_over) as actual_maidens,
               sum(result_matches.duck) as actual_duck,
               sum(result_matches.runouts) as runouts,
               sum(result_matches.negative_points) as negative_points_actual,
               sum(result_matches.notout) as actual_notout



               ',
               // sum(result_points.minutesplayed) as minutesplayed,
               // sum(result_matches.minutesplayed) as actual_minutesplayed,

         "FOOTBALL" => "player_name,
            players.player_key,
            players.credit,
            result_matches.player_id,
            teams.team,
            playerdetails.image,

sum(result_matches.starting11) as starting11,

            sum(result_points.goals) as goals,
            sum(result_matches.goals) as actual_goals,
            sum(result_points.assist) as assist,
            sum(result_matches.assist) as actual_assist,
            sum(result_points.totalpass) as totalpass,
            sum(result_matches.totalpass) as actual_totalpass,
            sum(result_points.shotsontarget) as shotsontarget,
            sum(result_matches.shotsontarget) as actual_shotsontarget,
            sum(result_points.cleansheet) as cleansheet,
            sum(result_matches.cleansheet) as actual_cleansheet,
            sum(result_points.shotsblocked) as shotsblocked,
            sum(result_matches.shotsblocked) as actual_shotsblocked,
            sum(result_points.penaltysave) as penaltysave,
            sum(result_matches.penaltywon) as actual_penaltysave,
            sum(result_points.tacklesuccess) as tacklesuccess,
            sum(result_matches.tacklesuccess) as actual_tacklesuccess,
            sum(result_points.yellowcard) as yellowcard,
            sum(result_matches.yellowcard) as actual_yellowcard,
            sum(result_points.redcard) as redcard,
            sum(result_matches.redcard) as actual_redcard,

            sum(result_points.owngoals) as owngoals,
            sum(result_matches.owngoals) as actual_owngoals,
            sum(result_points.penaltymiss) as penaltymiss,
            sum(result_matches.penaltymiss) as actual_penaltymiss,
            sum(result_points.goalconceded) as goalconceded,
            sum(result_matches.goalconceded) as actual_goalconceded,


            sum(result_points.chancecreated) as chancecreated,
            sum(result_matches.chancecreated) as actual_chancecreated,

            sum(result_points.interceptionwon) as interceptionwon,
            sum(result_matches.interceptionwon) as actual_interceptionwon,

            sum(result_points.blockedshot) as blockedshot,
            sum(result_matches.blockedshot) as actual_blockedshot,

            sum(result_points.clearance) as clearance,
            sum(result_matches.clearance) as actual_clearance,


            sum(result_points.total) as total_points,
            sum(result_matches.total_points) as actual_total_points,
            sum(result_points.total) as points


            ",
         "BASKETBALL" => "player_name,
            players.player_key,
            players.credit,
            result_matches.player_id,
            teams.team,
            playerdetails.image,

         sum(result_points.pointscored) as pointscored,
         sum(result_matches.pointscored) as actual_pointscored,
         sum(result_points.rebound) as rebound,
         sum(result_matches.rebound) as actual_rebound,
         sum(result_points.assist) as assist,
         sum(result_matches.assist) as actual_assist,
         sum(result_points.steal) as steal,
         sum(result_matches.steal) as actual_steal,
         sum(result_points.block) as block,
         sum(result_matches.block) as actual_block,
         sum(result_points.turnover) as turnover,
         sum(total) as total,
         sum(total) as total_points,
         sum(total) as actual_total_points,
         sum(total) as points,
         sum(result_matches.turnover) as actual_turnover",

         "BASEBALL"    =>  "player_name,
                        players.player_key,
                        players.credit,
                        result_matches.player_id,
                        teams.team,
                        playerdetails.image,

                        sum(result_points.single) as single,
                        sum(result_points.single) as actual_single,
                        sum(result_points.doubles) as doubles,
                        sum(result_points.doubles) as actual_doubles,
                        sum(result_points.triple) as triple,
                        sum(result_points.triple) as actual_triple,
                        sum(result_points.homerun) as homerun,
                        sum(result_points.homerun) as actual_homerun,
                        sum(result_points.runsbattedin) as runsbattedin,
                        sum(result_points.runsbattedin) as actual_runsbattedin,
                        sum(result_points.runscored) as runscored,
                        sum(result_points.runscored) as actual_runscored,
                        sum(result_points.baseonballshitter) as baseonballshitter,
                        sum(result_points.baseonballshitter) as actual_baseonballshitter,
                        sum(result_points.stolenbase) as stolenbase,
                        sum(result_points.stolenbase) as actual_stolenbase,
                        sum(result_points.inningpitched) as inningpitched,
                        sum(result_points.inningpitched) as actual_inningpitched,
                        sum(result_points.strikeout) as strikeout,
                        sum(result_points.strikeout) as actual_strikeout,
                        sum(result_points.earnedrun) as earnedrun,
                        sum(result_points.earnedrun) as actual_earnedrun,
                        sum(result_points.hitallowed) as hitallowed,
                        sum(result_points.hitallowed) as actual_hitallowed,
                        sum(result_points.baseonballpicther) as baseonballpicther,
                        sum(result_points.baseonballpicther) as actual_baseonballpicther,
                        sum(total) as total,
                        sum(total) as total_points,
                        sum(total) as actual_total_points,
                        sum(total) as points,
                        sum(result_matches.turnover) as actual_turnover",
    "KABADDI"       =>  "player_name,
                        players.player_key,
                        players.credit,
                        result_matches.player_id,
                        teams.team,
                        playerdetails.image,

                        sum(result_points.pointscored) as pointscored,
                        sum(result_matches.pointscored) as actual_pointscored,
                        sum(result_points.starting7) as starting7,
                        sum(result_points.substitute) as substitute,
                        sum(result_points.raidtouch) as raidtouch,
                        sum(result_matches.raidtouch) as actual_raidtouch,
                        sum(result_points.raidbonus) as raidbonus,
                        sum(result_matches.raidbonus) as actual_raidbonus,
                        sum(result_points.raidunsucceessful) as raidunsucceessful,
                        sum(result_matches.raidunsuccessful) as actual_raidunsuccessful,
                        sum(result_points.tacklesucceessful) as tacklesucceessful,
                        sum(result_matches.tacklesucceessful) as actual_tacklesucceessful,
                        sum(result_points.supertackle) as supertackle,
                        sum(result_matches.supertackle) as actual_supertackle,
                        sum(result_points.greencard) as greencard,
                        sum(result_matches.greencard) as actual_greencard,
                        sum(result_points.yellowcard) as yellowcard,
                        sum(result_matches.yellowcard) as actual_yellowcard,
                        sum(result_points.redcard) as redcard,
                        sum(result_matches.redcard) as actual_redcard,
                        sum(result_points.pushingallout) as pushingallout,
                        sum(result_points.gettingallout) as gettingallout,
                        sum(total) as points,
                             sum(result_points.total) as points",


    "HANDBALL"      =>  "player_name,
                       players.player_key,
                       players.credit,
                       result_matches.player_id,
                       teams.team,
                       players.role,
                       teams.short_name,
                       playerdetails.image,
                       sum(result_points.goals) as goals,
                       sum(result_matches.goals) as actual_goals,
                       sum(result_points.saves) as saves,
                       sum(result_matches.saves) as actual_saves,
                       sum(result_points.penalty_saved) as penalty_saved,
                       sum(result_matches.penalty_saved) as actual_penalty_saved,
                       sum(result_points.yellowcard) as yellowcard,
                       sum(result_matches.yellowcard) as actual_yellowcard,
                       sum(result_points.redcard) as redcard,
                       sum(result_matches.redcard) as actual_redcard,
                       sum(result_points.bluecard) as bluecard,
                       sum(result_matches.bluecard) as actual_bluecard,
                       sum(result_points.ejections) as ejections,
                       sum(result_matches.ejections) as actual_ejections,
                       sum(result_points.penalty_miss) as penalty_miss,
                       sum(result_matches.penalty_miss) as actual_penalty_miss,
                       sum(result_matches.total_points) as actual_total_points,
                       sum(result_points.total) as total_points,
                       sum(total) as points

                       ",
    "HOCKEY"        =>  "player_name,
                        players.player_key,
                        players.credit,
                        result_matches.player_id,
                        teams.team,
                        playerdetails.image,
                        sum(result_points.fantasy_credit) as fantasy_credit,
                        sum(result_points.fantasy_credit) as actual_fantasy_credit,
                        sum(result_points.pointscored) as pointscored,
                        sum(result_matches.pointscored) as actual_pointscored,
                        sum(result_points.minutesplayed) as minutesplayed,
                        sum(result_matches.minutesplayed) as actual_minutesplayed,
                        sum(result_points.goals) as goals,
                        sum(result_matches.goals) as actual_goals,
                        sum(result_points.passes) as passes,
                        sum(result_matches.passes) as actual_passes,
                        sum(result_points.circlepenetration) as circlepenetration,
                        sum(result_matches.circlepenetration) as actual_circlepenetration,
                        sum(result_points.penaltycornerearned) as penaltycornerearned,
                        sum(result_matches.penaltycornerearned) as actual_penaltycornerearned,
                        sum(result_points.penaltystrokeearned) as penaltystrokeearned,
                        sum(result_matches.penaltystrokeearned) as actual_penaltystrokeearned,
                        sum(result_points.greencard) as greencard,
                        sum(result_matches.greencard) as actual_greencard,
                        sum(result_points.yellowcard) as yellowcard,
                        sum(result_matches.yellowcard) as actual_yellowcard,
                        sum(result_points.redcard) as redcard,
                        sum(result_matches.redcard) as actual_redcard,
                        sum(result_points.penaltystrokemissed) as penaltystrokemissed,
                        sum(result_matches.penaltystrokemissed) as actual_penaltystrokemissed,
                        sum(result_points.goalsconceded) as goalsconceded,
                        sum(result_matches.goalsconceded) as actual_goalsconceded,
                        sum(result_points.penaltystrokesaved) as penaltystrokesaved,
                        sum(result_matches.penaltystrokesaved) as actual_penaltystrokesaved,
                        sum(result_points.saves) as saves,
                        sum(result_matches.saves) as actual_saves,
                        sum(result_points.tackles) as tackles,
                        sum(result_matches.tackles) as actual_tackles,
                        sum(result_points.interceptions) as interceptions,
                        sum(result_matches.interceptions) as actual_interceptions,
                        sum(result_points.blocks) as blocks,
                        sum(result_matches.blocks) as actual_blocks,
                        sum(result_points.shotongoal) as shotongoal,
                        sum(result_matches.shotongoal) as actual_shotongoal,
                        sum(result_points.cleansheet) as cleansheet,
                        sum(total) as points,
                        sum(result_matches.cleansheet) as actual_cleansheet",

    );

       $sport_type_array = array(

         "CRICKET" =>  [
      //      'player_name',
            // 'player_key',
            // 'player_id',
            // 'team',
             'credit',
               'startingpoints',
               'runs',
               'fours',
               'sixs',
               'strike_rate',
             'halcentury',
               'century',
               'duck',
               'wickets',
               'maidens',
               'not_out',
               'stumping',
               'lbw_bowled',
               'total',
               'total_points',
               'actual_total_points',
               'economy_rate',
               'runouts',
               'negative',
               'runout_thrower',
               'runout_catcher',
               'catch_points',
               'actual_stumping',
               'actual_runs',
               'actual_fours',
               'actual_startingpoints',
               'actual_sixs',
               'actual_strike_rate',
               'actual_wickets',
               'actual_maidens',
               'actual_economy_rate',
               'actual_duck',
               'actual_runouts',
               'negative_points_actual',
               'actual_lbw_bowled',
               'actual_catch',
               'actual_notout',
               'actual_runout_thrower',
               'actual_runout_catcher',
               'bonus']
               ,
         "FOOTBALL" => [
          'credit',
          // 'minutesplayed',
// 'actual_minutesplayed',
'starting11',
'goals',
'actual_goals',
'assist',
'actual_assist',
'totalpass',
'actual_totalpass',
'cleansheet',
'actual_cleansheet',
'shotsblocked',
'actual_shotsblocked',
'penaltysave',
'actual_penaltysave',
'tacklesuccess',
'actual_tacklesuccess',
'yellowcard',
'actual_yellowcard',
'redcard',
'actual_redcard',
'owngoals',
'actual_owngoals',
'penaltymiss',
'actual_penaltymiss',
'goalconceded',
'actual_goalconceded',
'shotsontarget',
'actual_shotsontarget',
  'chancecreated',
  'actual_chancecreated',
  'interceptionwon',
  'actual_interceptionwon',
  'blockedshot',
  'actual_blockedshot',
  'clearance',
  'actual_clearance',
'total_points',
'actual_total_points'


                ],
         "BASKETBALL" => [
                 'pointscored','actual_pointscored','rebound','actual_rebound',
                 'assist',
                 'actual_assist',
                 'steal',
                 'actual_steal',
                 'block',
                 'actual_block',
                 'turnover',
                 'actual_turnover',
                 'total_points',
                 'actual_total_points'

                ],

                "KABADDI"       =>  [
                        'pointscored','actual_pointscored','starting7','substitute',
                        'raidtouch',
                        'actual_raidtouch',
                        'raidbonus',
                        'actual_raidbonus',
                        'raidunsucceessful',
                        'actual_raidunsuccessful',
                        'tacklesucceessful',
                        'actual_tacklesucceessful',
                        'supertackle',
                        'actual_supertackle',
                        'tacklesucceessful',
                        'actual_tacklesucceessful',
                        'greencard',
                        'actual_greencard',
                        'yellowcard',
                        'actual_yellowcard',
                        'redcard',
                        'actual_redcard',
                        'pushingallout',
                        'gettingallout',
                        'total',
                        'total_points',
                        'actual_total_points'
                        ],
    "BASEBALL"      =>  [
                        'single',
                        'double',
                        'triple ',
                        'homerun',
                        'runsbattedin',
                        'runscored',
                        'baseonballshitter',
                        'stolenbase ',
                        'inningpitched',
                        'strikeout',
                        'earnedrun',
                        'hitallowed',
                        'baseonballpicther',
                         'total_points',
                         'actual_total_points'
                         ],
    "HOCKEY"        =>  [
                        'fantasy_credit',
                        'actual_fantasy_credit',
                        'pointscored',
                        'actual_pointscored',
                        'minutesplayed',
                        'actual_pointscored',
                        'goals',
                        'actual_goals',
                        'passes',
                        'actual_passes',
                        'circlepenetration',
                        'actual_circlepenetration',
                        'penaltycornerearned',
                        'actual_penaltycornerearned',
                        'penaltystrokeearned',
                        'actual_penaltystrokeearned',
                        'greencard',
                        'actual_greencard',
                        'yellowcard',
                        'actual_yellowcard',
                        'redcard',
                        'actual_redcard',
                        'penaltystrokemissed',
                        'actual_penaltystrokemissed',
                        'goalsconceded',
                        'actual_goalsconceded',
                        'penaltystrokesaved',
                        'actual_penaltystrokesaved',
                        'saves',
                        'actual_saves',
                        'tackles',
                        'actual_tackles',
                        'interceptions',
                        'actual_interceptions',
                        'blocks',
                        'actual_blocks',
                        'shotongoal',
                        'actual_shotongoal',
                        'cleansheet',
                        'actual_cleansheet'
                        ],
    "HANDBALL"        =>  [
                       'goals',
                       'actual_goals',
                       'saves',
                       'actual_saves',
                       'penalty_saved',
                       'actual_penalty_saved',
                       'yellowcard',
                       'actual_yellowcard',
                       'bluecard',
                       'actual_bluecard',
                       'ejections',
                       'actual_ejections',
                       'penalty_miss',
                       'actual_penalty_miss',
                       'total_points',
                       'actual_total_points'
                       ]

       );
       $points_colums = $point_sport_types[$sport_type];

    //   $players = ResultPoint::join('result_matches','result_matches.id','=','result_points.resultmatch_id')->join('players','players.id','=','result_points.playerid')->join('playerdetails','playerdetails.player_key','=','players.player_key')->leftjoin('teams','players.team','=','teams.id')->where('starting11','!=',0)->where('result_matches.sport_type',$sportType->id)->where('matchkey',$matchkey)->select(DB::raw(
    //   $points_colums)
    // )->orderBy('total','desc')->groupBy('players.player_key')->get();
    // dd($sportType->id);
    $players = MatchPlayer::join('players','players.id','=','matchplayers.playerid')
                      // ->join('result_points','result_points.playerid','=','players.id')
                      ->join('result_points', function($j) use($matchkey) {
                        $j->on('result_points.playerid','=','players.id')
                        ->on('result_points.matchkey','=','matchplayers.matchkey');
                      })
                      ->join('playerdetails','playerdetails.player_key','=','players.player_key')
                      ->join('result_matches','result_matches.id','=','result_points.resultmatch_id')
                      ->leftjoin('teams','players.team','=','teams.id')
                      ->where('starting11','!=',0)
                      ->where('result_matches.sport_type',$sportType->id)
                      ->where('players.sport_type',$sportType->id)
                      ->where('playerdetails.sport_type',$sportType->id)
                      ->where('matchplayers.matchkey',$matchkey)
                      ->where('result_points.matchkey',$matchkey)
                      ->where('result_points.fantasy_type_id',$fantasy_type)
                      ->select(DB::raw(
                        $points_colums),'matchplayers.selected_percent'
                        )->orderBy('total','desc')->groupBy('matchplayers.id')->get();

    // dd($players);
      $array_diff = array();
      $result = $players;
      $my_players = JoinTeam::where('matchkey', $matchkey)
      ->where('userid', $user_id)
      ->where('sport_type', $sportType->id)
      ->where('fantasy_type_id',$fantasy_type)
      ->select('players')->get();
      // dd($my_players);
      $my_players_arr = '';
      foreach ($my_players as $key12 => $value12) {
        $my_players_arr .= ','.$value12->players;
      }
      $myunique_players = array_unique(array_filter(explode(',', $my_players_arr)));
      // print_r($myunique_players); exit;
  foreach ($players as $key => $value) {
         $player_id = $value->player_id;

       // $total_choose = JoinTeam::whereRaw('FIND_IN_SET('.$player_id.',players)')->where('sport_type', $sportType->id)->where('matchkey', $matchkey)->count();//->select(DB::raw("COUNT(id) as total_count"))->get();



        $total_selected = 0;
        // $totalTeams =  JoinTeam::where('matchkey', $matchkey)->count();
        if(1) {

        // $selected_by = (int)number_format((($total_selected * 100) / $totalTeams), 2);

        // $selected_by = $selected_by;

        $players[$key]->selected_by = (string) $value->selected_percent;

        } else{

          $players[$key]->selected_by = "0";

        }
        // $players[$key]->selected_by = "0";
      // $players[$key]->selected_by = "6";
      $players[$key]->points = is_null($value->points) ? 0 : $value->points;
        // $choose = JoinTeam::whereRaw('FIND_IN_SET('.$player_id.',players)')->where('matchkey', $matchkey)->where('userid', $user_id)->get();
      if(in_array($player_id, $myunique_players)) {
        $choose = 1;
        if($choose) {
          $players[$key]->isSelected = 1;
        }
      }else {
          $players[$key]->isSelected = 0;
        }


      $players[$key]->image = PLAYERS_DIRECTORY_URL.@$players[$key]->image;
      // $players[$key]->isSelected  = 1;
        $array = json_decode(json_encode($players[$key]), true);
        // echo "<pre>";print_r($array);exit;
      foreach ($array as $k => $v) {
        if (in_array(key($array), $sport_type_array[$sport_type])) {
          $breakup = array(
        "event_name" =>  key($array),
        // "event_name" =>  ucfirst($event_name),
        "actual" => isset($array[$k]) ? str_replace(',', '', number_format((float)$array[$k], 2)) : 0,
        "actual_points" => isset($array['actual_'.$k]) ? $array['actual_'.$k] : 0);

          if ($sportType->id == 3 || $sportType->id == 2 || $sportType->id == 4) {
            $breakup = array(
        "event_name" =>  key($array),
        // "event_name" =>  ucfirst($event_name),
        "actual" => isset($array['actual_'.$k]) ? $array['actual_'.$k] : 0,
        "actual_points" =>  isset($array[$k]) ? $array[$k] : 0);
          }
          $get_name_to_show = [
            'startingpoints' => 'starting 11',
            'starting11'=>'Playing11',
            'runs' => 'Run',
            'fours' => '4\'s',
             'sixs' => '6\'s',
            'strike_rate' => 'S/R',
            'century' => '100\'s',
            'halcentury' => '50\'s',
            'duck' => 'Duck',
            'wickets' => 'Wkts',
            'economy_rate' => 'E/R',
            'maidens' => 'Maider Over',
            'runouts' => 'Run Out',
            'runout_thrower' => 'Runout thrower',
            'runout_catcher' => 'Runout catcher',
            'catch_points' => 'Catch',
            'stumping' => 'Stumping',
            'lbw_bowled'=>'Lbw / Bowled',
            'bonus'=>'Bonus Points',


                 'pointscored' => 'Scored Points',
                 'rebound' => 'Rebound',
                 'assist' => 'Assist',
                 'steal' => 'Steal',
                 'block' => 'Block',
                 'turnover' => 'Turnover',

                 'minutesplayed' => 'Minutes played',
'goals' => 'Goals',
'assist' => 'Assist',
'totalpass' => 'Total Passes',
'cleansheet' => 'Clean sheet',
'shotsblocked' => 'Shots blocked',
'penaltysave' => 'Penalty save',
'tacklesuccess' => 'Tackle success',
'yellowcard' => 'Yellow card',
'redcard' => 'Red card',
'owngoals' => 'Own goals',
'penaltymiss' => 'Penalty miss',
'goalconceded' => 'Goal conceded',
'pointscored'    => 'Point Scored' ,


            'starting7'      => 'Starting7',
            'substitute'     => 'Substitute',
            'raidtouch'      => 'raidtouch',
            'raidbonus'      => 'Raid Bonus',
            'Raidunsucceessful'=> 'Raid Unsucceessful',
            'tacklesucceessful'=> 'Tackle Succeessful',
            'supertackle'    => 'Super Tackle',
            'tacklesucceessful'=> 'Tackle Succeessful',
            'greencard'      => 'Green Card',
            'yellowcard'     => 'Yellow Card',
            'redcard'        => 'Red Card',
            'pushingallout'  => 'Pushing AllOut',
            'gettingallout'  => 'Getting AllOut',
            'fantasy_credit' => 'Fantasy Credit',
            'pointscored'=> 'Point Scored',
            'goals'=> 'Goals',
            'passes'=> 'Passes',
            'circlepenetration'=> 'Circle Penetration',
            'penaltycornerearned'=> 'Penalty Corner Earned',
            'penaltystrokeearned'=> 'Penalty Stroke Earned',
            'greencard'=> 'Green Card',
            'actual_greencard'=> 'Getting AllOut',
            'yellowcard'=> 'Getting AllOut',
            'Redcard'=> 'Red Card',
            'penaltystrokemissed'=> 'Penalty Stroke Missed',
            'goalsconceded'=> 'Goals Conceded',
            'penaltystrokesaved'=> 'Penalty Stroke Saved',
            'saves'=> 'Saves',
            'tackles'=> 'Tackles',
            'interceptions'=> 'Interceptions',
            'blocks'=> 'Blocks',
            'shotongoal'=> 'Shot on Goal',
            'cleansheet'=> 'Clean Sheet',
            //'total_points'   => 'Total points',
            'goals'=>'Goals',
            'saves'=>'Save (GK only)',
            'penalty_saved'=>'Penalty Saved (GK only)',
            'yellowcard'=>'Yellow Card',
            'bluecard'=>'Blue Card',
            'ejections'=>'Ejections',
            'penalty_miss'=>'Penalty Miss',
'shotsontarget'=>'Shots On Target',
            'chancecreated'=>'Chance Created',
            'interceptionwon'=>'Interception Won',
            'blockedshot'=>'Blocked Shot',
            'clearance'=>'Clearance',


            'single'=>'Single (1b)',
            'double' => 'Double (2b)',
            'triple' => 'Triple (3b)',
            'homerun'=> 'Home Run',
            'runsbattedin'=> 'Runs Batted in',
            'runscored'=> 'Runs Scored',
            'baseonballshitter' => 'Base On balls or Walk',
            'stolenbase '=> 'Stolen Base',
            'inningpitched'=> 'Inning Pitched',
            'strikeout'=> 'Strikeout',
            'earnedrun'=>'Earner Run',
            'hitallowed'=> 'Hit Allowed',
            'baseonballpicther'=> 'Base on Balls or Walk'
                  ];

            //conditions

        if (key($array) == 'startingpoints') {
          $breakup['actual'] = ($breakup['actual'] == 4) ? "Yes" : "No";
          $breakup['actual_points'] = 4;
        }

        if (key($array) == 'starting11') {

          $breakup['actual'] = ($breakup['actual_points'] == 1) ? "Yes" : "No";
          $breakup['actual_points'] = 4;
        }


        if (key($array) == 'not_out') {
          $breakup['actual'] = ($breakup['actual_points'] == 1) ? "Yes" : "No";
        }


        if (key($array) == 'duck') {
          // $breakup['actual'] = ($breakup['actual_points'] == 1) ? "Yes" : "No";
          // $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
          $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
          $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
        }

        if (key($array) == 'wining') {
          $breakup['actual'] = ($breakup['actual_points'] >= 1) ? "Yes" : "No";
        }

        if (key($array) == 'halcentury') {
          $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
        }

         if (key($array) == 'century') {
          $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
        }

         if (key($array) == 'point150') {
          $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
        }
         if (key($array) == 'point200') {
          $breakup['actual'] = ($breakup['actual_points'] > 0) ? 1 : 0;
        }
        // if (key($array) == 'total_points') {
        //   $breakup['actual'] = '0';
        //   // $breakup['actual_points'] = 0;
        // }


        if (key($array) == 'sixs') {
        $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
        $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
        }

if (key($array) == 'lbw_bowled') {
$breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
$breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
}

if (key($array) == 'bonus') {
  $breakup['actual'] = ($breakup['actual'] > 0) ? "Yes" : "No";
  $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
}

        if (key($array) == 'turnover') {
        $breakup['actual'] = isset($array[$k]) ? $array[$k] : '';
        $breakup['actual_points'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
        }

                if (key($array) == 'maidens') {
                $breakup['actual_points'] = isset($array[$k]) ? $array[$k] : '';
                $breakup['actual'] = isset($array['actual_'.$k]) ? $array['actual_'.$k] : '';
                }




        if (array_key_exists(key($array),$get_name_to_show)) {

        $breakup['event_name'] = $get_name_to_show[key($array)];

        array_push($array_diff,$breakup);
          } else {
        unset($breakup);
          }


        // $not_in_events = ['credit'];
        // if (in_array(key($array), $not_in_events)) {
        //  unset($breakup);
        // } else {
      //  array_push($array_diff,$breakup);
        // }


        }

      next($array);
      }
      $result[$key]->breakup_points = $array_diff;
         $breakup = [];
         $array_diff = [];
    }
    $result = $players;
        // $total_teams = JoinTeam::where('matchkey', $matchkey)->where('sport_type', $sportType->id)->count();

         // $totalTeams = $total_teams;


      if ($players->isEmpty() || $players==null || $players=="") {

        $players =  (object) [];

      }

      // $players =  [];
      // $players = array(array("player_id"=>2,"player_name"=>5,"breakup_points"=>[array(
      //   "event_name"=>"run","actual"=>2,"actual_points"=>3
      // )]));

      //

      return Response::json(["status" => STATUS_SUCCESS,"result" => $result]);

      die;


    }


    public function findJoinTeam(Request $request){

    $this->validate($request,[

      // 'matchkey' => 'required',

      'user_id'   => 'required'

    ]);

    $matchkey = $request->matchkey;

    $userid = $request->user_id;

    if (isset($request->challenge_id)) {

      $challenge_id = $request->challenge_id;

      $matchkey_row = MatchChallenge::where('id',$challenge_id)->first();

      $matchkey = $matchkey_row->matchkey;

    }

    $findjointeam = JoinTeam::where('matchkey',$request->matchkey)->where('userid',$request->user_id)->orderBy('teamnumber','ASC')->select('id','teamnumber')->get();

    $Json=array();

    if(!empty($findjointeam)){

      $i=0;

      foreach($findjointeam as $jointeam){

        $Json[$i]['teamnumber'] = $jointeam->teamnumber;

        $Json[$i]['teamid'] = $jointeam->id;

        $i++;

      }

    }

    return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

    die;

  }





  public function findjointeamofusers(Request $request){

    $this->validate($request,[

      'matchkey' => 'required',

      'userid' => 'required',

      'loginid' => 'required',

      'challengeid' => 'required',

    ]);

    $matchkey = $request->matchkey;

    $userid = $request->userid;

    $loginid = $request->loginid;

    if(!empty($request->challengeid)){

      $challengeid = $request->challengeid;

      if($userid==$loginid){

        $findjointeam = JoinTeam::where('matchkey',$request->matchkey)->where('userid',$request->userid)->orderBy('teamnumber','ASC')->select('id','teamnumber','points')->get();

        $Json=array();

        if(!empty($findjointeam)){

          $i=0;

          foreach($findjointeam as $jointeam){

            $Json[$i]['teamnumber'] = $jointeam->teamnumber;

            $Json[$i]['teamid'] = $jointeam->id;

            $Json[$i]['points'] = $jointeam->points;

            $Json[$i]['userid'] = $request->userid;

            $Json[$i]['challengeid'] = $request->challengeid;

            $i++;

          }

        }

      }

      else{

        $findjointeam = JoinTeam::join('joinedleauges','joinedleauges.teamid','=','jointeam.id')->where('jointeam.matchkey',$request->matchkey)->where('jointeam.userid',$request->userid)->where('joinedleauges.challengeid',$request->challengeid)->orderBy('teamnumber','ASC')->select('jointeam.id','teamnumber','points')->get();

        $Json=array();

        if(!empty($findjointeam)){

          $i=0;

          foreach($findjointeam as $jointeam){

            $Json[$i]['teamnumber'] = $jointeam->teamnumber;

            $Json[$i]['teamid'] = $jointeam->id;

            $Json[$i]['points'] = $jointeam->points;

            $Json[$i]['userid'] = $request->userid;

            $Json[$i]['challengeid'] = $request->challengeid;

            $i++;

          }

        }

      }

    }

    else{

      $findjointeam = JoinTeam::where('jointeam.matchkey',$request->matchkey)->where('jointeam.userid',$request->userid)->orderBy('teamnumber','ASC')->select('jointeam.id','teamnumber','points')->get();



        $Json=array();

        if(!empty($findjointeam)){

          $i=0;

          foreach($findjointeam as $jointeam){

            $Json[$i]['teamnumber'] = $jointeam->teamnumber;

            $Json[$i]['teamid'] = $jointeam->id;

            $Json[$i]['points'] = $jointeam->points;

            $Json[$i]['userid'] = $request->userid;

            $Json[$i]['challengeid'] = "";

            $i++;

          }

       }

    }

    return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);

    die;

    }


  public function download($referral=null) {
    // phpinfo(); exit;
    $IP = '';
    if (isset($_SERVER['HTTP_CLIENT_IP']))
        $IP = $_SERVER['HTTP_CLIENT_IP'];
    else if(isset($_SERVER['HTTP_X_FORWARDED_FOR']))
        $IP = $_SERVER['HTTP_X_FORWARDED_FOR'];
    else if(isset($_SERVER['HTTP_X_FORWARDED']))
        $IP = $_SERVER['HTTP_X_FORWARDED'];
    else if(isset($_SERVER['HTTP_FORWARDED_FOR']))
        $IP = $_SERVER['HTTP_FORWARDED_FOR'];
    else if(isset($_SERVER['HTTP_FORWARDED']))
        $IP = $_SERVER['HTTP_FORWARDED'];
    else if(isset($_SERVER['REMOTE_ADDR']))
        $IP = $_SERVER['REMOTE_ADDR'];
    else
        $IP = 'UNKNOWN';
    // echo $IP; exit;
    if(isset($referral) && !empty($referral)){
      $insertData = array();
      $insertData['ip'] = $IP;
      $insertData['refer_code'] = $referral;
      DB::table('app_refers')->insert($insertData);
    }
    header("Location:".APP_URL);
    exit;
    $file = base_path().'/APK/vision11.apk';
    header('Content-Description: File Transfer');
    header('Content-Type: application/vnd.android.package-archive');
    header('Content-Disposition: attachment; filename='.basename($file));
    header('Content-Transfer-Encoding: binary');
    header('Expires: 0');
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');
    header('Content-Length: ' . filesize($file));
    ob_clean();
    flush();
    readfile($file);
  }


    public function getSeries(Request $request) {
      $series = DB::table('series')->where('is_leaderboard',1)
      ->orderBy('series.sort','DESC')->get();
      return Response::json(["status" => STATUS_SUCCESS,"result"=>$series]);
    }
    public function getPromoterSeries(Request $request) {
      $series = DB::table('promoter_leaderboard_series')
      ->select("name" , "id")
      ->get();
      $leaderboardprize_url =  "https://fanline11.rglabs.net/app/promoterleaderboardprice-";
      return Response::json(["status" => STATUS_SUCCESS,"result"=>$series , "url"=>$leaderboardprize_url]);
    }

    public function getSeriesLeaderboard(Request $request) {


    $series_id = $request->series_id;
    $user_id = $request->user_id;

    // $myfile = fopen(base_path()."/test.txt", "w") or die("Unable to open file!");
    // $txt = serialize($request-)."John Doe\n";
    // fwrite($myfile, $txt);
    // print_r($request->all());die;
    $leaderboard = DB::table('series_leaderboard')
                    ->join('registerusers','registerusers.id','series_leaderboard.user_id')
                    ->where('series_id', $series_id)
                    ->limit(300)
                    ->select('series_leaderboard.*', 'registerusers.team','registerusers.image')
                    ->orderBy('series_leaderboard.rank','ASC')
                    ->get();

    $Json['leaderboard'] = [];
    $Json['wining_breakup'] = [];

    $users = DB::table('registerusers')->where('id',$user_id)->first();

    if(!$leaderboard->isEmpty()) {
          $exists = false;
          foreach ($leaderboard as $key => $value) {
            // if($value->user_id == $user_idd) {
            if($value->user_id == $user_id) {
              $exists = true;
              if($value->rank > 4) {
                $v[] =  (array) $value;
                $count = count($Json['leaderboard']);
                $new = array_merge(
                  array_slice($Json['leaderboard'], 0, 3),
                  $v,
                  array_slice($Json['leaderboard'], 3, $count-3)
                );
                unset($Json['leaderboard']);
                $Json['leaderboard'] = array();
                $Json['leaderboard'] = $new;
              }
              else {
                $Json['leaderboard'][] = $value;
              }
            }
            else {
              $Json['leaderboard'][] = $value;
            }
          }
          if($exists == false) {
            $leaderboard_user = DB::table('series_leaderboard as sl')
                ->leftJoin('registerusers as r', 'r.id', '=', 'sl.user_id')
                ->where('sl.series_id',$series_id)
                ->where('r.id',$user_id)
                ->select('r.team','r.image','sl.rank','sl.points','sl.amount','sl.series_id', 'r.id as user_id')
                ->first();
            if(!empty($leaderboard_user)) {
              $data['team'] = $leaderboard_user->team;
              $data['image'] = $leaderboard_user->image;
              $data['rank'] = $leaderboard_user->rank;
              $data['points'] = $leaderboard_user->points;
              $data['amount'] = $leaderboard_user->amount;
              $data['series_id'] = $leaderboard_user->series_id;
              $data['user_id'] = $leaderboard_user->user_id;

            } else {
              $data['team'] = isset($users->team) ? $users->team : $users->username;
              $data['image'] = $users->image;
              $data['rank'] = 0;
              $data['points'] = 0;
              $data['amount'] = 0;
              $data['series_id'] = $series_id;
              $data['user_id'] = $user_id;
            }

            $v[] = $data;
            $count = count($Json['leaderboard']);
            $new = array_merge(
              array_slice($Json['leaderboard'], 0, 3),
              $v,
              array_slice($Json['leaderboard'], 3, $count-3)
            );
            unset($Json['leaderboard']);
            $Json['leaderboard'] = array();
            $Json['leaderboard'] = $new;
          }
        }


    $breakup = DB::table('series_leaderboard_pricecards')->where('series_id',$series_id)
                  ->select('price','winners','min_position','max_position')
                  ->get();
    if(!$breakup->isEmpty()) {
      foreach ($breakup as $key => $value) {
        $Json['wining_breakup'][$key]['price'] = $value->price;
        $position = $value->winners == 1 ? $value->max_position : $value->min_position+1 .'-'. $value->max_position;
        $Json['wining_breakup'][$key]['position'] = $position;
      }
    }
    return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);
  }

  public function getSeriesLeaderboard2(Request $request) {
  $series_id = $request->series_id;
  $user_id = $request->user_id;
  if(isset($request->page)){
    $request->page = $request->page;
  }
  $page_limit = 100;
    if(isset($request->page) && !empty($request->page)){

        $page_offset = (($request->page) * $page_limit);

    }
  $queryget = DB::table('series_leaderboard')
                  ->join('registerusers','registerusers.id','series_leaderboard.user_id')
                  ->where('series_id', $series_id)
                  ->select('series_leaderboard.*', 'registerusers.team','registerusers.image')
                  ->orderBy('series_leaderboard.rank','ASC');

                  if(!empty($request->page)) {

          $queryget->skip($page_offset)->take($page_limit);

        } else {

          $queryget->skip(0)->take(100);

        }

                  // ->paginate(100,['*'],'page',$request->page)
                  $leaderboard = $queryget->get();

  $total_pages = floor(DB::table('series_leaderboard')->where('series_id', $series_id)->count()/100);
  $Json['leaderboard'] = [];
  $Json['wining_breakup'] = [];

  $users = DB::table('registerusers')->where('id',$user_id)->first();

  if(!empty($leaderboard)) {
        $exists = false;
        foreach ($leaderboard as $key => $value) {
          // if($value->user_id == $user_idd) {
          if($value->image === null || empty($value->image)){
            // $value->image = BASE_URL.'dist/assets/images/avatar-new.png';
            $value->image = PLAYER_MEN_DEFAULT_IMAGE;
          }
          if($value->user_id == $user_id) {
            // dd($value->rank);
            $exists = true;
            if($value->rank > 4) {
              // dd('sa');
              $v[] =  (array) $value;
              $count = count($Json['leaderboard']);
              $new = array_merge(
                array_slice($Json['leaderboard'], 0, 3),
                $v,
                array_slice($Json['leaderboard'], 3, $count-3)
              );
              unset($Json['leaderboard']);
              $Json['leaderboard'] = array();
              $Json['leaderboard'] = $new;
            }
            else {
              // dd('else');
              $Json['leaderboard'][] = $value;
            }
          }
          else {
            $Json['leaderboard'][] = $value;
          }
        }
        if($exists == false) {
          if(($request->page + 1) == 1){
          $leaderboard_user = DB::table('series_leaderboard as sl')
              ->leftJoin('registerusers as r', 'r.id', '=', 'sl.user_id')
              ->where('sl.series_id',$series_id)
              ->where('r.id',$user_id)
              ->select('r.team','r.image','sl.rank','sl.points','sl.amount','sl.series_id', 'r.id as user_id')
              ->first();
          if(!empty($leaderboard_user)) {
            $data['team'] = $leaderboard_user->team;
            $data['image'] = $leaderboard_user->image;
            $data['rank'] = $leaderboard_user->rank;
            $data['points'] = $leaderboard_user->points;
            $data['amount'] = $leaderboard_user->amount;
            $data['series_id'] = $leaderboard_user->series_id;
            $data['user_id'] = $leaderboard_user->user_id;

          } else {

            $data['team'] = isset($users->team) ? $users->team : $users->username;
            $data['image'] = $users->image;
            $data['rank'] = 0;
            $data['points'] = 0;
            $data['amount'] = 0;
            $data['series_id'] = $series_id;
            $data['user_id'] = $user_id;

          }

          $v[] = $data;
          $count = count($Json['leaderboard']);
          $new = array_merge(
            array_slice($Json['leaderboard'], 0, 3),
            $v,
            array_slice($Json['leaderboard'], 3, $count-3)
          );
          unset($Json['leaderboard']);
          $Json['leaderboard'] = array();
          $Json['leaderboard'] = $new;
        }
      }
      }


  $breakup = DB::table('series_leaderboard_pricecards')->where('series_id',$series_id)
                ->select('price','winners','min_position','max_position')
                ->get();
  if(!$breakup->isEmpty()) {
    foreach ($breakup as $key => $value) {
      $Json['wining_breakup'][$key]['price'] = $value->price;
      $position = $value->winners == 1 ? $value->max_position : $value->min_position+1 .'-'. $value->max_position;
      $Json['wining_breakup'][$key]['position'] = $position;
    }
  }
  return Response::json(["status" => STATUS_SUCCESS,"total_pages"=>$total_pages,"result"=>$Json]);
}
//   public function getSeriesLeaderboard2(Request $request) {
//   $series_id = $request->series_id;
//   $user_id = $request->user_id;
//   $page_limit = 100;
//   $page_offset = 0;
//   /*if(isset($request->page)){
//     $request->page = $request->page + 1;
//   }*/
//   if(isset($request->page) && !empty($request->page)){
//         $request->page = $request->page+1;
//
//         $page_offset = (($request->page - 1) * $page_limit);
//
//     }
//   $leaderboard['data'] = DB::table('series_leaderboard')
//                   ->join('registerusers','registerusers.id','series_leaderboard.user_id')
//                   ->where('series_id', $series_id)
//                   ->select('series_leaderboard.*', 'registerusers.team','registerusers.image')
//                   ->orderBy('series_leaderboard.rank','ASC')
//                   ->skip($page_offset)->take($page_limit)
//                   ->get();
//                   // ->paginate(100,['*'],'page',$request->page);
//
//   $total_pages = DB::table('series_leaderboard')->where('series_id', $series_id)->count();
//   $Json['leaderboard'] = [];
//   $Json['wining_breakup'] = [];
//
//   $users = DB::table('registerusers')->where('id',$user_id)->first();
//
//   if(!empty($leaderboard["data"])) {
//         $exists = false;
//         foreach ($leaderboard['data'] as $key => $value) {
//           // if($value->user_id == $user_idd) {
//           if($value->image === null || empty($value->image)){
//             // $value->image = BASE_URL.'dist/assets/images/avatar-new.png';
//             $value->image = PLAYER_MEN_DEFAULT_IMAGE;
//           }
//           if($value->user_id == $user_id) {
//             $exists = true;
//             if($value->rank > 4) {
//               $v[] =  (array) $value;
//               $count = count($Json['leaderboard']);
//               $new = array_merge(
//                 array_slice($Json['leaderboard'], 0, 3),
//                 $v,
//                 array_slice($Json['leaderboard'], 3, $count-3)
//               );
//               unset($Json['leaderboard']);
//               $Json['leaderboard'] = array();
//               $Json['leaderboard'] = $new;
//             }
//             else {
//               $Json['leaderboard'][] = $value;
//             }
//           }
//           else {
//             $Json['leaderboard'][] = $value;
//           }
//         }
//         if($exists == false) {
//           if($request->page == 1){
//           $leaderboard_user = DB::table('series_leaderboard as sl')
//               ->leftJoin('registerusers as r', 'r.id', '=', 'sl.user_id')
//               ->where('sl.series_id',$series_id)
//               ->where('r.id',$user_id)
//               ->select('r.team','r.image','sl.rank','sl.points','sl.amount','sl.series_id', 'r.id as user_id')
//               ->first();
//           if(!empty($leaderboard_user)) {
//             $data['team'] = $leaderboard_user->team;
//             $data['image'] = $leaderboard_user->image;
//             $data['rank'] = $leaderboard_user->rank;
//             $data['points'] = $leaderboard_user->points;
//             $data['amount'] = $leaderboard_user->amount;
//             $data['series_id'] = $leaderboard_user->series_id;
//             $data['user_id'] = $leaderboard_user->user_id;
//
//           } else {
//
//             $data['team'] = isset($users->team) ? $users->team : $users->username;
//             $data['image'] = $users->image;
//             $data['rank'] = 0;
//             $data['points'] = 0;
//             $data['amount'] = 0;
//             $data['series_id'] = $series_id;
//             $data['user_id'] = $user_id;
//
//           }
//
//           $v[] = $data;
//           $count = count($Json['leaderboard']);
//           $new = array_merge(
//             array_slice($Json['leaderboard'], 0, 3),
//             $v,
//             array_slice($Json['leaderboard'], 3, $count-3)
//           );
//           unset($Json['leaderboard']);
//           $Json['leaderboard'] = array();
//           $Json['leaderboard'] = $new;
//         }
//       }
//       }
//
//
//   $breakup = DB::table('series_leaderboard_pricecards')->where('series_id',$series_id)
//                 ->select('price','winners','min_position','max_position')
//                 ->get();
//   if(!$breakup->isEmpty()) {
//     foreach ($breakup as $key => $value) {
//       $Json['wining_breakup'][$key]['price'] = $value->price;
//       $position = $value->winners == 1 ? $value->max_position : $value->min_position+1 .'-'. $value->max_position;
//       $Json['wining_breakup'][$key]['position'] = $position;
//     }
//   }
//   return Response::json(["status" => STATUS_SUCCESS,"total_pages"=>$total_pages,"result"=>$Json]);
// }

public function getPromoterSeriesLeaderboard(Request $request) {
$series_id = $request->series_id;
$user_id = $request->user_id;
if(isset($request->page)){
  $request->page = $request->page + 1;
}
     //
     //  $myfile = fopen(base_path()."/test.txt", "a") or die("Unable to open file!");
     // $txt = json_encode($request->all())."John Doe\nhkhkhkhk";
     //
     // fwrite($myfile, $txt); exit;
// dd('fdsf');
$leaderboard = DB::table('promoter_series_leaderboard')
                ->join('registerusers','registerusers.id','promoter_series_leaderboard.user_id')
                ->where('promoter_leaderboard_id', $series_id)
                ->select('promoter_series_leaderboard.*', 'registerusers.refercode as team','registerusers.image')
                ->orderBy('promoter_series_leaderboard.rank','ASC')
                // ->get();
                // dd($leaderboard);
                ->paginate(100,['*'],'page',$request->page)
                ->toArray();

$total_pages = $leaderboard['last_page'] - 1;
$Json['leaderboard'] = [];
$Json['wining_breakup'] = [];

// echo"<pre>";print_r($Json);exit;
$users = DB::table('registerusers')->where('id',$user_id)->first();
// dd($users);
if(!empty($leaderboard["data"])) {
  // dd('fda');
      $exists = false;
      foreach ($leaderboard['data'] as $key => $value) {
        // dd($value);
        // if($value->user_id == $user_idd) {
        if($value->image === null || empty($value->image)){
          // $value->image = BASE_URL.'dist/assets/images/avatar-new.png';
          $value->image = PLAYER_MEN_DEFAULT_IMAGE;
        }
        if($value->user_id == $user_id) {
          // dd('dfaf');
          $exists = true;
          if($value->rank > 4) {
            // dd('ra');
            $v[] =  (array) $value;
            $count = count($Json['leaderboard']);
            $new = array_merge(
              array_slice($Json['leaderboard'], 0, 3),
              $v,
              array_slice($Json['leaderboard'], 3, $count-3)
            );
            unset($Json['leaderboard']);
            $Json['leaderboard'] = array();
            $Json['leaderboard'] = $new;
          }
          else {
            // dd('rank5');
            $Json['leaderboard'][] = $value;
          }
        }
        else {
          $Json['leaderboard'][] = $value;
        }
      }
      if($exists == false) {
        if($request->page == 1){
        $leaderboard_user = DB::table('promoter_series_leaderboard as sl')
            ->leftJoin('registerusers as r', 'r.id', '=', 'sl.user_id')
            ->where('sl.promoter_leaderboard_id',$series_id)
            ->where('r.id',$user_id)
            ->select('r.refercode as team','r.image','sl.rank','sl.points','sl.amount','sl.series_id', 'r.id as user_id')
            ->first();
        if(!empty($leaderboard_user)) {
          $data['team'] = $leaderboard_user->team;
          $data['image'] = $leaderboard_user->image;
          $data['rank'] = $leaderboard_user->rank;
          $data['points'] = $leaderboard_user->points;
          $data['amount'] = $leaderboard_user->amount;
          $data['series_id'] = $leaderboard_user->series_id;
          $data['user_id'] = $leaderboard_user->user_id;

        } else {

          $data['team'] = isset($users->refercode) ? $users->refercode : $users->username;
          $data['image'] = $users->image;
          $data['rank'] = 0;
          $data['points'] = 0;
          $data['amount'] = 0;
          $data['series_id'] = $series_id;
          $data['user_id'] = $user_id;

        }

        $v[] = $data;
        $count = count($Json['leaderboard']);
        $new = array_merge(
          array_slice($Json['leaderboard'], 0, 3),
          $v,
          array_slice($Json['leaderboard'], 3, $count-3)
        );
        unset($Json['leaderboard']);
        $Json['leaderboard'] = array();
        $Json['leaderboard'] = $new;
      }
    }
    }
    // dd('gagagaga');

$breakup = DB::table('series_leaderboard_pricecards')
             ->where('series_id',172)
              ->select('price','winners','min_position','max_position')
              ->get();

if(!$breakup->isEmpty()) {
  foreach ($breakup as $key => $value) {
    $Json['wining_breakup'][$key]['price'] = $value->price;
    $position = $value->winners == 1 ? $value->max_position : $value->min_position+1 .'-'. $value->max_position;
    $Json['wining_breakup'][$key]['position'] = (string)$position;
  }
}
return Response::json(["status" => STATUS_SUCCESS,"total_pages"=>$total_pages,"result"=>$Json]);
}


    public function getPromoterMatchLeaderboards(Request $request) {

      // exit;
    $series_id = $request->series_id;
    $user_id = $request->user_id;



    $details = DB::table('promoter_series_leaderboard as sl')
                  ->join('promoter_leaderboard_series as s', 's.id', '=', 'sl.promoter_leaderboard_id')
                  ->leftJoin('registerusers as r', 'r.id', '=', 'sl.user_id')
                  ->where('sl.promoter_leaderboard_id',$series_id)
                  // ->where('sl.promoter_leaderboard_id',1)
                  ->where('sl.user_id',$user_id)
                  ->select('r.team','r.image','sl.rank','sl.points','sl.amount','s.name')
                  ->selectRaw('s.name as series_date, 1 AS week_number ')
                  ->get();

                  // $myfile = fopen("test.txt", "a") or die("Unable to open file!");
                  // $txt = json_encode($details);
                  // $txt .= "\n";
                  // fwrite($myfile, $txt);
                  // fclose($myfile);
                  // exit;


    if(!$details->isEmpty()) {
      $Json['name'] = $details[0]->team;
      $Json['image'] = $details[0]->image;
      $Json['rank'] = $details[0]->rank;
      $Json['points'] = floatval($details[0]->points);
      $Json['amount'] = floatval($details[0]->amount);
      $Json['series_name'] = $details[0]->name;
      $Json['series_date'] = $details[0]->series_date;
      $Json['week_number'] = $details[0]->week_number;
      $Json['match_list'] = [];


      $matches = DB::table('promoter_match_leaderboard as ml')
                  ->join('listmatches as lm', 'lm.matchkey', '=', 'ml.match_id')
                  ->join('registerusers as r', 'r.id', '=', 'ml.user_id')
                  ->join('teams as t1', 't1.id', '=', 'lm.team1')
                  ->join('teams as t2', 't2.id', '=', 'lm.team2')
                  ->join('sport_types', 'sport_types.id', '=', 'lm.sport_type')
                  ->where('ml.user_id','=',$user_id)
                  ->select('ml.points',DB::raw('CONCAT(UPPER(t1.short_name), " vs ", UPPER(t2.short_name), " ") as match_name, DATE_FORMAT(lm.start_date, "%a %D %b") as match_date') , DB::raw('CONCAT(UPPER(t1.short_name), " vs ", UPPER(t2.short_name), " ") as match_name, 0 as teamid') , 'sport_types.sport_key' , 'r.team as teamname' , DB::raw('0 AS challenge_id'))
                  // ->orderBy('ml.points','DESC')
                  ->orderBy('lm.start_date','DESC')
                  ->get();

          if(!$matches->isEmpty()) {
            foreach ($matches as $key => $value) {
              $Json['match_list'][$key] = $value;
            }
          }

          $Json['success'] = true;
          $Json['message'] = '';
          return response()->json($Json);
          die();

    }
    else {
      $series = DB::table('series as s')
                  ->selectRaw('s.name ,CONCAT(DATE_FORMAT(s.start_date, "%e %b")," to ",DATE_FORMAT(s.end_date, "%e %b")) as series_date, ROUND(DATEDIFF(end_date, start_date)/7, 0) AS week_number ')
                  ->first();
      $user = DB::table('registerusers')->where('id',$user_id)->first();
      $Json['name'] = $user->team;
      $Json['image'] = $user->image;
      $Json['rank'] = 0;
      $Json['points'] = 0;
      $Json['amount'] = 0;
      $Json['series_name'] = $series->name;
      $Json['series_date'] = $series->series_date;
      $Json['week_number'] = $series->week_number;
      $Json['match_list'] = array();
      $Json['success'] = true;
      $Json['message'] = '';
      return response()->json($Json);
      die();
    }


    // $matchLeaderboards = DB::table('match_leaderboard')->join('listmatches','listmatches.matchkey','=','match_leaderboard.match_id')->where('match_leaderboard.series_id',$series_id)->where('user_id', $user_id)->select('match_leaderboard.*','listmatches.name')->get();
    return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);
  }

    public function getMatchLeaderboards(Request $request) {
    $series_id = $request->series_id;
    $user_id = $request->user_id;

    $details = DB::table('series_leaderboard as sl')
                  ->join('series as s', 's.id', '=', 'sl.series_id')
                  ->leftJoin('registerusers as r', 'r.id', '=', 'sl.user_id')
                  ->where('sl.series_id',$series_id)->where('sl.user_id',$user_id)
                  ->select('r.team','r.image','sl.rank','sl.points','sl.amount','s.name')
                  ->selectRaw('CONCAT(DATE_FORMAT(s.start_date, "%e %b")," to ",DATE_FORMAT(s.end_date, "%e %b")) as series_date, ROUND(DATEDIFF(end_date, start_date)/7, 0) AS week_number ')
                  ->get();
                  // print_r($details);die;
    if(!$details->isEmpty()) {
      $Json['name'] = $details[0]->team;
      $Json['image'] = $details[0]->image;
      $Json['rank'] = $details[0]->rank;
      //$Json['points'] = floatval($details[0]->points);
      $Json['points'] = $details[0]->points;
      $Json['amount'] = floatval($details[0]->amount);
      $Json['series_name'] = $details[0]->name;
      $Json['series_date'] = $details[0]->series_date;
      $Json['week_number'] = $details[0]->week_number;
      $Json['match_list'] = [];


      $matches = DB::table('match_leaderboard as ml')
                  ->join('listmatches as lm', 'lm.matchkey', '=', 'ml.match_id')
                  ->join('registerusers as r', 'r.id', '=', 'ml.user_id')
                  ->leftjoin('jointeam as jt', 'jt.id', '=', 'ml.player_team_id')
                  ->join('teams as t1', 't1.id', '=', 'lm.team1')
                  ->join('teams as t2', 't2.id', '=', 'lm.team2')
                  ->join('sport_types', 'sport_types.id', '=', 'lm.sport_type')
                  ->where([
                    ['lm.series','=',$series_id],
                    ['ml.user_id','=',$user_id]
                  ])
                  ->select('ml.points',DB::raw('CONCAT(UPPER(t1.short_name), " vs ", UPPER(t2.short_name), " (T",jt.teamnumber,")") as match_name, DATE_FORMAT(lm.start_date, "%a %D %b") as match_date') , 'jt.id as teamid' , 'sport_types.sport_key' , 'r.team as teamname' , DB::raw('0 AS challenge_id'))
                  // ->orderBy('ml.points','DESC')
                  ->orderBy('lm.start_date','DESC')
                  ->get();
//                   var_dump($series_id);
//                   var_dump($user_id);
// print_r($matches);exit;
          if(!$matches->isEmpty()) {
            foreach ($matches as $key => $value) {
              $Json['match_list'][$key] = $value;
            }
          }

          $Json['success'] = true;
          $Json['message'] = '';
          return response()->json($Json);
          die();

    }
    else {
      $series = DB::table('series as s')->where('s.id',$series_id)
                  ->selectRaw('s.name ,CONCAT(DATE_FORMAT(s.start_date, "%e %b")," to ",DATE_FORMAT(s.end_date, "%e %b")) as series_date, ROUND(DATEDIFF(end_date, start_date)/7, 0) AS week_number ')
                  ->first();
      $user = DB::table('registerusers')->where('id',$user_id)->first();
      $Json['name'] = $user->team;
      $Json['image'] = $user->image;
      $Json['rank'] = 0;
      $Json['points'] = 0;
      $Json['amount'] = 0;
      $Json['series_name'] = $series->name;
      $Json['series_date'] = $series->series_date;
      $Json['week_number'] = $series->week_number;
      $Json['match_list'] = array();
      $Json['success'] = true;
      $Json['message'] = '';
      return response()->json($Json);
      die();
    }


    // $matchLeaderboards = DB::table('match_leaderboard')->join('listmatches','listmatches.matchkey','=','match_leaderboard.match_id')->where('match_leaderboard.series_id',$series_id)->where('user_id', $user_id)->select('match_leaderboard.*','listmatches.name')->get();
    return Response::json(["status" => STATUS_SUCCESS,"result"=>$Json]);
  }


  public function getReferCode(Request $request) {
    // return "hii";
      date_default_timezone_set('Asia/Kolkata');
    $IP = $request->ip;

    $refer = DB::table('app_refers')
    ->where('ip',$IP)
    ->whereDate('created','>=',date('Y-m-d',strtotime('-400 minutes')))
    ->orderBy('id','DESC')->first();
    return Response::json(["status" => STATUS_SUCCESS,"result"=>array('refer_code' => @$refer->refer_code ? $refer->refer_code : '')]);
  }

  public function promoterMatches_old(Request $request){

      date_default_timezone_set('Asia/Kolkata');

      $this->validate($request,[

      'user_id' => 'required',

    ]);

$pageNo = 1;
    //pagination
    if(isset($request->page)){
      $pageNo = $request->page + 1;
    }

    $page_limit = 30;

      $locktime = Carbon::now()->addMinutes(0);

      $geturl = BASE_URL;

      $userid =  $data['userid'] = $request->user_id;

      $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
      $sport_key_arr = explode(',', $sport_key);
      $sportType = DB::table('sport_types')->whereIn('sport_key',$sport_key_arr)->get();
      $sportType_arr = json_decode(json_encode($sportType));

       $all_sport_keys = array_column($sportType_arr, 'id');
       $all_sport_keys = [1,2,3,4,5,6,7];

       $start_date = $request->start_date.' 00:00:00';
       $end_date = $request->end_date.' 23:59:59';

    if(isset($request->page) && !empty($request->page)){

        $page_offset = (($request->page) * $page_limit);

    }

  $queryget = DB::table('joinedleauges')->join('listmatches','listmatches.matchkey','=','joinedleauges.matchkey')->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
  ->join('league_refer_bonus', 'league_refer_bonus.challenge_id','=','matchchallenges.id')
  // ->where('joinedleauges.userid',$userid)
  ->where('league_refer_bonus.created', '>=', date('Y-m-d H:i:s', strtotime($start_date)))
  ->where('league_refer_bonus.created', '<=',date('Y-m-d H:i:s', strtotime($end_date)))

  ->where('refer_id', $request->user_id)

  ->whereIn('listmatches.sport_type',$all_sport_keys)
  ->where('listmatches.series','!=','0')
  ->where('listmatches.final_status','=','winnerdeclared')
  ->where('matchchallenges.status','!=','canceled')->select('listmatches.id','listmatches.series as seriesid','series.name as seriesname','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type','listmatches.start_date','listmatches.status','t1.team as team1name','t2.team as team2name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo','listmatches.announcement')->selectRaw('0 as total_joined,"" as player_ids, SUM(league_refer_bonus.amount) as total_earned')->orderBY('listmatches.start_date','DESC')->groupBy('joinedleauges.matchkey');
  if(!empty($request->page)) {

          $queryget->skip($page_offset)->take($page_limit);

        } else {

          $queryget->skip(0)->take(30);

        }
    $findjoinedleauges = $queryget->get();
  // ->limit(100)->get();
  // ->paginate($page_limit,['*'],'page',$pageNo);
$type = 1;

// var_dump($findjoinedleauges);exit;
$joineddata = json_decode(json_encode($findjoinedleauges), true);

  $current_page = $request->page;

  $per_page = 30;

  $total_page = (count($joineddata) > 29) ? 5 : 1;

foreach ($findjoinedleauges as $key => $value) {
  $findjoinedleauges[$key]->is_visible_total_earned = 1;
$match_key = $value->matchkey;
  $league_refer_bonus = DB::table('league_refer_bonus')
  ->join('matchchallenges','league_refer_bonus.challenge_id','=','matchchallenges.id')
  ->join('leaugestransactions','league_refer_bonus.join_id','=','leaugestransactions.joinid')
  ->where('league_refer_bonus.refer_id', $request->user_id)
  ->where('matchchallenges.matchkey',$match_key)
  ->where('league_refer_bonus.type',$type)->selectRaw('matchchallenges.win_amount, matchchallenges.maximum_user, matchchallenges.entryfee, COUNT(league_refer_bonus.id) as joined, SUM(amount) as earned, SUM(leaugestransactions.bonus) as bonus_used')->groupBy('matchchallenges.id')->get();

  $earned = 0;

  foreach ($league_refer_bonus as $key_old => $value_l) {
    $earned = $earned + $value_l->earned;
  }

  $findjoinedleauges[$key]->total_earned = number_format((float)$earned, 2, '.', '');
  // $findjoinedleauges[$key]['total_earned'] = $value->total_earned;

}
      $json = array();


      return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findjoinedleauges)  , "current_page" => $current_page, "per_page" => $per_page, "total_page" => $total_page]); die;



    }


  public function promoterMatches(Request $request){

      date_default_timezone_set('Asia/Kolkata');

      $this->validate($request,[

      'user_id' => 'required',

    ]);

$pageNo = 1;
    //pagination
    if(isset($request->page)){
      $pageNo = $request->page + 1;
    }

    $page_limit = 30;

      $locktime = Carbon::now()->addMinutes(0);

      $geturl = BASE_URL;

      $userid =  $data['userid'] = $request->user_id;

      $sport_key = (isset($request->sport_key) ? $request->sport_key : CRICKET);
      $sport_key_arr = explode(',', $sport_key);
      $sportType = DB::table('sport_types')->whereIn('sport_key',$sport_key_arr)->get();
      $sportType_arr = json_decode(json_encode($sportType));

       $all_sport_keys = array_column($sportType_arr, 'id');
       $all_sport_keys = [1,2,3,4,5,6,7];

       $start_date = $request->start_date.' 00:00:00';
       $end_date = $request->end_date.' 23:59:59';

  /*$findjoinedleauges = JoinedLeague::join('listmatches','listmatches.matchkey','=','joinedleauges.matchkey')->join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')->join('matchchallenges','matchchallenges.id','=','joinedleauges.challengeid')
  ->join('league_refer_bonus', 'league_refer_bonus.challenge_id','=','matchchallenges.id')
  // ->where('joinedleauges.userid',$userid)
  ->where('league_refer_bonus.created', '>=', date('Y-m-d H:i:s', strtotime($start_date)))
  ->where('league_refer_bonus.created', '<=',date('Y-m-d H:i:s', strtotime($end_date)))

  ->where('refer_id', $request->user_id)

  ->whereIn('listmatches.sport_type',$all_sport_keys)
  ->where('listmatches.series','!=','0')
  ->where('listmatches.final_status','=','winnerdeclared')
  ->where('matchchallenges.status','!=','canceled')->select('listmatches.id','listmatches.series as seriesid','series.name as seriesname','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type','listmatches.start_date','listmatches.status','t1.team as team1name','t2.team as team2name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo','listmatches.announcement')->selectRaw('0 as total_joined')->orderBY('listmatches.start_date','DESC')->groupBy('joinedleauges.matchkey')
  // ->limit(100)->get();
  ->paginate($page_limit,['*'],'page',$pageNo);
*/

  $findjoinedleauges = ListMatch::join('series','series.id','=','listmatches.series')->join('teams as t1','t1.id','=','listmatches.team1')->join('teams as t2','t2.id','=','listmatches.team2')
  // ->join('league_refer_bonus', 'league_refer_bonus.challenge_id','=','matchchallenges.id')
  // ->where('joinedleauges.userid',$userid)
  // ->where('league_refer_bonus.created', '>=', date('Y-m-d H:i:s', strtotime($start_date)))
  // ->where('league_refer_bonus.created', '<=',date('Y-m-d H:i:s', strtotime($end_date)))

  // ->where('refer_id', $request->user_id)

  ->whereIn('listmatches.sport_type',$all_sport_keys)
  ->where('listmatches.series','!=','0')
  ->where('listmatches.final_status','=','winnerdeclared')
  ->whereRaw('listmatches.matchkey IN (SELECT matchchallenges.matchkey  FROM `league_refer_bonus` JOIN matchchallenges ON matchchallenges.id = league_refer_bonus.challenge_id WHERE `league_refer_bonus`.`created` >= "'.date('Y-m-d H:i:s', strtotime($start_date)).'" AND created < "'.date('Y-m-d H:i:s', strtotime($end_date)).'" AND refer_id = "'.$request->user_id.'")')
  // ->where('matchchallenges.status','!=','canceled')
  ->select('listmatches.id','listmatches.series as seriesid','series.name as seriesname','listmatches.matchkey','listmatches.name','listmatches.short_name','listmatches.team1','listmatches.team2','listmatches.team1display','listmatches.format','listmatches.team2display','listmatches.sport_type','listmatches.start_date','listmatches.status','t1.team as team1_name','t2.team as team2_name','listmatches.launch_status','listmatches.final_status','series.name as series','t1.logo as team1logo','t2.logo as team2logo','listmatches.announcement')->selectRaw('0 as total_joined')
  ->orderBY('listmatches.start_date','DESC')
  ->groupBy('listmatches.id')
  // ->limit(100)->get();
  ->paginate($page_limit,['*'],'page',$pageNo);
// print_r($findjoinedleauges); exit;
$type = 1;

// var_dump($findjoinedleauges);exit;
$joineddata = json_decode(json_encode($findjoinedleauges), true);

  $current_page = $joineddata['current_page'];

  $per_page = $joineddata['per_page'];

  $total_page = floor($joineddata['total']/$page_limit);

foreach ($findjoinedleauges as $key => $value) {
  $findjoinedleauges[$key]['is_visible_total_earned'] = 1;
$match_key = $value->matchkey;
  $league_refer_bonus = DB::table('league_refer_bonus')
  ->join('matchchallenges','league_refer_bonus.challenge_id','=','matchchallenges.id')
  ->join('leaugestransactions','league_refer_bonus.join_id','=','leaugestransactions.joinid')
  ->where('league_refer_bonus.refer_id', $request->user_id)
  ->where('matchchallenges.matchkey',$match_key)
  ->where('league_refer_bonus.type',$type)->selectRaw('matchchallenges.win_amount, matchchallenges.maximum_user, matchchallenges.entryfee, COUNT(league_refer_bonus.id) as joined, SUM(amount) as earned, SUM(leaugestransactions.bonus) as bonus_used')->groupBy('matchchallenges.id')->get();

  $earned = 0;

  foreach ($league_refer_bonus as $key_old => $value_l) {
    $earned = $earned + $value_l->earned;
  }

  $findjoinedleauges[$key]['total_earned'] = number_format((float)$earned, 2, '.', '');

}
      $json = array();


      return Response::json(["status" => STATUS_SUCCESS,"result"=> MatchListResource::collection($findjoinedleauges)  , "current_page" => $current_page, "per_page" => $per_page, "total_page" => $total_page]); die;



    }

    public function promoterTotal(Request $request) {
      $this->validate($request,[
        'user_id' => 'required',
        'start_date' => 'required',
        'end_date' => 'required'
      ]);
        $start_date = $request->start_date.' 00:00:00';
        $end_date = $request->end_date.' 23:59:59';

      $bonus = DB::table('league_refer_bonus')
              ->join('matchchallenges','league_refer_bonus.challenge_id','matchchallenges.id')
              ->where('league_refer_bonus.created', '>=', date('Y-m-d H:i:s', strtotime($start_date)))
              ->where('league_refer_bonus.created', '<=',date('Y-m-d H:i:s', strtotime($end_date)))
              ->where('refer_id', $request->user_id)
              ->selectRaw('SUM(league_refer_bonus.amount) as aff_bal, COUNT(league_refer_bonus.id) as teams')
              ->groupBy('matchchallenges.matchkey')
            ->get();

      $team_join = 0;
      $aff_bal = 0;
      foreach ($bonus as $key => $value) {
        $team_join += $value->teams;
        $aff_bal += $value->aff_bal;
      }

      /*$deposit = DB::table('transactions')
      ->join('registerusers','registerusers.id','=','transactions.userid')
      ->where('registerusers.refer_id', $request->user_id)
      ->where('paymentstatus','confirmed')
      ->where('type','add fund')
      ->where('transactions.created', '>=', date('Y-m-d H:i:s', strtotime($start_date)))
      ->where('transactions.created', '<=',date('Y-m-d H:i:s', strtotime($end_date)))
      ->sum('transactions.amount');*/

      $deposit = DB::table('promoter_winning_detail')
      ->where('promoter_winning_detail.user_id', $request->user_id)
      ->where('promoter_winning_detail.date', '>=', date('Y-m-d', strtotime($start_date)))
      ->where('promoter_winning_detail.date', '<=',date('Y-m-d', strtotime($end_date)))
      ->sum('promoter_winning_detail.deposit');

      /*$winning = DB::table('finalresults')
      ->join('registerusers','registerusers.id','=','finalresults.userid')
      ->where('registerusers.refer_id', $request->user_id)
      ->where('finalresults.created', '>=', date('Y-m-d H:i:s', strtotime($start_date)))
      ->where('finalresults.created', '<=',date('Y-m-d H:i:s', strtotime($end_date)))
      ->sum('finalresults.amount');*/

      $winning = DB::table('promoter_winning_detail')
      ->where('promoter_winning_detail.user_id', $request->user_id)
      ->where('promoter_winning_detail.date', '>=', date('Y-m-d', strtotime($start_date)))
      ->where('promoter_winning_detail.date', '<=',date('Y-m-d', strtotime($end_date)))
      ->sum('promoter_winning_detail.winning');

      $return = array(
        "matches" => strval(count($bonus)),
        "team_join" => strval($team_join),
        "deposit" => strval($deposit),
        "winning" => strval($winning),
        "aff_bal" => strval($aff_bal)
      );
      return Response::json(["status" => STATUS_SUCCESS,"result"=> $return]); die;
    }

    public function promoterContests(Request $request) {
      $this->validate($request,[

        'matchkey' => 'required',

        'user_id' => 'required'

      ]);
      if(@$request->type=='ipl') {
        $type = 3;
      } else {
        $type = 1;
      }
      $match_key = $request->matchkey;
      $user_id = $request->user_id;
      $league_refer_bonus = DB::table('league_refer_bonus')->join('matchchallenges','league_refer_bonus.challenge_id','=','matchchallenges.id')->join('leaugestransactions','league_refer_bonus.join_id','=','leaugestransactions.joinid')->where('league_refer_bonus.refer_id', $user_id)->where('matchchallenges.matchkey',$match_key)->where('league_refer_bonus.type',$type)->selectRaw('matchchallenges.id as challenge_id, matchchallenges.win_amount, matchchallenges.maximum_user, matchchallenges.entryfee, COUNT(league_refer_bonus.id) as joined, SUM(amount) as earned, SUM(leaugestransactions.bonus) as bonus_used')->groupBy('matchchallenges.id')->get();
      $joined = 0;
      $total_contest = 0;
      $earned = 0;
      foreach ($league_refer_bonus as $key => $value) {
        $joined += $value->joined;
        $earned += $value->earned;
        $value->entryfee = (int)$value->entryfee;
        $value->bonus_used = strval($value->bonus_used);
        $value->challenge_id = strval($value->challenge_id);
      }
        $total_contest = count($league_refer_bonus);
      $total = array("joined" => strval($joined), "total_contest" => strval($total_contest),"earned" =>strval($earned));

      return Response::json(["status" => STATUS_SUCCESS,"result"=> array("contests" => $league_refer_bonus, "total" => $total)]); die;
    }




        public function promoterTeams(Request $request){

          $this->validate($request,[

            'user_id' => 'required',

            'challenge_id' => 'required'

          ]);

          $user_id = $request->user_id;
          $challenge_id = $request->challenge_id;


    $league_refer_bonus = DB::table('league_refer_bonus')
    ->join('registerusers','registerusers.id','=','league_refer_bonus.user_id')
    ->where('league_refer_bonus.challenge_id' , $challenge_id)
    ->where('league_refer_bonus.refer_id', $user_id)
    ->select('registerusers.team' , 'league_refer_bonus.amount' , 'registerusers.image' , 'registerusers.id as user_id')
    ->get();

          return Response::json(["status" => STATUS_SUCCESS,"result"=> $league_refer_bonus]); die;

        }




    public function userlevel_new(Request $request)
     {
        $this->validateLogin($request->user_id);

      $this->validate($request,[
        'user_id' => 'required'
      ]);

      $user_id = $request->user_id;
      $currentdate = $this->getDateCommon();
      $prevdate = date('Y-m-d',strtotime(Carbon::now()->subDays(15)));
      $findlastow = UserBalance::where('user_id',$user_id)->first();


        $usDetail = RegisterUser::where('id',$user_id)->first();
          $Json['email_verify'] = $usDetail->email_verify;
          $Json['bank_verify'] = $usDetail->bank_verify;
          $Json['mobile_verify'] = $usDetail->mobile_verify;
          $Json['pan_verify'] = $usDetail->pan_verify;
        $Json['balance'] = number_format((float)$findlastow->balance, 2, '.', '');
        $Json['winning'] = number_format((float)$findlastow->winning, 2, '.', '');
        $Json['bonus'] = number_format((float)$findlastow->bonus, 2, '.', '');
        $Json['total'] = number_format((float)$findlastow->balance+$findlastow->winning+$findlastow->bonus, 2, '.', '');
        $Json['totalamount'] = number_format((float)$findlastow->balance+$findlastow->winning+$findlastow->bonus, 2, '.', '');

        $expireamount = 0;

        // get to know about the expired bonus //
        $balancebnus = array();
        // $balancebnus = Transaction::whereDate('created','<=',$prevdate)->where('userid',$user_id)->orderBy('id','DESC')->select('bal_bonus_amt')->first();

        if(!empty($balancebnus)){
          $totalbonus = 0;
          $consumedbnus = 0;
          $totalbonus = number_format((float)$balancebnus->bal_bonus_amt, 2, '.', '');
          $findconsumedbonus = Transaction::whereDate('created','>=',$prevdate)->whereDate('created','<',$currentdate)->where('userid',$user_id)->orderBy('id','DESC')->select('cons_bonus')->get();

        /*$findconsumedbonus1 = Transaction::whereDate('created','>=',$prevdate)->whereDate('created','<',$currentdate)->where('userid',$user_id)->orderBy('id','DESC')->sum('cons_bonus');*/

          if(count($findconsumedbonus)){
            foreach($findconsumedbonus as $bnfind){
              $consumedbnus+=$bnfind->cons_bonus;
            }
          }

          if($consumedbnus<$totalbonus){
            $expireamount = $totalbonus-$consumedbnus;
          }
        }

        if($expireamount>0){
          $Json['expireamount'] = intval($expireamount);
        }else{
          $Json['expireamount'] = 0;
        }



        $Json_p['total_match_play'] = $this->total_match_play($request->user_id);
        $Json_p['total_league_play'] = $this->total_league_play($request->user_id);
        $Json_p['total_contest_win'] = $this->total_contest_win($request->user_id);
        $Json_p['total_winning'] = number_format((float)$this->total_winning($request->user_id), 2, '.', '');



// end of playing history;

$progressbar= 0;
$cash_progressbar= 0;
$contest_progressbar= 0;
$currentlevel_cash=0;
$currentlevel_reward_cash=0;
$progressbarcash=0;
$progressbarcontest=0;
$text='';

$currentlevel = 0;


$nextlevel = 0;
$nextlevel_contest = 0;
$nextlevel_cash = 0;
$nextlevel_reward_cash = 0;
$nextlevel_type = '';

$is_visible_contest_text = 0;
$is_visible_cash_text = 0;


$currlevel = DB::table('users_level_history')->where('user_id','=',$request->user_id)->first();

if(empty($currlevel)){
$text ="Create Team for Level 1";
$progressbar=50;
$cash_progressbar=0;
$contest_progressbar=0;
$progressbarcash=0;
$currentlevel_cash=0;
$nextlevel = 1;
$is_visible_contest_text =1;
$is_visible_cash_text = 1;

}

else if($currlevel->level==1){
$text ="Create Team for Level 2";
$progressbar=50;
$cash_progressbar=0;
$contest_progressbar=0;
$progressbarcash=0;
$currentlevel_cash=0;
$nextlevel = 2;
$is_visible_contest_text =1;
$is_visible_cash_text = 1;

}

else if($currlevel->level==2){
$text ="Join Practice Contest for Level 3";
$progressbar=50;
$cash_progressbar=0;
$contest_progressbar=0;
$currentlevel_cash=0;
$nextlevel = 3;
$is_visible_contest_text =1;
$is_visible_cash_text = 1;
}

else if($currlevel->level > 2){

$nextlevel = $currlevel->level+1;

  $nextleveldata = DB::table('levels')->where('level','=',$nextlevel)->first();

      $completed_level_cash=0;
      $nextleveldata1 = DB::table('levels')->where('level','=',$currlevel->level)->first();
      if(!empty($nextleveldata1)){
      $completed_level_cash= $nextleveldata1->cash;
      }
if(!empty($nextleveldata)){
      $remain=@$nextleveldata->contest - @$currlevel->contest;
      $text = "Join"." ".$remain." "."more contest";


$nextlevel_contest = $nextleveldata->contest;
$nextlevel_cash = $nextleveldata->cash;
$nextlevel_reward_cash = $nextleveldata->reward_cash;
$nextlevel_type = $nextleveldata->type;

      if($nextleveldata->cash!=0 && $nextleveldata->contest!=0)
      {
      $progressbarcash= $currlevel->cash/$nextleveldata->cash*100;
      $progressbarcontest= $currlevel->contest/$nextleveldata->contest*100;
      $progressbarcash = round($progressbarcash);
      $progressbarcontest = round($progressbarcontest);
      }

      if($currlevel->cash > $nextleveldata->cash)
        {
        $progressbarcash= $currlevel->cash/$currlevel->cash*100;
        $progressbarcontest= $currlevel->contest/$nextleveldata->contest*100;

        $progressbar=($progressbarcash+$progressbarcontest)/200*100;
        }

      if($currlevel->contest > $nextleveldata->contest)
        {
        $progressbarcash= (($currlevel->cash > 0) ? $currlevel->cash : 1) /(($nextleveldata->cash > 0) ? $nextleveldata->cash : 1)*100;
        $progressbarcontest= $currlevel->contest/$currlevel->contest*100;
        $progressbar=($progressbarcash+$progressbarcontest)/200*100;
        }
        else
        {
          $progressbar=round($progressbarcash+$progressbarcontest)/200*100;
        }

      if($progressbar>100 )
      {
        $progressbar=100;
      }
      //for cash progressbar only
      if($currlevel->cash >= $nextleveldata->cash)
      {
        $cash_progressbar=100;
      }
      else
      {
      $cash_progressbar= round($currlevel->cash/$nextleveldata->cash*100);
      }
      //for cash progressbar only

      //for contest progressbar only
      if($currlevel->contest >= $nextleveldata->contest)
      {
        $contest_progressbar=100;
      }
      else
      {
      $contest_progressbar= round($currlevel->contest/$nextleveldata->contest*100);
      }

      $is_visible_contest_text =$nextlevel_contest==0 ? 0 : 1;
      $is_visible_cash_text = $nextlevel_cash == 0 ? 0 : 1;
    }
}



        $leveldata=array(
          'currentlevel'=> $currlevel->level,
          'nextlevel' => $nextlevel,
          'contest' => $nextlevel_contest,
          'nextlevel_cash' => $nextlevel_cash,
          'currentlevel_cash' => $currentlevel_cash,
          'nextlevel_reward_cash' => $nextlevel_reward_cash,
          'is_visible_contest_text' => $is_visible_contest_text,
          'is_visible_cash_text' => $is_visible_cash_text,
          'currentlevel_reward_cash' => $currentlevel_reward_cash,
          'type' => $nextlevel_type,
          'progressbar' =>  floatval(sprintf("%.2f",$progressbar)),
          'cash_progressbar' => floatval(sprintf("%.2f", $cash_progressbar)),
          'contest_progressbar' => floatval(sprintf("%.2f", $contest_progressbar)),
          'progress_text' => $text,
          'balance_history' => $Json,
          'playing_history'=>$Json_p
        );



      return Response::json(["status" => STATUS_SUCCESS,"result"=>$leveldata]);
     }

       //to store or update player's favourite contest
       public function favcontest(Request $request)
       {
         $user_id = $request->user_id;
         // real_challenge_id
         $challengeid= $request->challenge_id;
         $myfavcontest = isset($request->my_fav_contest)?$request->my_fav_contest:0;

         // $favchallenge = DB::table('matchchallenges')->where('real_challenge_id','=',$challengeid)->first();


         $find_real_challenge=DB::table('challenges')->where('id','=',$request->challenge_id)->first();

       if(!empty($find_real_challenge)){

         if($myfavcontest==1)
         {
         DB::table('user_favourite_contest')->insert(["user_id"=>$user_id,"challenge_id"=>$find_real_challenge->id]);
         return Response::json(["status"=>1,"message"=>"Successfully added contest","result"=>'']);
         }
         else
         {
         DB::table('user_favourite_contest')->where('user_id','=',$user_id)->where('challenge_id','=',$find_real_challenge->id)->delete();
          return Response::json(["status"=>1,"message"=>"Successfully deleted contest","result"=>'']);
         }
       }

        return Response::json(["status"=>1,"message"=>"Successfully added contest","result"=>'']);

       }


    public function getpromocode(Request $request){
    $this->validate($request,[
    'user_id' => "required"
    ]);

    $codes = DB::table('usedoffers')->where('user_id',$request->user_id)->select('offer_id')->get();
    $usedcode = array();
    foreach ($codes as $key => $value) {
    $usedcode []  = $value->offer_id;

    }
    $dt = Carbon::now()->setTimezone('Asia/Kolkata')->format('Y-m-d H:i:s');

    $record =  DB::table('offers')->select('id','code','expire_date','description','title')->where('expire_date', '>=',$dt)
    // ->whereNotIn('code',$usedcode)
    ->get();

    return Response::json(["status" => STATUS_SUCCESS,"message" => "success","result"=> ["data" => $record]]);
    }


    public function validateLogin($user_id='')
    {

     $all_header = getallheaders();
      $Authorization = $all_header['Authorization'] ?? '';
      $FcmToken = $all_header['FcmToken'] ?? '';
      if(empty($Authorization)) {
        $data_array = [];
          // Helpers::logoutUserBySendNotification($user_id,$data_array,$FcmToken);
        response()->json(['error' => 'invalid_token'] , 400)->send(); die;
      }
      $token_data = explode("bearer ",$Authorization);
      $token = @$token_data[1];

    /*$user = RegisterUser::where('id',$user_id)
    // ->where('jwt_token',$token)
    ->first();*/

    $user_token = Helpers::get_user_token($user_id);
    // echo $user_token; exit;
    if (!empty($user_token)) {
      if ($token!=$user_token) {
        response()->json(['error' => 'invalid_token'] , 400)->send(); die;
      }
    } else {
      // $result = ['error' => 'already logged in!'];
      //  response()->json($result , 403)->send(); die;
      $data_array = [];

      response()->json(['error' => 'invalid_token'] , 400)->send(); die;

      // Helpers::logoutUserBySendNotification($user_id,$data_array,$FcmToken);

    }

    }

    public function getUserIpAddr(){
   $ipaddress = '';
   if (isset($_SERVER['HTTP_CLIENT_IP']))
       $ipaddress = $_SERVER['HTTP_CLIENT_IP'];
   else if(isset($_SERVER['HTTP_X_FORWARDED_FOR']))
       $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];
   else if(isset($_SERVER['HTTP_X_FORWARDED']))
       $ipaddress = $_SERVER['HTTP_X_FORWARDED'];
   else if(isset($_SERVER['HTTP_FORWARDED_FOR']))
       $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];
   else if(isset($_SERVER['HTTP_FORWARDED']))
       $ipaddress = $_SERVER['HTTP_FORWARDED'];
   else if(isset($_SERVER['REMOTE_ADDR']))
       $ipaddress = $_SERVER['REMOTE_ADDR'];
   else
       $ipaddress = 'UNKNOWN';
   return $ipaddress;
}

	public function getContestFreeTeamNumber(Request $request) {
		$this->validateLogin($request->user_id);
		$this->validate($request,[
			'user_id' => 'required',
			'challenge_id' => 'required'
		]);

		$input = $request->all();
		$Json = ["status" => 0,"message" => "", "result" => array()];

		$challenge = DB::table("matchchallenges")
			->where("id", $input['challenge_id'])
			->where("is_offer_team", "=", 1)
			->select("entryfee", "contest_free_team", "multi_entry", "max_team_limit" , 'contest_bonus_team' , 'offer_bonus_percent')
			->first();

		if(empty($challenge)) {

			$Json["message"] = "Free team is not available in this contest";
			return response()->json($Json);
		}

		if($challenge->multi_entry == 0) {
			$Json["message"] = "Free team is not available in this contest";
			return response()->json($Json);
		}

		$result = array();
		$max_team_limit = $challenge->max_team_limit < 1 ? MAX_TEAM_LIMIT : $challenge->max_team_limit;

		for($i=1; $i<=$max_team_limit;$i++) {
			$r["team"] = "Team ".$i;
			$r["entryfee"] = $challenge->entryfee;
      $r["offer"] = "-";
      if($i == $challenge->contest_free_team){
      $r["offer"] = "FREE";
      }
      if($i == $challenge->contest_bonus_team){
      $r["offer"] = $challenge->offer_bonus_percent."% Bonus";
      }

			array_push($result, $r);
		}

    $Json["status"] = 1;
		$Json["result"] = $result;
		return response()->json($Json);
	}

  public function get_subpaisa_checksum() {

    $post = $_POST;
    $order_id= 'order_'.$post['user_id'].rand(1000,9999);
    $insert_data= array(
      "userid" => $post['user_id'],
      "amount" => $post['amount'],
        "transaction_by" => "SubPaisa",
        "paymentstatus" => "pending",
        "transaction_id" => $order_id,
        "type" => "Add Fund"
      );

      // $myfile = fopen("test.txt", "a") or die("Unable to open file!");
      // $txt = json_encode($_POST);
      // $txt .= "\n";
      // fwrite($myfile, $txt);
      // fclose($myfile);exit;

      DB::table('transactions')->insert($insert_data);

    $res_data=array(
      "user_id"=>$post['user_id'],
      'transaction_id'=>$order_id,
      "amount"=>$post['amount'],
      "ClientCode"=>CLIENTCODE,
      "AesApiIv"=>AESAPIIV,
      "AesApiKey"=>AESAPIKEY,
      "TransUserName"=>TRANSUSERNAME,
      "TransUserPassword"=>TRANSUSERPASSWORD,
      "IsProd"=>1
    );

     return Response::json(["status" => STATUS_SUCCESS,"result"=>$res_data]);
    die;
  }


  //xxxxxxxxxxxxxx SAB PAISA NOTIFY API xxxxxxxxxxxxxxxxxxxxxx
    public function sabpaisa_notify_api(){

      $post = $_POST;

      $myfile = fopen("test.txt", "a") or die("Unable to open file!");
      $txt = json_encode($_POST);
      $txt .= "\n";
      fwrite($myfile, $txt);
      fclose($myfile);
      // exit;
      $orderAmount = $_POST['paidAmount'];
      $user_id =  $_POST['user_id'];
      $transaction_id= $_POST['transaction_id'];
      $sabpaisa_id = $_POST['sabpaisaTxnId'];
      $bankTxnId = $_POST['bankTxnId'];

      if($_POST['status']=='SUCCESS'){
            $transaction_row = DB::table('transactions')->where('transaction_id', $transaction_id)->where('paymentstatus', 'pending')->first();
            if (!empty($transaction_row)) {
                DB::table('transactions')->where('id', $transaction_row->id)->where('transaction_id', $transaction_id)->update(array('paymentstatus'=>'confirmed'));

                $user_id = $getdata['userid'] = $transaction_row->userid;
                $amount = $orderAmount;


                $userBalance = DB::table('userbalances')->where('user_id', $user_id)->first();


                $userdata = DB::table('registerusers')->where('id', $getdata['userid'])->first();


                $referid = $userdata->refer_id;

                $userBalanceReffred= DB::table('userbalances')->where('user_id', $referid)->first();


                $referdata = DB::table('registerusers')->where('id', $referid)->where('refer_to_join', 0)->first();




                if (!empty($userBalance)) {
                    $datainseert['user_id'] = $user_id;
                    $datainseert['refer_id']= $referid;
                    $datainseert['balance'] = $userBalance->balance+$amount;
                    DB::table('userbalances')->where('user_id', $user_id)->update($datainseert);
                }
                $bal_bonus_amt=0;
                $bal_win_amt=0;
                $bal_fund_amt=0;
                $total_available_amt=0;

                $findlastow = DB::table('userbalances')->where('user_id', $getdata['userid'])->first();



                if (!empty($findlastow)) {
                    $total_available_amt = $findlastow->balance+$findlastow->winning+$findlastow->bonus;
                    $bal_fund_amt = $findlastow->balance;
                    $bal_win_amt = $findlastow->winning;
                    $bal_bonus_amt = $findlastow->bonus;
                }
                //push notifications//
                $titleget = 'Add fund successfully!';
                $transactionsdata['type'] = 'Add Fund';
                $transactionsdata['transaction_id'] = $transaction_id;
                $transactionsdata['transaction_by'] = 'SubPaisa';
                $transactionsdata['sabpaisa_id'] = $sabpaisa_id;
                $transactionsdata['amount'] = $amount;
                $transactionsdata['addfund_amt'] = $amount;
                $transactionsdata['paymentstatus'] = 'confirmed';
                $transactionsdata['bal_fund_amt'] = $bal_fund_amt;
                $transactionsdata['bal_win_amt'] = $bal_win_amt;
                $transactionsdata['bal_bonus_amt'] = $bal_bonus_amt;
                $transactionsdata['cons_amount'] = $amount;
                $transactionsdata['total_available_amt'] = $total_available_amt;

                DB::table('transactions')->where('id', $transaction_row->id)->where('transaction_id', $transaction_id)->update($transactionsdata);

                $response = array("trsaction_id" => $post['sabpaisaTxnId'], "status" => 1, "Message"=>"Add fund successfully added.....");

             } else {
                $response = array("trsaction_id" => $post['sabpaisaTxnId'], "status" => 0, "Message"=>"Transaction not found....");
              }
      }
      else if($_POST['status']=='FAILED'){
       $myfile = fopen("subpaisareponse.txt", "a") or die("Unable to open file!");
       $txt = json_encode($_POST);
       $txt .= "\n";
       fwrite($myfile, $txt);
       fclose($myfile);
       // exit;
       $transaction_row = DB::table('transactions')->where('transaction_id', $transaction_id)->where('paymentstatus', 'pending')->first();

       if (!empty($transaction_row)) {
           DB::table('transactions')->where('id', $transaction_row->id)->where('transaction_id', $transaction_id)->update(array('paymentstatus'=>'FAILED'));
           $response = array("trsaction_id" => $post['sabpaisaTxnId'], "status" => 1, "Message"=>"Add fund failed.....");
        }
     }
      else{
        $response = array("trsaction_id" => $post['sabpaisaTxnId'], "status" => 0, "Message"=>"Transaction Failed from Gateway side....");
      }
      echo json_encode($response); exit;
}

  //xxxxxxxxxxxxxx SAB PAISA NOTIFY API xxxxxxxxxxxxxxxxxxxxxx


}
